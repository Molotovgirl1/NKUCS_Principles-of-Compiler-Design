INT	int	0	0
ID	n	0	3	0x55dcf56411a8
SEMICOLON	;	0	4
INT	int	1	0
ID	QuickSort	1	3	0x55dcf56411d0
LPAREN	(	1	12
INT	int	1	13
ID	arr	1	16	0x55dcf56411f8
LBRACKET	[	1	19
RBRACKET	]	1	20
COMMA	,	1	21
INT	int	1	22
ID	low	1	25	0x55dcf5641220
COMMA	,	1	28
INT	int	1	29
ID	high	1	32	0x55dcf5641248
RPAREN	)	1	36
LBRACE	{	2	0
IF	if	3	0
LPAREN	(	3	2
ID	low	3	3	0x55dcf5641220
LESS	<	3	6
ID	high	3	7	0x55dcf5641248
RPAREN	)	3	11
LBRACE	{	4	0
INT	int	5	0
ID	i	5	3	0x55dcf5641270
SEMICOLON	;	5	4
ID	i	6	0	0x55dcf5641270
ASSIGN	=	6	1
ID	low	6	2	0x55dcf5641220
SEMICOLON	;	6	5
INT	int	7	0
ID	j	7	3	0x55dcf5641298
SEMICOLON	;	7	4
ID	j	8	0	0x55dcf5641298
ASSIGN	=	8	1
ID	high	8	2	0x55dcf5641248
SEMICOLON	;	8	6
INT	int	9	0
ID	k	9	3	0x55dcf56412c0
SEMICOLON	;	9	4
ID	k	10	0	0x55dcf56412c0
ASSIGN	=	10	1
ID	arr	10	2	0x55dcf56411f8
LBRACKET	[	10	5
ID	low	10	6	0x55dcf5641220
RBRACKET	]	10	9
SEMICOLON	;	10	10
WHILE	while	11	0
LPAREN	(	11	5
ID	i	11	6	0x55dcf5641270
LESS	<	11	7
ID	j	11	8	0x55dcf5641298
RPAREN	)	11	9
LBRACE	{	12	0
WHILE	while	13	0
LPAREN	(	13	5
ID	i	13	6	0x55dcf5641270
LESS	<	13	7
ID	j	13	8	0x55dcf5641298
AND	&&	13	9
ID	arr	13	11	0x55dcf56411f8
LBRACKET	[	13	14
ID	j	13	15	0x55dcf5641298
RBRACKET	]	13	16
GREATER	>	13	17
ID	k	13	18	0x55dcf56412c0
SUB	-	13	19
DECIMAL	1	13	20	1
RPAREN	)	13	21
LBRACE	{	14	0
ID	j	15	0	0x55dcf5641298
ASSIGN	=	15	1
ID	j	15	2	0x55dcf5641298
SUB	-	15	3
DECIMAL	1	15	4	1
SEMICOLON	;	15	5
RBRACE	}	16	0
IF	if	18	0
LPAREN	(	18	2
ID	i	18	3	0x55dcf5641270
LESS	<	18	4
ID	j	18	5	0x55dcf5641298
RPAREN	)	18	6
LBRACE	{	19	0
ID	arr	20	0	0x55dcf56411f8
LBRACKET	[	20	3
ID	i	20	4	0x55dcf5641270
RBRACKET	]	20	5
ASSIGN	=	20	6
ID	arr	20	7	0x55dcf56411f8
LBRACKET	[	20	10
ID	j	20	11	0x55dcf5641298
RBRACKET	]	20	12
SEMICOLON	;	20	13
ID	i	21	0	0x55dcf5641270
ASSIGN	=	21	1
ID	i	21	2	0x55dcf5641270
ADD	+	21	3
DECIMAL	1	21	4	1
SEMICOLON	;	21	5
RBRACE	}	22	0
WHILE	while	24	0
LPAREN	(	24	5
ID	i	24	6	0x55dcf5641270
LESS	<	24	7
ID	j	24	8	0x55dcf5641298
AND	&&	24	9
ID	arr	24	11	0x55dcf56411f8
LBRACKET	[	24	14
ID	i	24	15	0x55dcf5641270
RBRACKET	]	24	16
LESS	<	24	17
ID	k	24	18	0x55dcf56412c0
RPAREN	)	24	19
LBRACE	{	25	0
ID	i	26	0	0x55dcf5641270
ASSIGN	=	26	1
ID	i	26	2	0x55dcf5641270
ADD	+	26	3
DECIMAL	1	26	4	1
SEMICOLON	;	26	5
RBRACE	}	27	0
IF	if	29	0
LPAREN	(	29	2
ID	i	29	3	0x55dcf5641270
LESS	<	29	4
ID	j	29	5	0x55dcf5641298
RPAREN	)	29	6
LBRACE	{	30	0
ID	arr	31	0	0x55dcf56411f8
LBRACKET	[	31	3
ID	j	31	4	0x55dcf5641298
RBRACKET	]	31	5
ASSIGN	=	31	6
ID	arr	31	7	0x55dcf56411f8
LBRACKET	[	31	10
ID	i	31	11	0x55dcf5641270
RBRACKET	]	31	12
SEMICOLON	;	31	13
ID	j	32	0	0x55dcf5641298
ASSIGN	=	32	1
ID	j	32	2	0x55dcf5641298
SUB	-	32	3
DECIMAL	1	32	4	1
SEMICOLON	;	32	5
RBRACE	}	33	0
RBRACE	}	34	0
ID	arr	36	0	0x55dcf56411f8
LBRACKET	[	36	3
ID	i	36	4	0x55dcf5641270
RBRACKET	]	36	5
ASSIGN	=	36	6
ID	k	36	7	0x55dcf56412c0
SEMICOLON	;	36	8
INT	int	37	0
ID	tmp	37	3	0x55dcf56412e8
SEMICOLON	;	37	6
ID	tmp	38	0	0x55dcf56412e8
ASSIGN	=	38	3
ID	i	38	4	0x55dcf5641270
SUB	-	38	5
DECIMAL	1	38	6	1
SEMICOLON	;	38	7
ID	tmp	39	0	0x55dcf56412e8
ASSIGN	=	39	3
ID	QuickSort	39	4	0x55dcf56411d0
LPAREN	(	39	13
ID	arr	39	14	0x55dcf56411f8
COMMA	,	39	17
ID	low	39	18	0x55dcf5641220
COMMA	,	39	21
ID	tmp	39	22	0x55dcf56412e8
RPAREN	)	39	25
SEMICOLON	;	39	26
ID	tmp	40	0	0x55dcf56412e8
ASSIGN	=	40	3
ID	i	40	4	0x55dcf5641270
ADD	+	40	5
DECIMAL	1	40	6	1
SEMICOLON	;	40	7
ID	tmp	41	0	0x55dcf56412e8
ASSIGN	=	41	3
ID	QuickSort	41	4	0x55dcf56411d0
LPAREN	(	41	13
ID	arr	41	14	0x55dcf56411f8
COMMA	,	41	17
ID	tmp	41	18	0x55dcf56412e8
COMMA	,	41	21
ID	high	41	22	0x55dcf5641248
RPAREN	)	41	26
SEMICOLON	;	41	27
RBRACE	}	42	0
RETURN	return	43	0
DECIMAL	0	43	6	0
SEMICOLON	;	43	7
RBRACE	}	44	0
INT	int	46	0
ID	main	46	3	0x55dcf5641310
LPAREN	(	46	7
RPAREN	)	46	8
LBRACE	{	46	9
ID	n	47	0	0x55dcf56411a8
ASSIGN	=	47	1
DECIMAL	10	47	2	10
SEMICOLON	;	47	4
INT	int	48	0
ID	a	48	3	0x55dcf5641338
LBRACKET	[	48	4
DECIMAL	10	48	5	10
RBRACKET	]	48	7
SEMICOLON	;	48	8
ID	a	49	0	0x55dcf5641338
LBRACKET	[	49	1
DECIMAL	0	49	2	0
RBRACKET	]	49	3
ASSIGN	=	49	4
DECIMAL	4	49	5	4
SEMICOLON	;	49	6
ID	a	49	7	0x55dcf5641338
LBRACKET	[	49	8
DECIMAL	1	49	9	1
RBRACKET	]	49	10
ASSIGN	=	49	11
DECIMAL	3	49	12	3
SEMICOLON	;	49	13
ID	a	49	14	0x55dcf5641338
LBRACKET	[	49	15
DECIMAL	2	49	16	2
RBRACKET	]	49	17
ASSIGN	=	49	18
DECIMAL	9	49	19	9
SEMICOLON	;	49	20
ID	a	49	21	0x55dcf5641338
LBRACKET	[	49	22
DECIMAL	3	49	23	3
RBRACKET	]	49	24
ASSIGN	=	49	25
DECIMAL	2	49	26	2
SEMICOLON	;	49	27
ID	a	49	28	0x55dcf5641338
LBRACKET	[	49	29
DECIMAL	4	49	30	4
RBRACKET	]	49	31
ASSIGN	=	49	32
DECIMAL	0	49	33	0
SEMICOLON	;	49	34
ID	a	50	0	0x55dcf5641338
LBRACKET	[	50	1
DECIMAL	5	50	2	5
RBRACKET	]	50	3
ASSIGN	=	50	4
DECIMAL	1	50	5	1
SEMICOLON	;	50	6
ID	a	50	7	0x55dcf5641338
LBRACKET	[	50	8
DECIMAL	6	50	9	6
RBRACKET	]	50	10
ASSIGN	=	50	11
DECIMAL	6	50	12	6
SEMICOLON	;	50	13
ID	a	50	14	0x55dcf5641338
LBRACKET	[	50	15
DECIMAL	7	50	16	7
RBRACKET	]	50	17
ASSIGN	=	50	18
DECIMAL	5	50	19	5
SEMICOLON	;	50	20
ID	a	50	21	0x55dcf5641338
LBRACKET	[	50	22
DECIMAL	8	50	23	8
RBRACKET	]	50	24
ASSIGN	=	50	25
DECIMAL	7	50	26	7
SEMICOLON	;	50	27
ID	a	50	28	0x55dcf5641338
LBRACKET	[	50	29
DECIMAL	9	50	30	9
RBRACKET	]	50	31
ASSIGN	=	50	32
DECIMAL	8	50	33	8
SEMICOLON	;	50	34
INT	int	51	0
ID	i	51	3	0x55dcf5641270
SEMICOLON	;	51	4
ID	i	52	0	0x55dcf5641270
ASSIGN	=	52	1
DECIMAL	0	52	2	0
SEMICOLON	;	52	3
INT	int	53	0
ID	tmp	53	3	0x55dcf56412e8
SEMICOLON	;	53	6
ID	tmp	54	0	0x55dcf56412e8
ASSIGN	=	54	3
DECIMAL	9	54	4	9
SEMICOLON	;	54	5
ID	i	55	0	0x55dcf5641270
ASSIGN	=	55	1
ID	QuickSort	55	2	0x55dcf56411d0
LPAREN	(	55	11
ID	a	55	12	0x55dcf5641338
COMMA	,	55	13
ID	i	55	14	0x55dcf5641270
COMMA	,	55	15
ID	tmp	55	16	0x55dcf56412e8
RPAREN	)	55	19
SEMICOLON	;	55	20
WHILE	while	56	0
LPAREN	(	56	5
ID	i	56	6	0x55dcf5641270
LESS	<	56	7
ID	n	56	8	0x55dcf56411a8
RPAREN	)	56	9
LBRACE	{	56	10
INT	int	57	0
ID	tmp	57	3	0x55dcf56412e8
SEMICOLON	;	57	6
ID	tmp	58	0	0x55dcf56412e8
ASSIGN	=	58	3
ID	a	58	4	0x55dcf5641338
LBRACKET	[	58	5
ID	i	58	6	0x55dcf5641270
RBRACKET	]	58	7
SEMICOLON	;	58	8
ID	putint	59	0	0x55dcf5641360
LPAREN	(	59	6
ID	tmp	59	7	0x55dcf56412e8
RPAREN	)	59	10
SEMICOLON	;	59	11
ID	tmp	60	0	0x55dcf56412e8
ASSIGN	=	60	3
DECIMAL	10	60	4	10
SEMICOLON	;	60	6
ID	putch	61	0	0x55dcf5641388
LPAREN	(	61	5
ID	tmp	61	6	0x55dcf56412e8
RPAREN	)	61	9
SEMICOLON	;	61	10
ID	i	62	0	0x55dcf5641270
ASSIGN	=	62	1
ID	i	62	2	0x55dcf5641270
ADD	+	62	3
DECIMAL	1	62	4	1
SEMICOLON	;	62	5
RBRACE	}	63	0
RETURN	return	64	0
DECIMAL	0	64	6	0
SEMICOLON	;	64	7
RBRACE	}	65	0
