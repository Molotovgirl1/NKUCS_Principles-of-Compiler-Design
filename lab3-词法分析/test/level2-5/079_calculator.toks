INT	int	0	0
ID	ints	0	3	0x555fc42241a8
LBRACKET	[	0	7
DECIMAL	10000	0	8	10000
RBRACKET	]	0	13
SEMICOLON	;	0	14
INT	int	1	0
ID	intt	1	3	0x555fc42241d0
SEMICOLON	;	1	7
INT	int	2	0
ID	chas	2	3	0x555fc42241f8
LBRACKET	[	2	7
DECIMAL	10000	2	8	10000
RBRACKET	]	2	13
SEMICOLON	;	2	14
INT	int	3	0
ID	chat	3	3	0x555fc4224220
SEMICOLON	;	3	7
INT	int	4	0
ID	i	4	3	0x555fc4224248
ASSIGN	=	4	4
DECIMAL	0	4	5	0
COMMA	,	4	6
ID	ii	4	7	0x555fc4224270
ASSIGN	=	4	9
DECIMAL	1	4	10	1
SEMICOLON	;	4	11
INT	int	5	0
ID	c	5	3	0x555fc4224298
SEMICOLON	;	5	4
INT	int	6	0
ID	get	6	3	0x555fc42242c0
LBRACKET	[	6	6
DECIMAL	10000	6	7	10000
RBRACKET	]	6	12
SEMICOLON	;	6	13
INT	int	7	0
ID	get2	7	3	0x555fc42242e8
LBRACKET	[	7	7
DECIMAL	10000	7	8	10000
RBRACKET	]	7	13
SEMICOLON	;	7	14
INT	int	9	0
ID	isdigit	9	3	0x555fc4224310
LPAREN	(	9	10
INT	int	9	11
ID	x	9	14	0x555fc4224338
RPAREN	)	9	15
LBRACE	{	9	16
IF	if	10	0
LPAREN	(	10	2
ID	x	10	3	0x555fc4224338
GEQUAL	>=	10	4
DECIMAL	48	10	6	48
AND	&&	10	8
ID	x	10	10	0x555fc4224338
LEQUAL	<=	10	11
DECIMAL	57	10	13	57
RPAREN	)	10	15
RETURN	return	11	0
DECIMAL	1	11	6	1
SEMICOLON	;	11	7
RETURN	return	12	0
DECIMAL	0	12	6	0
SEMICOLON	;	12	7
RBRACE	}	13	0
INT	int	15	0
ID	power	15	3	0x555fc4224360
LPAREN	(	15	8
INT	int	15	9
ID	b	15	12	0x555fc4224388
COMMA	,	15	13
INT	int	15	14
ID	a	15	17	0x555fc42243b0
RPAREN	)	15	18
LBRACE	{	15	19
INT	int	16	0
ID	result	16	3	0x555fc42243d8
ASSIGN	=	16	9
DECIMAL	1	16	10	1
SEMICOLON	;	16	11
WHILE	while	17	0
LPAREN	(	17	5
ID	a	17	6	0x555fc42243b0
NEQUAL	!=	17	7
DECIMAL	0	17	9	0
RPAREN	)	17	10
LBRACE	{	17	11
ID	result	18	0	0x555fc42243d8
ASSIGN	=	18	6
ID	result	18	7	0x555fc42243d8
MUL	*	18	13
ID	b	18	14	0x555fc4224388
SEMICOLON	;	18	15
ID	a	19	0	0x555fc42243b0
ASSIGN	=	19	1
ID	a	19	2	0x555fc42243b0
SUB	-	19	3
DECIMAL	1	19	4	1
SEMICOLON	;	19	5
RBRACE	}	20	0
RETURN	return	21	0
ID	result	21	6	0x555fc42243d8
SEMICOLON	;	21	12
RBRACE	}	22	0
INT	int	24	0
ID	getstr	24	3	0x555fc4224400
LPAREN	(	24	9
INT	int	24	10
ID	get	24	13	0x555fc42242c0
LBRACKET	[	24	16
RBRACKET	]	24	17
RPAREN	)	24	18
LBRACE	{	24	19
INT	int	25	0
ID	x	25	3	0x555fc4224338
ASSIGN	=	25	4
ID	getch	25	5	0x555fc4224428
LPAREN	(	25	10
RPAREN	)	25	11
SEMICOLON	;	25	12
INT	int	26	0
ID	length	26	3	0x555fc4224450
ASSIGN	=	26	9
DECIMAL	0	26	10	0
SEMICOLON	;	26	11
WHILE	while	27	0
LPAREN	(	27	5
ID	x	27	6	0x555fc4224338
NEQUAL	!=	27	7
DECIMAL	13	27	9	13
AND	&&	27	11
ID	x	27	13	0x555fc4224338
NEQUAL	!=	27	14
DECIMAL	10	27	16	10
RPAREN	)	27	18
LBRACE	{	27	19
ID	get	28	0	0x555fc42242c0
LBRACKET	[	28	3
ID	length	28	4	0x555fc4224450
RBRACKET	]	28	10
ASSIGN	=	28	11
ID	x	28	12	0x555fc4224338
SEMICOLON	;	28	13
ID	length	29	0	0x555fc4224450
ASSIGN	=	29	6
ID	length	29	7	0x555fc4224450
ADD	+	29	13
DECIMAL	1	29	14	1
SEMICOLON	;	29	15
ID	x	30	0	0x555fc4224338
ASSIGN	=	30	1
ID	getch	30	2	0x555fc4224428
LPAREN	(	30	7
RPAREN	)	30	8
SEMICOLON	;	30	9
RBRACE	}	31	0
RETURN	return	32	0
ID	length	32	6	0x555fc4224450
SEMICOLON	;	32	12
RBRACE	}	33	0
VOID	void	35	0
ID	intpush	35	4	0x555fc4224478
LPAREN	(	35	11
INT	int	35	12
ID	x	35	15	0x555fc4224338
RPAREN	)	35	16
LBRACE	{	36	0
ID	intt	37	0	0x555fc42241d0
ASSIGN	=	37	4
ID	intt	37	5	0x555fc42241d0
ADD	+	37	9
DECIMAL	1	37	10	1
SEMICOLON	;	37	11
ID	ints	38	0	0x555fc42241a8
LBRACKET	[	38	4
ID	intt	38	5	0x555fc42241d0
RBRACKET	]	38	9
ASSIGN	=	38	10
ID	x	38	11	0x555fc4224338
SEMICOLON	;	38	12
RBRACE	}	39	0
VOID	void	40	0
ID	chapush	40	4	0x555fc42244a0
LPAREN	(	40	11
INT	int	40	12
ID	x	40	15	0x555fc4224338
RPAREN	)	40	16
LBRACE	{	41	0
ID	chat	42	0	0x555fc4224220
ASSIGN	=	42	4
ID	chat	42	5	0x555fc4224220
ADD	+	42	9
DECIMAL	1	42	10	1
SEMICOLON	;	42	11
ID	chas	43	0	0x555fc42241f8
LBRACKET	[	43	4
ID	chat	43	5	0x555fc4224220
RBRACKET	]	43	9
ASSIGN	=	43	10
ID	x	43	11	0x555fc4224338
SEMICOLON	;	43	12
RBRACE	}	44	0
INT	int	45	0
ID	intpop	45	3	0x555fc42244c8
LPAREN	(	45	9
RPAREN	)	45	10
LBRACE	{	46	0
ID	intt	47	0	0x555fc42241d0
ASSIGN	=	47	4
ID	intt	47	5	0x555fc42241d0
SUB	-	47	9
DECIMAL	1	47	10	1
SEMICOLON	;	47	11
RETURN	return	48	0
ID	ints	48	6	0x555fc42241a8
LBRACKET	[	48	10
ID	intt	48	11	0x555fc42241d0
ADD	+	48	15
DECIMAL	1	48	16	1
RBRACKET	]	48	17
SEMICOLON	;	48	18
RBRACE	}	49	0
INT	int	50	0
ID	chapop	50	3	0x555fc42244f0
LPAREN	(	50	9
RPAREN	)	50	10
LBRACE	{	51	0
ID	chat	52	0	0x555fc4224220
ASSIGN	=	52	4
ID	chat	52	5	0x555fc4224220
SUB	-	52	9
DECIMAL	1	52	10	1
SEMICOLON	;	52	11
RETURN	return	53	0
ID	chas	53	6	0x555fc42241f8
LBRACKET	[	53	10
ID	chat	53	11	0x555fc4224220
ADD	+	53	15
DECIMAL	1	53	16	1
RBRACKET	]	53	17
SEMICOLON	;	53	18
RBRACE	}	54	0
VOID	void	55	0
ID	intadd	55	4	0x555fc4224518
LPAREN	(	55	10
INT	int	55	11
ID	x	55	14	0x555fc4224338
RPAREN	)	55	15
LBRACE	{	56	0
ID	ints	57	0	0x555fc42241a8
LBRACKET	[	57	4
ID	intt	57	5	0x555fc42241d0
RBRACKET	]	57	9
ASSIGN	=	57	10
ID	ints	57	11	0x555fc42241a8
LBRACKET	[	57	15
ID	intt	57	16	0x555fc42241d0
RBRACKET	]	57	20
MUL	*	57	21
DECIMAL	10	57	22	10
SEMICOLON	;	57	24
ID	ints	58	0	0x555fc42241a8
LBRACKET	[	58	4
ID	intt	58	5	0x555fc42241d0
RBRACKET	]	58	9
ASSIGN	=	58	10
ID	ints	58	11	0x555fc42241a8
LBRACKET	[	58	15
ID	intt	58	16	0x555fc42241d0
RBRACKET	]	58	20
ADD	+	58	21
ID	x	58	22	0x555fc4224338
SEMICOLON	;	58	23
RBRACE	}	59	0
INT	int	61	0
ID	find	61	3	0x555fc4224540
LPAREN	(	61	7
RPAREN	)	61	8
LBRACE	{	62	0
ID	c	63	0	0x555fc4224298
ASSIGN	=	63	1
ID	chapop	63	2	0x555fc42244f0
LPAREN	(	63	8
RPAREN	)	63	9
SEMICOLON	;	63	10
ID	get2	64	0	0x555fc42242e8
LBRACKET	[	64	4
ID	ii	64	5	0x555fc4224270
RBRACKET	]	64	7
ASSIGN	=	64	8
DECIMAL	32	64	9	32
SEMICOLON	;	64	11
ID	get2	65	0	0x555fc42242e8
LBRACKET	[	65	4
ID	ii	65	5	0x555fc4224270
ADD	+	65	7
DECIMAL	1	65	8	1
RBRACKET	]	65	9
ASSIGN	=	65	10
ID	c	65	11	0x555fc4224298
SEMICOLON	;	65	12
ID	ii	66	0	0x555fc4224270
ASSIGN	=	66	2
ID	ii	66	3	0x555fc4224270
ADD	+	66	5
DECIMAL	2	66	6	2
SEMICOLON	;	66	7
IF	if	67	0
LPAREN	(	67	2
ID	chat	67	3	0x555fc4224220
EQUAL	==	67	7
DECIMAL	0	67	9	0
RPAREN	)	67	10
RETURN	return	67	11
DECIMAL	0	67	17	0
SEMICOLON	;	67	18
RETURN	return	68	0
DECIMAL	1	68	6	1
SEMICOLON	;	68	7
RBRACE	}	69	0
INT	int	71	0
ID	main	71	3	0x555fc4224568
LPAREN	(	71	7
RPAREN	)	71	8
LBRACE	{	72	0
ID	intt	73	0	0x555fc42241d0
ASSIGN	=	73	4
DECIMAL	0	73	5	0
SEMICOLON	;	73	6
ID	chat	74	0	0x555fc4224220
ASSIGN	=	74	4
DECIMAL	0	74	5	0
SEMICOLON	;	74	6
INT	int	75	0
ID	lengets	75	3	0x555fc4224590
ASSIGN	=	75	10
ID	getstr	75	11	0x555fc4224400
LPAREN	(	75	17
ID	get	75	18	0x555fc42242c0
RPAREN	)	75	21
SEMICOLON	;	75	22
WHILE	while	76	0
LPAREN	(	76	5
ID	i	76	6	0x555fc4224248
LESS	<	76	7
ID	lengets	76	8	0x555fc4224590
RPAREN	)	76	15
LBRACE	{	77	0
IF	if	78	0
LPAREN	(	78	2
ID	isdigit	78	3	0x555fc4224310
LPAREN	(	78	10
ID	get	78	11	0x555fc42242c0
LBRACKET	[	78	14
ID	i	78	15	0x555fc4224248
RBRACKET	]	78	16
RPAREN	)	78	17
EQUAL	==	78	18
DECIMAL	1	78	20	1
RPAREN	)	78	21
LBRACE	{	79	0
ID	get2	80	0	0x555fc42242e8
LBRACKET	[	80	4
ID	ii	80	5	0x555fc4224270
RBRACKET	]	80	7
ASSIGN	=	80	8
ID	get	80	9	0x555fc42242c0
LBRACKET	[	80	12
ID	i	80	13	0x555fc4224248
RBRACKET	]	80	14
SEMICOLON	;	80	15
ID	ii	81	0	0x555fc4224270
ASSIGN	=	81	2
ID	ii	81	3	0x555fc4224270
ADD	+	81	5
DECIMAL	1	81	6	1
SEMICOLON	;	81	7
RBRACE	}	82	0
ELSE	else	83	0
LBRACE	{	84	0
IF	if	85	0
LPAREN	(	85	2
ID	get	85	3	0x555fc42242c0
LBRACKET	[	85	6
ID	i	85	7	0x555fc4224248
RBRACKET	]	85	8
EQUAL	==	85	9
DECIMAL	40	85	11	40
RPAREN	)	85	13
ID	chapush	85	14	0x555fc42244a0
LPAREN	(	85	21
DECIMAL	40	85	22	40
RPAREN	)	85	24
SEMICOLON	;	85	25
IF	if	86	0
LPAREN	(	86	2
ID	get	86	3	0x555fc42242c0
LBRACKET	[	86	6
ID	i	86	7	0x555fc4224248
RBRACKET	]	86	8
EQUAL	==	86	9
DECIMAL	94	86	11	94
RPAREN	)	86	13
ID	chapush	86	14	0x555fc42244a0
LPAREN	(	86	21
DECIMAL	94	86	22	94
RPAREN	)	86	24
SEMICOLON	;	86	25
IF	if	87	0
LPAREN	(	87	2
ID	get	87	3	0x555fc42242c0
LBRACKET	[	87	6
ID	i	87	7	0x555fc4224248
RBRACKET	]	87	8
EQUAL	==	87	9
DECIMAL	41	87	11	41
RPAREN	)	87	13
LBRACE	{	88	0
ID	c	89	0	0x555fc4224298
ASSIGN	=	89	1
ID	chapop	89	2	0x555fc42244f0
LPAREN	(	89	8
RPAREN	)	89	9
SEMICOLON	;	89	10
WHILE	while	90	0
LPAREN	(	90	5
ID	c	90	6	0x555fc4224298
NEQUAL	!=	90	7
DECIMAL	40	90	9	40
RPAREN	)	90	11
LBRACE	{	91	0
ID	get2	92	0	0x555fc42242e8
LBRACKET	[	92	4
ID	ii	92	5	0x555fc4224270
RBRACKET	]	92	7
ASSIGN	=	92	8
DECIMAL	32	92	9	32
SEMICOLON	;	92	11
ID	get2	93	0	0x555fc42242e8
LBRACKET	[	93	4
ID	ii	93	5	0x555fc4224270
ADD	+	93	7
DECIMAL	1	93	8	1
RBRACKET	]	93	9
ASSIGN	=	93	10
ID	c	93	11	0x555fc4224298
SEMICOLON	;	93	12
ID	ii	94	0	0x555fc4224270
ASSIGN	=	94	2
ID	ii	94	3	0x555fc4224270
ADD	+	94	5
DECIMAL	2	94	6	2
SEMICOLON	;	94	7
ID	c	95	0	0x555fc4224298
ASSIGN	=	95	1
ID	chapop	95	2	0x555fc42244f0
LPAREN	(	95	8
RPAREN	)	95	9
SEMICOLON	;	95	10
RBRACE	}	96	0
RBRACE	}	97	0
IF	if	98	0
LPAREN	(	98	2
ID	get	98	3	0x555fc42242c0
LBRACKET	[	98	6
ID	i	98	7	0x555fc4224248
RBRACKET	]	98	8
EQUAL	==	98	9
DECIMAL	43	98	11	43
RPAREN	)	98	13
LBRACE	{	99	0
WHILE	while	100	0
LPAREN	(	100	5
ID	chas	100	6	0x555fc42241f8
LBRACKET	[	100	10
ID	chat	100	11	0x555fc4224220
RBRACKET	]	100	15
EQUAL	==	100	16
DECIMAL	43	100	18	43
OR	||	100	20
ID	chas	100	22	0x555fc42241f8
LBRACKET	[	100	26
ID	chat	100	27	0x555fc4224220
RBRACKET	]	100	31
EQUAL	==	100	32
DECIMAL	45	100	34	45
OR	||	100	36
ID	chas	100	38	0x555fc42241f8
LBRACKET	[	100	42
ID	chat	100	43	0x555fc4224220
RBRACKET	]	100	47
EQUAL	==	100	48
DECIMAL	42	100	50	42
OR	||	100	52
ID	chas	100	54	0x555fc42241f8
LBRACKET	[	100	58
ID	chat	100	59	0x555fc4224220
RBRACKET	]	100	63
EQUAL	==	100	64
DECIMAL	47	100	66	47
OR	||	100	68
ID	chas	100	70	0x555fc42241f8
LBRACKET	[	100	74
ID	chat	100	75	0x555fc4224220
RBRACKET	]	100	79
EQUAL	==	100	80
DECIMAL	37	100	82	37
OR	||	100	84
ID	chas	100	86	0x555fc42241f8
LBRACKET	[	100	90
ID	chat	100	91	0x555fc4224220
RBRACKET	]	100	95
EQUAL	==	100	96
DECIMAL	94	100	98	94
RPAREN	)	100	100
LBRACE	{	101	0
IF	if	102	0
LPAREN	(	102	2
ID	find	102	3	0x555fc4224540
LPAREN	(	102	7
RPAREN	)	102	8
EQUAL	==	102	9
DECIMAL	0	102	11	0
RPAREN	)	102	12
BREAK	break	102	13
SEMICOLON	;	102	18
RBRACE	}	103	0
ID	chapush	104	0	0x555fc42244a0
LPAREN	(	104	7
DECIMAL	43	104	8	43
RPAREN	)	104	10
SEMICOLON	;	104	11
RBRACE	}	105	0
IF	if	106	0
LPAREN	(	106	2
ID	get	106	3	0x555fc42242c0
LBRACKET	[	106	6
ID	i	106	7	0x555fc4224248
RBRACKET	]	106	8
EQUAL	==	106	9
DECIMAL	45	106	11	45
RPAREN	)	106	13
LBRACE	{	107	0
WHILE	while	108	0
LPAREN	(	108	5
ID	chas	108	6	0x555fc42241f8
LBRACKET	[	108	10
ID	chat	108	11	0x555fc4224220
RBRACKET	]	108	15
EQUAL	==	108	16
DECIMAL	43	108	18	43
OR	||	108	20
ID	chas	108	22	0x555fc42241f8
LBRACKET	[	108	26
ID	chat	108	27	0x555fc4224220
RBRACKET	]	108	31
EQUAL	==	108	32
DECIMAL	45	108	34	45
OR	||	108	36
ID	chas	108	38	0x555fc42241f8
LBRACKET	[	108	42
ID	chat	108	43	0x555fc4224220
RBRACKET	]	108	47
EQUAL	==	108	48
DECIMAL	42	108	50	42
OR	||	108	52
ID	chas	108	54	0x555fc42241f8
LBRACKET	[	108	58
ID	chat	108	59	0x555fc4224220
RBRACKET	]	108	63
EQUAL	==	108	64
DECIMAL	47	108	66	47
OR	||	108	68
ID	chas	108	70	0x555fc42241f8
LBRACKET	[	108	74
ID	chat	108	75	0x555fc4224220
RBRACKET	]	108	79
EQUAL	==	108	80
DECIMAL	37	108	82	37
OR	||	108	84
ID	chas	108	86	0x555fc42241f8
LBRACKET	[	108	90
ID	chat	108	91	0x555fc4224220
RBRACKET	]	108	95
EQUAL	==	108	96
DECIMAL	94	108	98	94
RPAREN	)	108	100
LBRACE	{	109	0
IF	if	110	0
LPAREN	(	110	2
ID	find	110	3	0x555fc4224540
LPAREN	(	110	7
RPAREN	)	110	8
EQUAL	==	110	9
DECIMAL	0	110	11	0
RPAREN	)	110	12
BREAK	break	110	13
SEMICOLON	;	110	18
RBRACE	}	111	0
ID	chapush	112	0	0x555fc42244a0
LPAREN	(	112	7
DECIMAL	45	112	8	45
RPAREN	)	112	10
SEMICOLON	;	112	11
RBRACE	}	113	0
IF	if	114	0
LPAREN	(	114	2
ID	get	114	3	0x555fc42242c0
LBRACKET	[	114	6
ID	i	114	7	0x555fc4224248
RBRACKET	]	114	8
EQUAL	==	114	9
DECIMAL	42	114	11	42
RPAREN	)	114	13
LBRACE	{	115	0
WHILE	while	116	0
LPAREN	(	116	5
ID	chas	116	6	0x555fc42241f8
LBRACKET	[	116	10
ID	chat	116	11	0x555fc4224220
RBRACKET	]	116	15
EQUAL	==	116	16
DECIMAL	42	116	18	42
OR	||	116	20
ID	chas	116	22	0x555fc42241f8
LBRACKET	[	116	26
ID	chat	116	27	0x555fc4224220
RBRACKET	]	116	31
EQUAL	==	116	32
DECIMAL	47	116	34	47
OR	||	116	36
ID	chas	116	38	0x555fc42241f8
LBRACKET	[	116	42
ID	chat	116	43	0x555fc4224220
RBRACKET	]	116	47
EQUAL	==	116	48
DECIMAL	37	116	50	37
OR	||	116	52
ID	chas	116	54	0x555fc42241f8
LBRACKET	[	116	58
ID	chat	116	59	0x555fc4224220
RBRACKET	]	116	63
EQUAL	==	116	64
DECIMAL	94	116	66	94
RPAREN	)	116	68
LBRACE	{	117	0
IF	if	118	0
LPAREN	(	118	2
ID	find	118	3	0x555fc4224540
LPAREN	(	118	7
RPAREN	)	118	8
EQUAL	==	118	9
DECIMAL	0	118	11	0
RPAREN	)	118	12
BREAK	break	118	13
SEMICOLON	;	118	18
RBRACE	}	119	0
ID	chapush	120	0	0x555fc42244a0
LPAREN	(	120	7
DECIMAL	42	120	8	42
RPAREN	)	120	10
SEMICOLON	;	120	11
RBRACE	}	121	0
IF	if	122	0
LPAREN	(	122	2
ID	get	122	3	0x555fc42242c0
LBRACKET	[	122	6
ID	i	122	7	0x555fc4224248
RBRACKET	]	122	8
EQUAL	==	122	9
DECIMAL	47	122	11	47
RPAREN	)	122	13
LBRACE	{	123	0
WHILE	while	124	0
LPAREN	(	124	5
ID	chas	124	6	0x555fc42241f8
LBRACKET	[	124	10
ID	chat	124	11	0x555fc4224220
RBRACKET	]	124	15
EQUAL	==	124	16
DECIMAL	42	124	18	42
OR	||	124	20
ID	chas	124	22	0x555fc42241f8
LBRACKET	[	124	26
ID	chat	124	27	0x555fc4224220
RBRACKET	]	124	31
EQUAL	==	124	32
DECIMAL	47	124	34	47
OR	||	124	36
ID	chas	124	38	0x555fc42241f8
LBRACKET	[	124	42
ID	chat	124	43	0x555fc4224220
RBRACKET	]	124	47
EQUAL	==	124	48
DECIMAL	37	124	50	37
OR	||	124	52
ID	chas	124	54	0x555fc42241f8
LBRACKET	[	124	58
ID	chat	124	59	0x555fc4224220
RBRACKET	]	124	63
EQUAL	==	124	64
DECIMAL	94	124	66	94
RPAREN	)	124	68
LBRACE	{	125	0
IF	if	126	0
LPAREN	(	126	2
ID	find	126	3	0x555fc4224540
LPAREN	(	126	7
RPAREN	)	126	8
EQUAL	==	126	9
DECIMAL	0	126	11	0
RPAREN	)	126	12
BREAK	break	126	13
SEMICOLON	;	126	18
RBRACE	}	127	0
ID	chapush	128	0	0x555fc42244a0
LPAREN	(	128	7
DECIMAL	47	128	8	47
RPAREN	)	128	10
SEMICOLON	;	128	11
RBRACE	}	129	0
IF	if	130	0
LPAREN	(	130	2
ID	get	130	3	0x555fc42242c0
LBRACKET	[	130	6
ID	i	130	7	0x555fc4224248
RBRACKET	]	130	8
EQUAL	==	130	9
DECIMAL	37	130	11	37
RPAREN	)	130	13
LBRACE	{	131	0
WHILE	while	132	0
LPAREN	(	132	5
ID	chas	132	6	0x555fc42241f8
LBRACKET	[	132	10
ID	chat	132	11	0x555fc4224220
RBRACKET	]	132	15
EQUAL	==	132	16
DECIMAL	42	132	18	42
OR	||	132	20
ID	chas	132	22	0x555fc42241f8
LBRACKET	[	132	26
ID	chat	132	27	0x555fc4224220
RBRACKET	]	132	31
EQUAL	==	132	32
DECIMAL	47	132	34	47
OR	||	132	36
ID	chas	132	38	0x555fc42241f8
LBRACKET	[	132	42
ID	chat	132	43	0x555fc4224220
RBRACKET	]	132	47
EQUAL	==	132	48
DECIMAL	37	132	50	37
OR	||	132	52
ID	chas	132	54	0x555fc42241f8
LBRACKET	[	132	58
ID	chat	132	59	0x555fc4224220
RBRACKET	]	132	63
EQUAL	==	132	64
DECIMAL	94	132	66	94
RPAREN	)	132	68
LBRACE	{	133	0
IF	if	134	0
LPAREN	(	134	2
ID	find	134	3	0x555fc4224540
LPAREN	(	134	7
RPAREN	)	134	8
EQUAL	==	134	9
DECIMAL	0	134	11	0
RPAREN	)	134	12
BREAK	break	134	13
SEMICOLON	;	134	18
RBRACE	}	135	0
ID	chapush	136	0	0x555fc42244a0
LPAREN	(	136	7
DECIMAL	37	136	8	37
RPAREN	)	136	10
SEMICOLON	;	136	11
RBRACE	}	137	0
ID	get2	138	0	0x555fc42242e8
LBRACKET	[	138	4
ID	ii	138	5	0x555fc4224270
RBRACKET	]	138	7
ASSIGN	=	138	8
DECIMAL	32	138	9	32
SEMICOLON	;	138	11
ID	ii	139	0	0x555fc4224270
ASSIGN	=	139	2
ID	ii	139	3	0x555fc4224270
ADD	+	139	5
DECIMAL	1	139	6	1
SEMICOLON	;	139	7
RBRACE	}	140	0
ID	i	141	0	0x555fc4224248
ASSIGN	=	141	1
ID	i	141	2	0x555fc4224248
ADD	+	141	3
DECIMAL	1	141	4	1
SEMICOLON	;	141	5
RBRACE	}	142	0
WHILE	while	143	0
LPAREN	(	143	5
ID	chat	143	6	0x555fc4224220
GREATER	>	143	10
DECIMAL	0	143	11	0
RPAREN	)	143	12
LBRACE	{	144	0
INT	int	145	0
ID	c	145	3	0x555fc4224298
ASSIGN	=	145	4
ID	chapop	145	5	0x555fc42244f0
LPAREN	(	145	11
RPAREN	)	145	12
SEMICOLON	;	145	13
ID	get2	146	0	0x555fc42242e8
LBRACKET	[	146	4
ID	ii	146	5	0x555fc4224270
RBRACKET	]	146	7
ASSIGN	=	146	8
DECIMAL	32	146	9	32
SEMICOLON	;	146	11
ID	get2	147	0	0x555fc42242e8
LBRACKET	[	147	4
ID	ii	147	5	0x555fc4224270
ADD	+	147	7
DECIMAL	1	147	8	1
RBRACKET	]	147	9
ASSIGN	=	147	10
ID	c	147	11	0x555fc4224298
SEMICOLON	;	147	12
ID	ii	148	0	0x555fc4224270
ASSIGN	=	148	2
ID	ii	148	3	0x555fc4224270
ADD	+	148	5
DECIMAL	2	148	6	2
SEMICOLON	;	148	7
RBRACE	}	149	0
ID	get2	150	0	0x555fc42242e8
LBRACKET	[	150	4
ID	ii	150	5	0x555fc4224270
RBRACKET	]	150	7
ASSIGN	=	150	8
DECIMAL	64	150	9	64
SEMICOLON	;	150	11
ID	i	151	0	0x555fc4224248
ASSIGN	=	151	1
DECIMAL	1	151	2	1
SEMICOLON	;	151	3
WHILE	while	152	0
LPAREN	(	152	5
ID	get2	152	6	0x555fc42242e8
LBRACKET	[	152	10
ID	i	152	11	0x555fc4224248
RBRACKET	]	152	12
NEQUAL	!=	152	13
DECIMAL	64	152	15	64
RPAREN	)	152	17
LBRACE	{	153	0
IF	if	154	0
LPAREN	(	154	2
ID	get2	154	3	0x555fc42242e8
LBRACKET	[	154	7
ID	i	154	8	0x555fc4224248
RBRACKET	]	154	9
EQUAL	==	154	10
DECIMAL	43	154	12	43
OR	||	154	14
ID	get2	154	16	0x555fc42242e8
LBRACKET	[	154	20
ID	i	154	21	0x555fc4224248
RBRACKET	]	154	22
EQUAL	==	154	23
DECIMAL	45	154	25	45
OR	||	154	27
ID	get2	154	29	0x555fc42242e8
LBRACKET	[	154	33
ID	i	154	34	0x555fc4224248
RBRACKET	]	154	35
EQUAL	==	154	36
DECIMAL	42	154	38	42
OR	||	154	40
ID	get2	154	42	0x555fc42242e8
LBRACKET	[	154	46
ID	i	154	47	0x555fc4224248
RBRACKET	]	154	48
EQUAL	==	154	49
DECIMAL	47	154	51	47
OR	||	154	53
ID	get2	154	55	0x555fc42242e8
LBRACKET	[	154	59
ID	i	154	60	0x555fc4224248
RBRACKET	]	154	61
EQUAL	==	154	62
DECIMAL	37	154	64	37
OR	||	154	66
ID	get2	154	68	0x555fc42242e8
LBRACKET	[	154	72
ID	i	154	73	0x555fc4224248
RBRACKET	]	154	74
EQUAL	==	154	75
DECIMAL	94	154	77	94
RPAREN	)	154	79
LBRACE	{	155	0
INT	int	156	0
ID	a	156	3	0x555fc42243b0
ASSIGN	=	156	4
ID	intpop	156	5	0x555fc42244c8
LPAREN	(	156	11
RPAREN	)	156	12
SEMICOLON	;	156	13
INT	int	156	14
ID	b	156	17	0x555fc4224388
ASSIGN	=	156	18
ID	intpop	156	19	0x555fc42244c8
LPAREN	(	156	25
RPAREN	)	156	26
SEMICOLON	;	156	27
INT	int	156	28
ID	c	156	31	0x555fc4224298
SEMICOLON	;	156	32
IF	if	157	0
LPAREN	(	157	2
ID	get2	157	3	0x555fc42242e8
LBRACKET	[	157	7
ID	i	157	8	0x555fc4224248
RBRACKET	]	157	9
EQUAL	==	157	10
DECIMAL	43	157	12	43
RPAREN	)	157	14
ID	c	157	15	0x555fc4224298
ASSIGN	=	157	16
ID	a	157	17	0x555fc42243b0
ADD	+	157	18
ID	b	157	19	0x555fc4224388
SEMICOLON	;	157	20
IF	if	158	0
LPAREN	(	158	2
ID	get2	158	3	0x555fc42242e8
LBRACKET	[	158	7
ID	i	158	8	0x555fc4224248
RBRACKET	]	158	9
EQUAL	==	158	10
DECIMAL	45	158	12	45
RPAREN	)	158	14
ID	c	158	15	0x555fc4224298
ASSIGN	=	158	16
ID	b	158	17	0x555fc4224388
SUB	-	158	18
ID	a	158	19	0x555fc42243b0
SEMICOLON	;	158	20
IF	if	159	0
LPAREN	(	159	2
ID	get2	159	3	0x555fc42242e8
LBRACKET	[	159	7
ID	i	159	8	0x555fc4224248
RBRACKET	]	159	9
EQUAL	==	159	10
DECIMAL	42	159	12	42
RPAREN	)	159	14
ID	c	159	15	0x555fc4224298
ASSIGN	=	159	16
ID	a	159	17	0x555fc42243b0
MUL	*	159	18
ID	b	159	19	0x555fc4224388
SEMICOLON	;	159	20
IF	if	160	0
LPAREN	(	160	2
ID	get2	160	3	0x555fc42242e8
LBRACKET	[	160	7
ID	i	160	8	0x555fc4224248
RBRACKET	]	160	9
EQUAL	==	160	10
DECIMAL	47	160	12	47
RPAREN	)	160	14
ID	c	160	15	0x555fc4224298
ASSIGN	=	160	16
ID	b	160	17	0x555fc4224388
DIV	/	160	18
ID	a	160	19	0x555fc42243b0
SEMICOLON	;	160	20
IF	if	161	0
LPAREN	(	161	2
ID	get2	161	3	0x555fc42242e8
LBRACKET	[	161	7
ID	i	161	8	0x555fc4224248
RBRACKET	]	161	9
EQUAL	==	161	10
DECIMAL	37	161	12	37
RPAREN	)	161	14
ID	c	161	15	0x555fc4224298
ASSIGN	=	161	16
ID	b	161	17	0x555fc4224388
MOD	%	161	18
ID	a	161	19	0x555fc42243b0
SEMICOLON	;	161	20
IF	if	162	0
LPAREN	(	162	2
ID	get2	162	3	0x555fc42242e8
LBRACKET	[	162	7
ID	i	162	8	0x555fc4224248
RBRACKET	]	162	9
EQUAL	==	162	10
DECIMAL	94	162	12	94
RPAREN	)	162	14
ID	c	162	15	0x555fc4224298
ASSIGN	=	162	16
ID	power	162	17	0x555fc4224360
LPAREN	(	162	22
ID	b	162	23	0x555fc4224388
COMMA	,	162	24
ID	a	162	25	0x555fc42243b0
RPAREN	)	162	26
SEMICOLON	;	162	27
ID	intpush	163	0	0x555fc4224478
LPAREN	(	163	7
ID	c	163	8	0x555fc4224298
RPAREN	)	163	9
SEMICOLON	;	163	10
RBRACE	}	164	0
ELSE	else	165	0
LBRACE	{	166	0
IF	if	167	0
LPAREN	(	167	2
ID	get2	167	3	0x555fc42242e8
LBRACKET	[	167	7
ID	i	167	8	0x555fc4224248
RBRACKET	]	167	9
NEQUAL	!=	167	10
DECIMAL	32	167	12	32
RPAREN	)	167	14
LBRACE	{	168	0
ID	intpush	169	0	0x555fc4224478
LPAREN	(	169	7
ID	get2	169	8	0x555fc42242e8
LBRACKET	[	169	12
ID	i	169	13	0x555fc4224248
RBRACKET	]	169	14
SUB	-	169	15
DECIMAL	48	169	16	48
RPAREN	)	169	18
SEMICOLON	;	169	19
ID	ii	170	0	0x555fc4224270
ASSIGN	=	170	2
DECIMAL	1	170	3	1
SEMICOLON	;	170	4
WHILE	while	171	0
LPAREN	(	171	5
ID	get2	171	6	0x555fc42242e8
LBRACKET	[	171	10
ID	i	171	11	0x555fc4224248
ADD	+	171	12
ID	ii	171	13	0x555fc4224270
RBRACKET	]	171	15
NEQUAL	!=	171	16
DECIMAL	32	171	18	32
RPAREN	)	171	20
LBRACE	{	172	0
ID	intadd	173	0	0x555fc4224518
LPAREN	(	173	6
ID	get2	173	7	0x555fc42242e8
LBRACKET	[	173	11
ID	i	173	12	0x555fc4224248
ADD	+	173	13
ID	ii	173	14	0x555fc4224270
RBRACKET	]	173	16
SUB	-	173	17
DECIMAL	48	173	18	48
RPAREN	)	173	20
SEMICOLON	;	173	21
ID	ii	174	0	0x555fc4224270
ASSIGN	=	174	2
ID	ii	174	3	0x555fc4224270
ADD	+	174	5
DECIMAL	1	174	6	1
SEMICOLON	;	174	7
RBRACE	}	175	0
ID	i	176	0	0x555fc4224248
ASSIGN	=	176	1
ID	i	176	2	0x555fc4224248
ADD	+	176	3
ID	ii	176	4	0x555fc4224270
SUB	-	176	6
DECIMAL	1	176	7	1
SEMICOLON	;	176	8
RBRACE	}	177	0
RBRACE	}	178	0
ID	i	179	0	0x555fc4224248
ASSIGN	=	179	1
ID	i	179	2	0x555fc4224248
ADD	+	179	3
DECIMAL	1	179	4	1
SEMICOLON	;	179	5
RBRACE	}	180	0
ID	putint	181	0	0x555fc42245b8
LPAREN	(	181	6
ID	ints	181	7	0x555fc42241a8
LBRACKET	[	181	11
DECIMAL	1	181	12	1
RBRACKET	]	181	13
RPAREN	)	181	14
SEMICOLON	;	181	15
RETURN	return	182	0
DECIMAL	0	182	6	0
SEMICOLON	;	182	7
RBRACE	}	183	0
