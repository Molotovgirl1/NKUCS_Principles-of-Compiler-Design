INT	int	0	0
ID	buf	0	3	0x561337b9f1a8
LBRACKET	[	0	6
DECIMAL	2	0	7	2
RBRACKET	]	0	8
LBRACKET	[	0	9
DECIMAL	100	0	10	100
RBRACKET	]	0	13
SEMICOLON	;	0	14
VOID	void	3	0
ID	merge_sort	3	4	0x561337b9f1d0
LPAREN	(	3	14
INT	int	3	15
ID	l	3	18	0x561337b9f1f8
COMMA	,	3	19
INT	int	3	20
ID	r	3	23	0x561337b9f220
RPAREN	)	3	24
LBRACE	{	4	0
IF	if	5	0
LPAREN	(	5	2
ID	l	5	3	0x561337b9f1f8
ADD	+	5	4
DECIMAL	1	5	5	1
GEQUAL	>=	5	6
ID	r	5	8	0x561337b9f220
RPAREN	)	5	9
RETURN	return	6	0
SEMICOLON	;	6	6
INT	int	8	0
ID	mid	8	3	0x561337b9f248
ASSIGN	=	8	6
LPAREN	(	8	7
ID	l	8	8	0x561337b9f1f8
ADD	+	8	9
ID	r	8	10	0x561337b9f220
RPAREN	)	8	11
DIV	/	8	12
DECIMAL	2	8	13	2
SEMICOLON	;	8	14
ID	merge_sort	9	0	0x561337b9f1d0
LPAREN	(	9	10
ID	l	9	11	0x561337b9f1f8
COMMA	,	9	12
ID	mid	9	13	0x561337b9f248
RPAREN	)	9	16
SEMICOLON	;	9	17
ID	merge_sort	10	0	0x561337b9f1d0
LPAREN	(	10	10
ID	mid	10	11	0x561337b9f248
COMMA	,	10	14
ID	r	10	15	0x561337b9f220
RPAREN	)	10	16
SEMICOLON	;	10	17
INT	int	12	0
ID	i	12	3	0x561337b9f270
ASSIGN	=	12	4
ID	l	12	5	0x561337b9f1f8
COMMA	,	12	6
ID	j	12	7	0x561337b9f298
ASSIGN	=	12	8
ID	mid	12	9	0x561337b9f248
COMMA	,	12	12
ID	k	12	13	0x561337b9f2c0
ASSIGN	=	12	14
ID	l	12	15	0x561337b9f1f8
SEMICOLON	;	12	16
WHILE	while	13	0
LPAREN	(	13	5
ID	i	13	6	0x561337b9f270
LESS	<	13	7
ID	mid	13	8	0x561337b9f248
AND	&&	13	11
ID	j	13	13	0x561337b9f298
LESS	<	13	14
ID	r	13	15	0x561337b9f220
RPAREN	)	13	16
LBRACE	{	13	17
IF	if	14	0
LPAREN	(	14	2
ID	buf	14	3	0x561337b9f1a8
LBRACKET	[	14	6
DECIMAL	0	14	7	0
RBRACKET	]	14	8
LBRACKET	[	14	9
ID	i	14	10	0x561337b9f270
RBRACKET	]	14	11
LESS	<	14	12
ID	buf	14	13	0x561337b9f1a8
LBRACKET	[	14	16
DECIMAL	0	14	17	0
RBRACKET	]	14	18
LBRACKET	[	14	19
ID	j	14	20	0x561337b9f298
RBRACKET	]	14	21
RPAREN	)	14	22
LBRACE	{	14	23
ID	buf	15	0	0x561337b9f1a8
LBRACKET	[	15	3
DECIMAL	1	15	4	1
RBRACKET	]	15	5
LBRACKET	[	15	6
ID	k	15	7	0x561337b9f2c0
RBRACKET	]	15	8
ASSIGN	=	15	9
ID	buf	15	10	0x561337b9f1a8
LBRACKET	[	15	13
DECIMAL	0	15	14	0
RBRACKET	]	15	15
LBRACKET	[	15	16
ID	i	15	17	0x561337b9f270
RBRACKET	]	15	18
SEMICOLON	;	15	19
ID	i	16	0	0x561337b9f270
ASSIGN	=	16	1
ID	i	16	2	0x561337b9f270
ADD	+	16	3
DECIMAL	1	16	4	1
SEMICOLON	;	16	5
RBRACE	}	17	0
ELSE	else	17	1
LBRACE	{	17	5
ID	buf	18	0	0x561337b9f1a8
LBRACKET	[	18	3
DECIMAL	1	18	4	1
RBRACKET	]	18	5
LBRACKET	[	18	6
ID	k	18	7	0x561337b9f2c0
RBRACKET	]	18	8
ASSIGN	=	18	9
ID	buf	18	10	0x561337b9f1a8
LBRACKET	[	18	13
DECIMAL	0	18	14	0
RBRACKET	]	18	15
LBRACKET	[	18	16
ID	j	18	17	0x561337b9f298
RBRACKET	]	18	18
SEMICOLON	;	18	19
ID	j	19	0	0x561337b9f298
ASSIGN	=	19	1
ID	j	19	2	0x561337b9f298
ADD	+	19	3
DECIMAL	1	19	4	1
SEMICOLON	;	19	5
RBRACE	}	20	0
ID	k	21	0	0x561337b9f2c0
ASSIGN	=	21	1
ID	k	21	2	0x561337b9f2c0
ADD	+	21	3
DECIMAL	1	21	4	1
SEMICOLON	;	21	5
RBRACE	}	22	0
WHILE	while	23	0
LPAREN	(	23	5
ID	i	23	6	0x561337b9f270
LESS	<	23	7
ID	mid	23	8	0x561337b9f248
RPAREN	)	23	11
LBRACE	{	23	12
ID	buf	24	0	0x561337b9f1a8
LBRACKET	[	24	3
DECIMAL	1	24	4	1
RBRACKET	]	24	5
LBRACKET	[	24	6
ID	k	24	7	0x561337b9f2c0
RBRACKET	]	24	8
ASSIGN	=	24	9
ID	buf	24	10	0x561337b9f1a8
LBRACKET	[	24	13
DECIMAL	0	24	14	0
RBRACKET	]	24	15
LBRACKET	[	24	16
ID	i	24	17	0x561337b9f270
RBRACKET	]	24	18
SEMICOLON	;	24	19
ID	i	25	0	0x561337b9f270
ASSIGN	=	25	1
ID	i	25	2	0x561337b9f270
ADD	+	25	3
DECIMAL	1	25	4	1
SEMICOLON	;	25	5
ID	k	26	0	0x561337b9f2c0
ASSIGN	=	26	1
ID	k	26	2	0x561337b9f2c0
ADD	+	26	3
DECIMAL	1	26	4	1
SEMICOLON	;	26	5
RBRACE	}	27	0
WHILE	while	28	0
LPAREN	(	28	5
ID	j	28	6	0x561337b9f298
LESS	<	28	7
ID	r	28	8	0x561337b9f220
RPAREN	)	28	9
LBRACE	{	28	10
ID	buf	29	0	0x561337b9f1a8
LBRACKET	[	29	3
DECIMAL	1	29	4	1
RBRACKET	]	29	5
LBRACKET	[	29	6
ID	k	29	7	0x561337b9f2c0
RBRACKET	]	29	8
ASSIGN	=	29	9
ID	buf	29	10	0x561337b9f1a8
LBRACKET	[	29	13
DECIMAL	0	29	14	0
RBRACKET	]	29	15
LBRACKET	[	29	16
ID	j	29	17	0x561337b9f298
RBRACKET	]	29	18
SEMICOLON	;	29	19
ID	j	30	0	0x561337b9f298
ASSIGN	=	30	1
ID	j	30	2	0x561337b9f298
ADD	+	30	3
DECIMAL	1	30	4	1
SEMICOLON	;	30	5
ID	k	31	0	0x561337b9f2c0
ASSIGN	=	31	1
ID	k	31	2	0x561337b9f2c0
ADD	+	31	3
DECIMAL	1	31	4	1
SEMICOLON	;	31	5
RBRACE	}	32	0
WHILE	while	34	0
LPAREN	(	34	5
ID	l	34	6	0x561337b9f1f8
LESS	<	34	7
ID	r	34	8	0x561337b9f220
RPAREN	)	34	9
LBRACE	{	34	10
ID	buf	35	0	0x561337b9f1a8
LBRACKET	[	35	3
DECIMAL	0	35	4	0
RBRACKET	]	35	5
LBRACKET	[	35	6
ID	l	35	7	0x561337b9f1f8
RBRACKET	]	35	8
ASSIGN	=	35	9
ID	buf	35	10	0x561337b9f1a8
LBRACKET	[	35	13
DECIMAL	1	35	14	1
RBRACKET	]	35	15
LBRACKET	[	35	16
ID	l	35	17	0x561337b9f1f8
RBRACKET	]	35	18
SEMICOLON	;	35	19
ID	l	36	0	0x561337b9f1f8
ASSIGN	=	36	1
ID	l	36	2	0x561337b9f1f8
ADD	+	36	3
DECIMAL	1	36	4	1
SEMICOLON	;	36	5
RBRACE	}	37	0
RBRACE	}	38	0
INT	int	40	0
ID	main	40	3	0x561337b9f2e8
LPAREN	(	40	7
RPAREN	)	40	8
LBRACE	{	41	0
INT	int	42	0
ID	n	42	3	0x561337b9f310
ASSIGN	=	42	4
ID	getarray	42	5	0x561337b9f338
LPAREN	(	42	13
ID	buf	42	14	0x561337b9f1a8
LBRACKET	[	42	17
DECIMAL	0	42	18	0
RBRACKET	]	42	19
RPAREN	)	42	20
SEMICOLON	;	42	21
ID	merge_sort	43	0	0x561337b9f1d0
LPAREN	(	43	10
DECIMAL	0	43	11	0
COMMA	,	43	12
ID	n	43	13	0x561337b9f310
RPAREN	)	43	14
SEMICOLON	;	43	15
ID	putarray	44	0	0x561337b9f360
LPAREN	(	44	8
ID	n	44	9	0x561337b9f310
COMMA	,	44	10
ID	buf	44	11	0x561337b9f1a8
LBRACKET	[	44	14
DECIMAL	0	44	15	0
RBRACKET	]	44	16
RPAREN	)	44	17
SEMICOLON	;	44	18
RETURN	return	45	0
DECIMAL	0	45	6	0
SEMICOLON	;	45	7
RBRACE	}	46	0
