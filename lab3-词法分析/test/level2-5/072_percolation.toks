INT	int	0	0
ID	array	0	3	0x55a41e8311a8
LBRACKET	[	0	8
DECIMAL	110	0	9	110
RBRACKET	]	0	12
SEMICOLON	;	0	13
INT	int	1	0
ID	n	1	3	0x55a41e8311d0
SEMICOLON	;	1	4
VOID	void	2	0
ID	init	2	4	0x55a41e8311f8
LPAREN	(	2	8
INT	int	2	9
ID	n	2	12	0x55a41e8311d0
RPAREN	)	2	13
LBRACE	{	2	14
INT	int	3	0
ID	i	3	3	0x55a41e831220
ASSIGN	=	3	4
DECIMAL	1	3	5	1
SEMICOLON	;	3	6
WHILE	while	4	0
LPAREN	(	4	5
ID	i	4	6	0x55a41e831220
LEQUAL	<=	4	7
ID	n	4	9	0x55a41e8311d0
MUL	*	4	10
ID	n	4	11	0x55a41e8311d0
ADD	+	4	12
DECIMAL	1	4	13	1
RPAREN	)	4	14
LBRACE	{	4	15
ID	array	5	0	0x55a41e8311a8
LBRACKET	[	5	5
ID	i	5	6	0x55a41e831220
RBRACKET	]	5	7
ASSIGN	=	5	8
SUB	-	5	9
DECIMAL	1	5	10	1
SEMICOLON	;	5	11
ID	i	6	0	0x55a41e831220
ASSIGN	=	6	1
ID	i	6	2	0x55a41e831220
ADD	+	6	3
DECIMAL	1	6	4	1
SEMICOLON	;	6	5
RBRACE	}	7	0
RBRACE	}	8	0
INT	int	10	0
ID	findfa	10	3	0x55a41e831248
LPAREN	(	10	9
INT	int	10	10
ID	a	10	13	0x55a41e831270
RPAREN	)	10	14
LBRACE	{	10	15
IF	if	11	0
LPAREN	(	11	2
ID	array	11	3	0x55a41e8311a8
LBRACKET	[	11	8
ID	a	11	9	0x55a41e831270
RBRACKET	]	11	10
EQUAL	==	11	11
ID	a	11	13	0x55a41e831270
RPAREN	)	11	14
RETURN	return	12	0
ID	a	12	6	0x55a41e831270
SEMICOLON	;	12	7
ELSE	else	13	0
LBRACE	{	13	4
ID	array	14	0	0x55a41e8311a8
LBRACKET	[	14	5
ID	a	14	6	0x55a41e831270
RBRACKET	]	14	7
ASSIGN	=	14	8
ID	findfa	14	9	0x55a41e831248
LPAREN	(	14	15
ID	array	14	16	0x55a41e8311a8
LBRACKET	[	14	21
ID	a	14	22	0x55a41e831270
RBRACKET	]	14	23
RPAREN	)	14	24
SEMICOLON	;	14	25
RETURN	return	15	0
ID	array	15	6	0x55a41e8311a8
LBRACKET	[	15	11
ID	a	15	12	0x55a41e831270
RBRACKET	]	15	13
SEMICOLON	;	15	14
RBRACE	}	16	0
RBRACE	}	17	0
VOID	void	18	0
ID	mmerge	18	4	0x55a41e831298
LPAREN	(	18	10
INT	int	18	11
ID	a	18	14	0x55a41e831270
COMMA	,	18	15
INT	int	18	16
ID	b	18	19	0x55a41e8312c0
RPAREN	)	18	20
LBRACE	{	18	21
INT	int	19	0
ID	m	19	3	0x55a41e8312e8
ASSIGN	=	19	4
ID	findfa	19	5	0x55a41e831248
LPAREN	(	19	11
ID	a	19	12	0x55a41e831270
RPAREN	)	19	13
SEMICOLON	;	19	14
INT	int	20	0
ID	n	20	3	0x55a41e8311d0
ASSIGN	=	20	4
ID	findfa	20	5	0x55a41e831248
LPAREN	(	20	11
ID	b	20	12	0x55a41e8312c0
RPAREN	)	20	13
SEMICOLON	;	20	14
IF	if	21	0
LPAREN	(	21	2
ID	m	21	3	0x55a41e8312e8
NEQUAL	!=	21	4
ID	n	21	6	0x55a41e8311d0
RPAREN	)	21	7
ID	array	21	8	0x55a41e8311a8
LBRACKET	[	21	13
ID	m	21	14	0x55a41e8312e8
RBRACKET	]	21	15
ASSIGN	=	21	16
ID	n	21	17	0x55a41e8311d0
SEMICOLON	;	21	18
RBRACE	}	22	0
INT	int	23	0
ID	main	23	3	0x55a41e831310
LPAREN	(	23	7
RPAREN	)	23	8
LBRACE	{	23	9
INT	int	24	0
ID	t	24	3	0x55a41e831338
COMMA	,	24	4
ID	m	24	5	0x55a41e8312e8
SEMICOLON	;	24	6
INT	int	25	0
ID	a	25	3	0x55a41e831270
COMMA	,	25	4
ID	b	25	5	0x55a41e8312c0
SEMICOLON	;	25	6
ID	t	26	0	0x55a41e831338
ASSIGN	=	26	1
DECIMAL	1	26	2	1
SEMICOLON	;	26	3
WHILE	while	27	0
LPAREN	(	27	5
ID	t	27	6	0x55a41e831338
RPAREN	)	27	7
LBRACE	{	27	8
ID	t	28	0	0x55a41e831338
ASSIGN	=	28	1
ID	t	28	2	0x55a41e831338
SUB	-	28	3
DECIMAL	1	28	4	1
SEMICOLON	;	28	5
ID	n	29	0	0x55a41e8311d0
ASSIGN	=	29	1
DECIMAL	4	29	2	4
SEMICOLON	;	29	3
ID	m	30	0	0x55a41e8312e8
ASSIGN	=	30	1
DECIMAL	10	30	2	10
SEMICOLON	;	30	4
INT	int	31	0
ID	i	31	3	0x55a41e831220
ASSIGN	=	31	4
DECIMAL	0	31	5	0
SEMICOLON	;	31	6
INT	int	32	0
ID	flag	32	3	0x55a41e831360
ASSIGN	=	32	7
DECIMAL	0	32	8	0
SEMICOLON	;	32	9
ID	init	33	0	0x55a41e8311f8
LPAREN	(	33	4
ID	n	33	5	0x55a41e8311d0
RPAREN	)	33	6
SEMICOLON	;	33	7
INT	int	34	0
ID	k	34	3	0x55a41e831388
ASSIGN	=	34	4
ID	n	34	5	0x55a41e8311d0
MUL	*	34	6
ID	n	34	7	0x55a41e8311d0
ADD	+	34	8
DECIMAL	1	34	9	1
SEMICOLON	;	34	10
WHILE	while	36	0
LPAREN	(	36	5
ID	i	36	6	0x55a41e831220
LESS	<	36	7
ID	m	36	8	0x55a41e8312e8
RPAREN	)	36	9
LBRACE	{	36	10
ID	a	37	0	0x55a41e831270
ASSIGN	=	37	1
ID	getint	37	2	0x55a41e8313b0
LPAREN	(	37	8
RPAREN	)	37	9
SEMICOLON	;	37	10
ID	b	38	0	0x55a41e8312c0
ASSIGN	=	38	1
ID	getint	38	2	0x55a41e8313b0
LPAREN	(	38	8
RPAREN	)	38	9
SEMICOLON	;	38	10
IF	if	40	0
LPAREN	(	40	2
NOT	!	40	3
ID	flag	40	4	0x55a41e831360
RPAREN	)	40	8
LBRACE	{	40	9
INT	int	41	0
ID	loc	41	3	0x55a41e8313d8
ASSIGN	=	41	6
ID	n	41	7	0x55a41e8311d0
MUL	*	41	8
LPAREN	(	41	9
ID	a	41	10	0x55a41e831270
SUB	-	41	11
DECIMAL	1	41	12	1
RPAREN	)	41	13
ADD	+	41	14
ID	b	41	15	0x55a41e8312c0
SEMICOLON	;	41	16
ID	array	43	0	0x55a41e8311a8
LBRACKET	[	43	5
ID	loc	43	6	0x55a41e8313d8
RBRACKET	]	43	9
ASSIGN	=	43	10
ID	loc	43	11	0x55a41e8313d8
SEMICOLON	;	43	14
IF	if	44	0
LPAREN	(	44	2
ID	a	44	3	0x55a41e831270
EQUAL	==	44	4
DECIMAL	1	44	6	1
RPAREN	)	44	7
LBRACE	{	44	8
ID	array	45	0	0x55a41e8311a8
LBRACKET	[	45	5
DECIMAL	0	45	6	0
RBRACKET	]	45	7
ASSIGN	=	45	8
DECIMAL	0	45	9	0
SEMICOLON	;	45	10
ID	mmerge	46	0	0x55a41e831298
LPAREN	(	46	6
ID	loc	46	7	0x55a41e8313d8
COMMA	,	46	10
DECIMAL	0	46	11	0
RPAREN	)	46	12
SEMICOLON	;	46	13
RBRACE	}	47	0
IF	if	48	0
LPAREN	(	48	2
ID	a	48	3	0x55a41e831270
EQUAL	==	48	4
ID	n	48	6	0x55a41e8311d0
RPAREN	)	48	7
LBRACE	{	48	8
ID	array	49	0	0x55a41e8311a8
LBRACKET	[	49	5
ID	k	49	6	0x55a41e831388
RBRACKET	]	49	7
ASSIGN	=	49	8
ID	k	49	9	0x55a41e831388
SEMICOLON	;	49	10
ID	mmerge	50	0	0x55a41e831298
LPAREN	(	50	6
ID	loc	50	7	0x55a41e8313d8
COMMA	,	50	10
ID	k	50	11	0x55a41e831388
RPAREN	)	50	12
SEMICOLON	;	50	13
RBRACE	}	51	0
IF	if	52	0
LPAREN	(	52	2
ID	b	52	3	0x55a41e8312c0
LESS	<	52	4
ID	n	52	5	0x55a41e8311d0
AND	&&	52	6
ID	array	52	8	0x55a41e8311a8
LBRACKET	[	52	13
ID	loc	52	14	0x55a41e8313d8
ADD	+	52	17
DECIMAL	1	52	18	1
RBRACKET	]	52	19
NEQUAL	!=	52	20
SUB	-	52	22
DECIMAL	1	52	23	1
RPAREN	)	52	24
LBRACE	{	52	25
ID	mmerge	53	0	0x55a41e831298
LPAREN	(	53	6
ID	loc	53	7	0x55a41e8313d8
COMMA	,	53	10
ID	loc	53	11	0x55a41e8313d8
ADD	+	53	14
DECIMAL	1	53	15	1
RPAREN	)	53	16
SEMICOLON	;	53	17
RBRACE	}	54	0
IF	if	55	0
LPAREN	(	55	2
ID	b	55	3	0x55a41e8312c0
GREATER	>	55	4
DECIMAL	1	55	5	1
AND	&&	55	6
ID	array	55	8	0x55a41e8311a8
LBRACKET	[	55	13
ID	loc	55	14	0x55a41e8313d8
SUB	-	55	17
DECIMAL	1	55	18	1
RBRACKET	]	55	19
NEQUAL	!=	55	20
SUB	-	55	22
DECIMAL	1	55	23	1
RPAREN	)	55	24
LBRACE	{	55	25
ID	mmerge	56	0	0x55a41e831298
LPAREN	(	56	6
ID	loc	56	7	0x55a41e8313d8
COMMA	,	56	10
ID	loc	56	11	0x55a41e8313d8
SUB	-	56	14
DECIMAL	1	56	15	1
RPAREN	)	56	16
SEMICOLON	;	56	17
RBRACE	}	57	0
IF	if	58	0
LPAREN	(	58	2
ID	a	58	3	0x55a41e831270
LESS	<	58	4
ID	n	58	5	0x55a41e8311d0
AND	&&	58	6
ID	array	58	8	0x55a41e8311a8
LBRACKET	[	58	13
ID	loc	58	14	0x55a41e8313d8
ADD	+	58	17
ID	n	58	18	0x55a41e8311d0
RBRACKET	]	58	19
NEQUAL	!=	58	20
SUB	-	58	22
DECIMAL	1	58	23	1
RPAREN	)	58	24
LBRACE	{	58	25
ID	mmerge	59	0	0x55a41e831298
LPAREN	(	59	6
ID	loc	59	7	0x55a41e8313d8
COMMA	,	59	10
ID	loc	59	11	0x55a41e8313d8
ADD	+	59	14
ID	n	59	15	0x55a41e8311d0
RPAREN	)	59	16
SEMICOLON	;	59	17
RBRACE	}	60	0
IF	if	61	0
LPAREN	(	61	2
ID	a	61	3	0x55a41e831270
GREATER	>	61	4
DECIMAL	1	61	5	1
AND	&&	61	6
ID	array	61	8	0x55a41e8311a8
LBRACKET	[	61	13
ID	loc	61	14	0x55a41e8313d8
SUB	-	61	17
ID	n	61	18	0x55a41e8311d0
RBRACKET	]	61	19
NEQUAL	!=	61	20
SUB	-	61	22
DECIMAL	1	61	23	1
RPAREN	)	61	24
LBRACE	{	61	25
ID	mmerge	62	0	0x55a41e831298
LPAREN	(	62	6
ID	loc	62	7	0x55a41e8313d8
COMMA	,	62	10
ID	loc	62	11	0x55a41e8313d8
SUB	-	62	14
ID	n	62	15	0x55a41e8311d0
RPAREN	)	62	16
SEMICOLON	;	62	17
RBRACE	}	63	0
IF	if	65	0
LPAREN	(	65	2
ID	array	65	3	0x55a41e8311a8
LBRACKET	[	65	8
DECIMAL	0	65	9	0
RBRACKET	]	65	10
NEQUAL	!=	65	11
SUB	-	65	13
DECIMAL	1	65	14	1
AND	&&	65	15
ID	array	65	17	0x55a41e8311a8
LBRACKET	[	65	22
ID	k	65	23	0x55a41e831388
RBRACKET	]	65	24
NEQUAL	!=	65	25
SUB	-	65	27
DECIMAL	1	65	28	1
AND	&&	65	29
ID	findfa	65	31	0x55a41e831248
LPAREN	(	65	37
DECIMAL	0	65	38	0
RPAREN	)	65	39
EQUAL	==	65	40
ID	findfa	65	42	0x55a41e831248
LPAREN	(	65	48
ID	k	65	49	0x55a41e831388
RPAREN	)	65	50
RPAREN	)	65	51
LBRACE	{	65	52
ID	flag	66	0	0x55a41e831360
ASSIGN	=	66	4
DECIMAL	1	66	5	1
SEMICOLON	;	66	6
INT	int	67	0
ID	tmp	67	3	0x55a41e831400
ASSIGN	=	67	6
ID	i	67	7	0x55a41e831220
ADD	+	67	8
DECIMAL	1	67	9	1
SEMICOLON	;	67	10
ID	putint	68	0	0x55a41e831428
LPAREN	(	68	6
ID	tmp	68	7	0x55a41e831400
RPAREN	)	68	10
SEMICOLON	;	68	11
ID	putch	69	0	0x55a41e831450
LPAREN	(	69	5
DECIMAL	10	69	6	10
RPAREN	)	69	8
SEMICOLON	;	69	9
RBRACE	}	70	0
RBRACE	}	71	0
ID	i	73	0	0x55a41e831220
ASSIGN	=	73	1
ID	i	73	2	0x55a41e831220
ADD	+	73	3
DECIMAL	1	73	4	1
SEMICOLON	;	73	5
RBRACE	}	74	0
IF	if	75	0
LPAREN	(	75	2
NOT	!	75	3
ID	flag	75	4	0x55a41e831360
RPAREN	)	75	8
LBRACE	{	75	9
ID	putint	76	0	0x55a41e831428
LPAREN	(	76	6
SUB	-	76	7
DECIMAL	1	76	8	1
RPAREN	)	76	9
SEMICOLON	;	76	10
ID	putch	77	0	0x55a41e831450
LPAREN	(	77	5
DECIMAL	10	77	6	10
RPAREN	)	77	8
SEMICOLON	;	77	9
RBRACE	}	78	0
RBRACE	}	79	0
RETURN	return	80	0
DECIMAL	0	80	6	0
SEMICOLON	;	80	7
RBRACE	}	81	0
