CONST	const	0	0
INT	int	0	5
ID	SHIFT_TABLE	0	8	0x5565260241a8
LBRACKET	[	0	19
DECIMAL	16	0	20	16
RBRACKET	]	0	22
ASSIGN	=	0	23
LBRACE	{	0	24
DECIMAL	1	0	25	1
COMMA	,	0	26
DECIMAL	2	0	27	2
COMMA	,	0	28
DECIMAL	4	0	29	4
COMMA	,	0	30
DECIMAL	8	0	31	8
COMMA	,	0	32
DECIMAL	16	0	33	16
COMMA	,	0	35
DECIMAL	32	0	36	32
COMMA	,	0	38
DECIMAL	64	0	39	64
COMMA	,	0	41
DECIMAL	128	0	42	128
COMMA	,	0	45
DECIMAL	256	1	0	256
COMMA	,	1	3
DECIMAL	512	1	4	512
COMMA	,	1	7
DECIMAL	1024	1	8	1024
COMMA	,	1	12
DECIMAL	2048	1	13	2048
COMMA	,	1	17
DECIMAL	4096	1	18	4096
COMMA	,	1	22
DECIMAL	8192	1	23	8192
COMMA	,	1	27
DECIMAL	16384	1	28	16384
COMMA	,	1	33
DECIMAL	32768	1	34	32768
RBRACE	}	1	39
SEMICOLON	;	1	40
INT	int	3	0
ID	long_func	3	3	0x5565260241d0
LPAREN	(	3	12
RPAREN	)	3	13
LBRACE	{	3	14
INT	int	4	0
ID	ans	4	3	0x5565260241f8
COMMA	,	4	6
ID	i	4	7	0x556526024220
COMMA	,	4	8
ID	x	4	9	0x556526024248
COMMA	,	4	10
ID	y	4	11	0x556526024270
COMMA	,	4	12
ID	cur	4	13	0x556526024298
SEMICOLON	;	4	16
LBRACE	{	5	0
INT	int	6	0
ID	pl	6	3	0x5565260242c0
ASSIGN	=	6	5
DECIMAL	2	6	6	2
COMMA	,	6	7
ID	pr	6	8	0x5565260242e8
ASSIGN	=	6	10
DECIMAL	0	6	11	0
COMMA	,	6	12
ID	pres	6	13	0x556526024310
ASSIGN	=	6	17
DECIMAL	1	6	18	1
SEMICOLON	;	6	19
WHILE	while	7	0
LPAREN	(	7	5
ID	pr	7	6	0x5565260242e8
GREATER	>	7	8
DECIMAL	0	7	9	0
RPAREN	)	7	10
LBRACE	{	7	11
ID	ans	8	0	0x5565260241f8
ASSIGN	=	8	3
DECIMAL	0	8	4	0
SEMICOLON	;	8	5
ID	i	9	0	0x556526024220
ASSIGN	=	9	1
DECIMAL	0	9	2	0
SEMICOLON	;	9	3
ID	x	10	0	0x556526024248
ASSIGN	=	10	1
ID	pr	10	2	0x5565260242e8
SEMICOLON	;	10	4
ID	y	11	0	0x556526024270
ASSIGN	=	11	1
DECIMAL	1	11	2	1
SEMICOLON	;	11	3
WHILE	while	12	0
LPAREN	(	12	5
ID	i	12	6	0x556526024220
LESS	<	12	7
DECIMAL	16	12	8	16
RPAREN	)	12	10
LBRACE	{	12	11
IF	if	13	0
LPAREN	(	13	2
ID	x	13	3	0x556526024248
MOD	%	13	4
DECIMAL	2	13	5	2
AND	&&	13	6
ID	y	13	8	0x556526024270
MOD	%	13	9
DECIMAL	2	13	10	2
RPAREN	)	13	11
LBRACE	{	13	12
ID	ans	14	0	0x5565260241f8
ASSIGN	=	14	3
ID	ans	14	4	0x5565260241f8
ADD	+	14	7
DECIMAL	1	14	8	1
MUL	*	14	9
ID	SHIFT_TABLE	14	10	0x5565260241a8
LBRACKET	[	14	21
ID	i	14	22	0x556526024220
RBRACKET	]	14	23
SEMICOLON	;	14	24
RBRACE	}	15	0
ID	x	16	0	0x556526024248
ASSIGN	=	16	1
ID	x	16	2	0x556526024248
DIV	/	16	3
DECIMAL	2	16	4	2
SEMICOLON	;	16	5
ID	y	17	0	0x556526024270
ASSIGN	=	17	1
ID	y	17	2	0x556526024270
DIV	/	17	3
DECIMAL	2	17	4	2
SEMICOLON	;	17	5
ID	i	18	0	0x556526024220
ASSIGN	=	18	1
ID	i	18	2	0x556526024220
ADD	+	18	3
DECIMAL	1	18	4	1
SEMICOLON	;	18	5
RBRACE	}	19	0
IF	if	20	0
LPAREN	(	20	2
ID	ans	20	3	0x5565260241f8
RPAREN	)	20	6
LBRACE	{	20	7
LBRACE	{	21	0
INT	int	22	0
ID	ml	22	3	0x556526024338
ASSIGN	=	22	5
ID	pres	22	6	0x556526024310
COMMA	,	22	10
ID	mr	22	11	0x556526024360
ASSIGN	=	22	13
ID	pl	22	14	0x5565260242c0
COMMA	,	22	16
ID	mres	22	17	0x556526024388
ASSIGN	=	22	21
DECIMAL	0	22	22	0
SEMICOLON	;	22	23
WHILE	while	23	0
LPAREN	(	23	5
ID	mr	23	6	0x556526024360
RPAREN	)	23	8
LBRACE	{	23	9
ID	ans	24	0	0x5565260241f8
ASSIGN	=	24	3
DECIMAL	0	24	4	0
SEMICOLON	;	24	5
ID	i	25	0	0x556526024220
ASSIGN	=	25	1
DECIMAL	0	25	2	0
SEMICOLON	;	25	3
ID	x	26	0	0x556526024248
ASSIGN	=	26	1
ID	mr	26	2	0x556526024360
SEMICOLON	;	26	4
ID	y	27	0	0x556526024270
ASSIGN	=	27	1
DECIMAL	1	27	2	1
SEMICOLON	;	27	3
WHILE	while	28	0
LPAREN	(	28	5
ID	i	28	6	0x556526024220
LESS	<	28	7
DECIMAL	16	28	8	16
RPAREN	)	28	10
LBRACE	{	28	11
IF	if	29	0
LPAREN	(	29	2
ID	x	29	3	0x556526024248
MOD	%	29	4
DECIMAL	2	29	5	2
AND	&&	29	6
ID	y	29	8	0x556526024270
MOD	%	29	9
DECIMAL	2	29	10	2
RPAREN	)	29	11
LBRACE	{	29	12
ID	ans	30	0	0x5565260241f8
ASSIGN	=	30	3
ID	ans	30	4	0x5565260241f8
ADD	+	30	7
DECIMAL	1	30	8	1
MUL	*	30	9
ID	SHIFT_TABLE	30	10	0x5565260241a8
LBRACKET	[	30	21
ID	i	30	22	0x556526024220
RBRACKET	]	30	23
SEMICOLON	;	30	24
RBRACE	}	31	0
ID	x	32	0	0x556526024248
ASSIGN	=	32	1
ID	x	32	2	0x556526024248
DIV	/	32	3
DECIMAL	2	32	4	2
SEMICOLON	;	32	5
ID	y	33	0	0x556526024270
ASSIGN	=	33	1
ID	y	33	2	0x556526024270
DIV	/	33	3
DECIMAL	2	33	4	2
SEMICOLON	;	33	5
ID	i	34	0	0x556526024220
ASSIGN	=	34	1
ID	i	34	2	0x556526024220
ADD	+	34	3
DECIMAL	1	34	4	1
SEMICOLON	;	34	5
RBRACE	}	35	0
IF	if	36	0
LPAREN	(	36	2
ID	ans	36	3	0x5565260241f8
RPAREN	)	36	6
LBRACE	{	36	7
LBRACE	{	37	0
INT	int	38	0
ID	al	38	3	0x5565260243b0
ASSIGN	=	38	5
ID	mres	38	6	0x556526024388
COMMA	,	38	10
ID	c	38	11	0x5565260243d8
ASSIGN	=	38	12
ID	ml	38	13	0x556526024338
COMMA	,	38	15
ID	sum	38	16	0x556526024400
SEMICOLON	;	38	19
WHILE	while	39	0
LPAREN	(	39	5
ID	c	39	6	0x5565260243d8
RPAREN	)	39	7
LBRACE	{	39	8
ID	ans	40	0	0x5565260241f8
ASSIGN	=	40	3
DECIMAL	0	40	4	0
SEMICOLON	;	40	5
ID	i	41	0	0x556526024220
ASSIGN	=	41	1
DECIMAL	0	41	2	0
SEMICOLON	;	41	3
ID	x	42	0	0x556526024248
ASSIGN	=	42	1
ID	al	42	2	0x5565260243b0
SEMICOLON	;	42	4
ID	y	43	0	0x556526024270
ASSIGN	=	43	1
ID	c	43	2	0x5565260243d8
SEMICOLON	;	43	3
WHILE	while	44	0
LPAREN	(	44	5
ID	i	44	6	0x556526024220
LESS	<	44	7
DECIMAL	16	44	8	16
RPAREN	)	44	10
LBRACE	{	44	11
IF	if	45	0
LPAREN	(	45	2
ID	x	45	3	0x556526024248
MOD	%	45	4
DECIMAL	2	45	5	2
RPAREN	)	45	6
LBRACE	{	45	7
IF	if	46	0
LPAREN	(	46	2
ID	y	46	3	0x556526024270
MOD	%	46	4
DECIMAL	2	46	5	2
EQUAL	==	46	6
DECIMAL	0	46	8	0
RPAREN	)	46	9
LBRACE	{	46	10
ID	ans	47	0	0x5565260241f8
ASSIGN	=	47	3
ID	ans	47	4	0x5565260241f8
ADD	+	47	7
DECIMAL	1	47	8	1
MUL	*	47	9
ID	SHIFT_TABLE	47	10	0x5565260241a8
LBRACKET	[	47	21
ID	i	47	22	0x556526024220
RBRACKET	]	47	23
SEMICOLON	;	47	24
RBRACE	}	48	0
RBRACE	}	49	0
ELSE	else	49	1
IF	if	49	5
LPAREN	(	49	7
ID	y	49	8	0x556526024270
MOD	%	49	9
DECIMAL	2	49	10	2
RPAREN	)	49	11
LBRACE	{	49	12
ID	ans	50	0	0x5565260241f8
ASSIGN	=	50	3
ID	ans	50	4	0x5565260241f8
ADD	+	50	7
DECIMAL	1	50	8	1
MUL	*	50	9
ID	SHIFT_TABLE	50	10	0x5565260241a8
LBRACKET	[	50	21
ID	i	50	22	0x556526024220
RBRACKET	]	50	23
SEMICOLON	;	50	24
RBRACE	}	51	0
ID	x	52	0	0x556526024248
ASSIGN	=	52	1
ID	x	52	2	0x556526024248
DIV	/	52	3
DECIMAL	2	52	4	2
SEMICOLON	;	52	5
ID	y	53	0	0x556526024270
ASSIGN	=	53	1
ID	y	53	2	0x556526024270
DIV	/	53	3
DECIMAL	2	53	4	2
SEMICOLON	;	53	5
ID	i	54	0	0x556526024220
ASSIGN	=	54	1
ID	i	54	2	0x556526024220
ADD	+	54	3
DECIMAL	1	54	4	1
SEMICOLON	;	54	5
RBRACE	}	55	0
ID	sum	56	0	0x556526024400
ASSIGN	=	56	3
ID	ans	56	4	0x5565260241f8
SEMICOLON	;	56	7
ID	ans	57	0	0x5565260241f8
ASSIGN	=	57	3
DECIMAL	0	57	4	0
SEMICOLON	;	57	5
ID	i	58	0	0x556526024220
ASSIGN	=	58	1
DECIMAL	0	58	2	0
SEMICOLON	;	58	3
ID	x	59	0	0x556526024248
ASSIGN	=	59	1
ID	al	59	2	0x5565260243b0
SEMICOLON	;	59	4
ID	y	60	0	0x556526024270
ASSIGN	=	60	1
ID	c	60	2	0x5565260243d8
SEMICOLON	;	60	3
WHILE	while	61	0
LPAREN	(	61	5
ID	i	61	6	0x556526024220
LESS	<	61	7
DECIMAL	16	61	8	16
RPAREN	)	61	10
LBRACE	{	61	11
IF	if	62	0
LPAREN	(	62	2
ID	x	62	3	0x556526024248
MOD	%	62	4
DECIMAL	2	62	5	2
AND	&&	62	6
ID	y	62	8	0x556526024270
MOD	%	62	9
DECIMAL	2	62	10	2
RPAREN	)	62	11
LBRACE	{	62	12
ID	ans	63	0	0x5565260241f8
ASSIGN	=	63	3
ID	ans	63	4	0x5565260241f8
ADD	+	63	7
DECIMAL	1	63	8	1
MUL	*	63	9
ID	SHIFT_TABLE	63	10	0x5565260241a8
LBRACKET	[	63	21
ID	i	63	22	0x556526024220
RBRACKET	]	63	23
SEMICOLON	;	63	24
RBRACE	}	64	0
ID	x	65	0	0x556526024248
ASSIGN	=	65	1
ID	x	65	2	0x556526024248
DIV	/	65	3
DECIMAL	2	65	4	2
SEMICOLON	;	65	5
ID	y	66	0	0x556526024270
ASSIGN	=	66	1
ID	y	66	2	0x556526024270
DIV	/	66	3
DECIMAL	2	66	4	2
SEMICOLON	;	66	5
ID	i	67	0	0x556526024220
ASSIGN	=	67	1
ID	i	67	2	0x556526024220
ADD	+	67	3
DECIMAL	1	67	4	1
SEMICOLON	;	67	5
RBRACE	}	68	0
ID	c	69	0	0x5565260243d8
ASSIGN	=	69	1
ID	ans	69	2	0x5565260241f8
SEMICOLON	;	69	5
IF	if	70	0
LPAREN	(	70	2
LPAREN	(	70	3
DECIMAL	1	70	4	1
RPAREN	)	70	5
GREATER	>	70	6
DECIMAL	15	70	7	15
RPAREN	)	70	9
LBRACE	{	70	10
ID	ans	71	0	0x5565260241f8
ASSIGN	=	71	3
DECIMAL	0	71	4	0
SEMICOLON	;	71	5
RBRACE	}	72	0
ELSE	else	72	1
LBRACE	{	72	5
ID	ans	73	0	0x5565260241f8
ASSIGN	=	73	3
DECIMAL	0	73	4	0
SEMICOLON	;	73	5
ID	i	74	0	0x556526024220
ASSIGN	=	74	1
DECIMAL	0	74	2	0
SEMICOLON	;	74	3
ID	x	75	0	0x556526024248
ASSIGN	=	75	1
LPAREN	(	75	2
ID	c	75	3	0x5565260243d8
RPAREN	)	75	4
MUL	*	75	5
ID	SHIFT_TABLE	75	6	0x5565260241a8
LBRACKET	[	75	17
DECIMAL	1	75	18	1
RBRACKET	]	75	19
SEMICOLON	;	75	20
ID	y	76	0	0x556526024270
ASSIGN	=	76	1
HEXADECIMAL	0xffff	76	2	65535
SEMICOLON	;	76	8
WHILE	while	77	0
LPAREN	(	77	5
ID	i	77	6	0x556526024220
LESS	<	77	7
DECIMAL	16	77	8	16
RPAREN	)	77	10
LBRACE	{	77	11
IF	if	78	0
LPAREN	(	78	2
ID	x	78	3	0x556526024248
MOD	%	78	4
DECIMAL	2	78	5	2
AND	&&	78	6
ID	y	78	8	0x556526024270
MOD	%	78	9
DECIMAL	2	78	10	2
RPAREN	)	78	11
LBRACE	{	78	12
ID	ans	79	0	0x5565260241f8
ASSIGN	=	79	3
ID	ans	79	4	0x5565260241f8
ADD	+	79	7
DECIMAL	1	79	8	1
MUL	*	79	9
ID	SHIFT_TABLE	79	10	0x5565260241a8
LBRACKET	[	79	21
ID	i	79	22	0x556526024220
RBRACKET	]	79	23
SEMICOLON	;	79	24
RBRACE	}	80	0
ID	x	81	0	0x556526024248
ASSIGN	=	81	1
ID	x	81	2	0x556526024248
DIV	/	81	3
DECIMAL	2	81	4	2
SEMICOLON	;	81	5
ID	y	82	0	0x556526024270
ASSIGN	=	82	1
ID	y	82	2	0x556526024270
DIV	/	82	3
DECIMAL	2	82	4	2
SEMICOLON	;	82	5
ID	i	83	0	0x556526024220
ASSIGN	=	83	1
ID	i	83	2	0x556526024220
ADD	+	83	3
DECIMAL	1	83	4	1
SEMICOLON	;	83	5
RBRACE	}	84	0
RBRACE	}	85	0
ID	c	86	0	0x5565260243d8
ASSIGN	=	86	1
ID	ans	86	2	0x5565260241f8
SEMICOLON	;	86	5
ID	al	87	0	0x5565260243b0
ASSIGN	=	87	2
ID	sum	87	3	0x556526024400
SEMICOLON	;	87	6
RBRACE	}	88	0
ID	ans	89	0	0x5565260241f8
ASSIGN	=	89	3
ID	al	89	4	0x5565260243b0
SEMICOLON	;	89	6
RBRACE	}	90	0
ID	mres	91	0	0x556526024388
ASSIGN	=	91	4
ID	ans	91	5	0x5565260241f8
SEMICOLON	;	91	8
RBRACE	}	92	0
LBRACE	{	93	0
INT	int	94	0
ID	al	94	3	0x5565260243b0
ASSIGN	=	94	5
ID	ml	94	6	0x556526024338
COMMA	,	94	8
ID	c	94	9	0x5565260243d8
ASSIGN	=	94	10
ID	ml	94	11	0x556526024338
COMMA	,	94	13
ID	sum	94	14	0x556526024400
SEMICOLON	;	94	17
WHILE	while	95	0
LPAREN	(	95	5
ID	c	95	6	0x5565260243d8
RPAREN	)	95	7
LBRACE	{	95	8
ID	ans	96	0	0x5565260241f8
ASSIGN	=	96	3
DECIMAL	0	96	4	0
SEMICOLON	;	96	5
ID	i	97	0	0x556526024220
ASSIGN	=	97	1
DECIMAL	0	97	2	0
SEMICOLON	;	97	3
ID	x	98	0	0x556526024248
ASSIGN	=	98	1
ID	al	98	2	0x5565260243b0
SEMICOLON	;	98	4
ID	y	99	0	0x556526024270
ASSIGN	=	99	1
ID	c	99	2	0x5565260243d8
SEMICOLON	;	99	3
WHILE	while	100	0
LPAREN	(	100	5
ID	i	100	6	0x556526024220
LESS	<	100	7
DECIMAL	16	100	8	16
RPAREN	)	100	10
LBRACE	{	100	11
IF	if	101	0
LPAREN	(	101	2
ID	x	101	3	0x556526024248
MOD	%	101	4
DECIMAL	2	101	5	2
RPAREN	)	101	6
LBRACE	{	101	7
IF	if	102	0
LPAREN	(	102	2
ID	y	102	3	0x556526024270
MOD	%	102	4
DECIMAL	2	102	5	2
EQUAL	==	102	6
DECIMAL	0	102	8	0
RPAREN	)	102	9
LBRACE	{	102	10
ID	ans	103	0	0x5565260241f8
ASSIGN	=	103	3
ID	ans	103	4	0x5565260241f8
ADD	+	103	7
DECIMAL	1	103	8	1
MUL	*	103	9
ID	SHIFT_TABLE	103	10	0x5565260241a8
LBRACKET	[	103	21
ID	i	103	22	0x556526024220
RBRACKET	]	103	23
SEMICOLON	;	103	24
RBRACE	}	104	0
RBRACE	}	105	0
ELSE	else	105	1
IF	if	105	5
LPAREN	(	105	7
ID	y	105	8	0x556526024270
MOD	%	105	9
DECIMAL	2	105	10	2
RPAREN	)	105	11
LBRACE	{	105	12
ID	ans	106	0	0x5565260241f8
ASSIGN	=	106	3
ID	ans	106	4	0x5565260241f8
ADD	+	106	7
DECIMAL	1	106	8	1
MUL	*	106	9
ID	SHIFT_TABLE	106	10	0x5565260241a8
LBRACKET	[	106	21
ID	i	106	22	0x556526024220
RBRACKET	]	106	23
SEMICOLON	;	106	24
RBRACE	}	107	0
ID	x	108	0	0x556526024248
ASSIGN	=	108	1
ID	x	108	2	0x556526024248
DIV	/	108	3
DECIMAL	2	108	4	2
SEMICOLON	;	108	5
ID	y	109	0	0x556526024270
ASSIGN	=	109	1
ID	y	109	2	0x556526024270
DIV	/	109	3
DECIMAL	2	109	4	2
SEMICOLON	;	109	5
ID	i	110	0	0x556526024220
ASSIGN	=	110	1
ID	i	110	2	0x556526024220
ADD	+	110	3
DECIMAL	1	110	4	1
SEMICOLON	;	110	5
RBRACE	}	111	0
ID	sum	112	0	0x556526024400
ASSIGN	=	112	3
ID	ans	112	4	0x5565260241f8
SEMICOLON	;	112	7
ID	ans	113	0	0x5565260241f8
ASSIGN	=	113	3
DECIMAL	0	113	4	0
SEMICOLON	;	113	5
ID	i	114	0	0x556526024220
ASSIGN	=	114	1
DECIMAL	0	114	2	0
SEMICOLON	;	114	3
ID	x	115	0	0x556526024248
ASSIGN	=	115	1
ID	al	115	2	0x5565260243b0
SEMICOLON	;	115	4
ID	y	116	0	0x556526024270
ASSIGN	=	116	1
ID	c	116	2	0x5565260243d8
SEMICOLON	;	116	3
WHILE	while	117	0
LPAREN	(	117	5
ID	i	117	6	0x556526024220
LESS	<	117	7
DECIMAL	16	117	8	16
RPAREN	)	117	10
LBRACE	{	117	11
IF	if	118	0
LPAREN	(	118	2
ID	x	118	3	0x556526024248
MOD	%	118	4
DECIMAL	2	118	5	2
AND	&&	118	6
ID	y	118	8	0x556526024270
MOD	%	118	9
DECIMAL	2	118	10	2
RPAREN	)	118	11
LBRACE	{	118	12
ID	ans	119	0	0x5565260241f8
ASSIGN	=	119	3
ID	ans	119	4	0x5565260241f8
ADD	+	119	7
DECIMAL	1	119	8	1
MUL	*	119	9
ID	SHIFT_TABLE	119	10	0x5565260241a8
LBRACKET	[	119	21
ID	i	119	22	0x556526024220
RBRACKET	]	119	23
SEMICOLON	;	119	24
RBRACE	}	120	0
ID	x	121	0	0x556526024248
ASSIGN	=	121	1
ID	x	121	2	0x556526024248
DIV	/	121	3
DECIMAL	2	121	4	2
SEMICOLON	;	121	5
ID	y	122	0	0x556526024270
ASSIGN	=	122	1
ID	y	122	2	0x556526024270
DIV	/	122	3
DECIMAL	2	122	4	2
SEMICOLON	;	122	5
ID	i	123	0	0x556526024220
ASSIGN	=	123	1
ID	i	123	2	0x556526024220
ADD	+	123	3
DECIMAL	1	123	4	1
SEMICOLON	;	123	5
RBRACE	}	124	0
ID	c	125	0	0x5565260243d8
ASSIGN	=	125	1
ID	ans	125	2	0x5565260241f8
SEMICOLON	;	125	5
IF	if	126	0
LPAREN	(	126	2
LPAREN	(	126	3
DECIMAL	1	126	4	1
RPAREN	)	126	5
GREATER	>	126	6
DECIMAL	15	126	7	15
RPAREN	)	126	9
LBRACE	{	126	10
ID	ans	127	0	0x5565260241f8
ASSIGN	=	127	3
DECIMAL	0	127	4	0
SEMICOLON	;	127	5
RBRACE	}	128	0
ELSE	else	128	1
LBRACE	{	128	5
ID	ans	129	0	0x5565260241f8
ASSIGN	=	129	3
DECIMAL	0	129	4	0
SEMICOLON	;	129	5
ID	i	130	0	0x556526024220
ASSIGN	=	130	1
DECIMAL	0	130	2	0
SEMICOLON	;	130	3
ID	x	131	0	0x556526024248
ASSIGN	=	131	1
LPAREN	(	131	2
ID	c	131	3	0x5565260243d8
RPAREN	)	131	4
MUL	*	131	5
ID	SHIFT_TABLE	131	6	0x5565260241a8
LBRACKET	[	131	17
DECIMAL	1	131	18	1
RBRACKET	]	131	19
SEMICOLON	;	131	20
ID	y	132	0	0x556526024270
ASSIGN	=	132	1
HEXADECIMAL	0xffff	132	2	65535
SEMICOLON	;	132	8
WHILE	while	133	0
LPAREN	(	133	5
ID	i	133	6	0x556526024220
LESS	<	133	7
DECIMAL	16	133	8	16
RPAREN	)	133	10
LBRACE	{	133	11
IF	if	134	0
LPAREN	(	134	2
ID	x	134	3	0x556526024248
MOD	%	134	4
DECIMAL	2	134	5	2
AND	&&	134	6
ID	y	134	8	0x556526024270
MOD	%	134	9
DECIMAL	2	134	10	2
RPAREN	)	134	11
LBRACE	{	134	12
ID	ans	135	0	0x5565260241f8
ASSIGN	=	135	3
ID	ans	135	4	0x5565260241f8
ADD	+	135	7
DECIMAL	1	135	8	1
MUL	*	135	9
ID	SHIFT_TABLE	135	10	0x5565260241a8
LBRACKET	[	135	21
ID	i	135	22	0x556526024220
RBRACKET	]	135	23
SEMICOLON	;	135	24
RBRACE	}	136	0
ID	x	137	0	0x556526024248
ASSIGN	=	137	1
ID	x	137	2	0x556526024248
DIV	/	137	3
DECIMAL	2	137	4	2
SEMICOLON	;	137	5
ID	y	138	0	0x556526024270
ASSIGN	=	138	1
ID	y	138	2	0x556526024270
DIV	/	138	3
DECIMAL	2	138	4	2
SEMICOLON	;	138	5
ID	i	139	0	0x556526024220
ASSIGN	=	139	1
ID	i	139	2	0x556526024220
ADD	+	139	3
DECIMAL	1	139	4	1
SEMICOLON	;	139	5
RBRACE	}	140	0
RBRACE	}	141	0
ID	c	142	0	0x5565260243d8
ASSIGN	=	142	1
ID	ans	142	2	0x5565260241f8
SEMICOLON	;	142	5
ID	al	143	0	0x5565260243b0
ASSIGN	=	143	2
ID	sum	143	3	0x556526024400
SEMICOLON	;	143	6
RBRACE	}	144	0
ID	ans	145	0	0x5565260241f8
ASSIGN	=	145	3
ID	al	145	4	0x5565260243b0
SEMICOLON	;	145	6
RBRACE	}	146	0
ID	ml	147	0	0x556526024338
ASSIGN	=	147	2
ID	ans	147	3	0x5565260241f8
SEMICOLON	;	147	6
ID	x	148	0	0x556526024248
ASSIGN	=	148	1
ID	mr	148	2	0x556526024360
SEMICOLON	;	148	4
ID	y	149	0	0x556526024270
ASSIGN	=	149	1
DECIMAL	1	149	2	1
SEMICOLON	;	149	3
IF	if	150	0
LPAREN	(	150	2
ID	y	150	3	0x556526024270
GEQUAL	>=	150	4
DECIMAL	15	150	6	15
RPAREN	)	150	8
LBRACE	{	150	9
IF	if	151	0
LPAREN	(	151	2
ID	x	151	3	0x556526024248
LESS	<	151	4
DECIMAL	0	151	5	0
RPAREN	)	151	6
LBRACE	{	151	7
ID	ans	152	0	0x5565260241f8
ASSIGN	=	152	3
HEXADECIMAL	0xffff	152	4	65535
SEMICOLON	;	152	10
RBRACE	}	153	0
ELSE	else	153	1
LBRACE	{	153	5
ID	ans	154	0	0x5565260241f8
ASSIGN	=	154	3
DECIMAL	0	154	4	0
SEMICOLON	;	154	5
RBRACE	}	155	0
RBRACE	}	156	0
ELSE	else	156	1
IF	if	156	5
LPAREN	(	156	7
ID	y	156	8	0x556526024270
GREATER	>	156	9
DECIMAL	0	156	10	0
RPAREN	)	156	11
LBRACE	{	156	12
IF	if	157	0
LPAREN	(	157	2
ID	x	157	3	0x556526024248
GREATER	>	157	4
HEXADECIMAL	0x7fff	157	5	32767
RPAREN	)	157	11
LBRACE	{	157	12
ID	x	158	0	0x556526024248
ASSIGN	=	158	1
ID	x	158	2	0x556526024248
DIV	/	158	3
ID	SHIFT_TABLE	158	4	0x5565260241a8
LBRACKET	[	158	15
ID	y	158	16	0x556526024270
RBRACKET	]	158	17
SEMICOLON	;	158	18
ID	ans	159	0	0x5565260241f8
ASSIGN	=	159	3
ID	x	159	4	0x556526024248
ADD	+	159	5
DECIMAL	65536	159	6	65536
SUB	-	159	11
ID	SHIFT_TABLE	159	12	0x5565260241a8
LBRACKET	[	159	23
DECIMAL	15	159	24	15
SUB	-	159	26
ID	y	159	27	0x556526024270
ADD	+	159	28
DECIMAL	1	159	29	1
RBRACKET	]	159	30
SEMICOLON	;	159	31
RBRACE	}	160	0
ELSE	else	160	1
LBRACE	{	160	5
ID	ans	161	0	0x5565260241f8
ASSIGN	=	161	3
ID	x	161	4	0x556526024248
DIV	/	161	5
ID	SHIFT_TABLE	161	6	0x5565260241a8
LBRACKET	[	161	17
ID	y	161	18	0x556526024270
RBRACKET	]	161	19
SEMICOLON	;	161	20
RBRACE	}	162	0
RBRACE	}	163	0
ELSE	else	163	1
LBRACE	{	163	5
ID	ans	164	0	0x5565260241f8
ASSIGN	=	164	3
ID	x	164	4	0x556526024248
SEMICOLON	;	164	5
RBRACE	}	165	0
ID	mr	166	0	0x556526024360
ASSIGN	=	166	2
ID	ans	166	3	0x5565260241f8
SEMICOLON	;	166	6
RBRACE	}	167	0
ID	ans	168	0	0x5565260241f8
ASSIGN	=	168	3
ID	mres	168	4	0x556526024388
SEMICOLON	;	168	8
RBRACE	}	169	0
ID	pres	170	0	0x556526024310
ASSIGN	=	170	4
ID	ans	170	5	0x5565260241f8
SEMICOLON	;	170	8
RBRACE	}	171	0
LBRACE	{	172	0
INT	int	173	0
ID	ml	173	3	0x556526024338
ASSIGN	=	173	5
ID	pl	173	6	0x5565260242c0
COMMA	,	173	8
ID	mr	173	9	0x556526024360
ASSIGN	=	173	11
ID	pl	173	12	0x5565260242c0
COMMA	,	173	14
ID	mres	173	15	0x556526024388
ASSIGN	=	173	19
DECIMAL	0	173	20	0
SEMICOLON	;	173	21
WHILE	while	174	0
LPAREN	(	174	5
ID	mr	174	6	0x556526024360
RPAREN	)	174	8
LBRACE	{	174	9
ID	ans	175	0	0x5565260241f8
ASSIGN	=	175	3
DECIMAL	0	175	4	0
SEMICOLON	;	175	5
ID	i	176	0	0x556526024220
ASSIGN	=	176	1
DECIMAL	0	176	2	0
SEMICOLON	;	176	3
ID	x	177	0	0x556526024248
ASSIGN	=	177	1
ID	mr	177	2	0x556526024360
SEMICOLON	;	177	4
ID	y	178	0	0x556526024270
ASSIGN	=	178	1
DECIMAL	1	178	2	1
SEMICOLON	;	178	3
WHILE	while	179	0
LPAREN	(	179	5
ID	i	179	6	0x556526024220
LESS	<	179	7
DECIMAL	16	179	8	16
RPAREN	)	179	10
LBRACE	{	179	11
IF	if	180	0
LPAREN	(	180	2
ID	x	180	3	0x556526024248
MOD	%	180	4
DECIMAL	2	180	5	2
AND	&&	180	6
ID	y	180	8	0x556526024270
MOD	%	180	9
DECIMAL	2	180	10	2
RPAREN	)	180	11
LBRACE	{	180	12
ID	ans	181	0	0x5565260241f8
ASSIGN	=	181	3
ID	ans	181	4	0x5565260241f8
ADD	+	181	7
DECIMAL	1	181	8	1
MUL	*	181	9
ID	SHIFT_TABLE	181	10	0x5565260241a8
LBRACKET	[	181	21
ID	i	181	22	0x556526024220
RBRACKET	]	181	23
SEMICOLON	;	181	24
RBRACE	}	182	0
ID	x	183	0	0x556526024248
ASSIGN	=	183	1
ID	x	183	2	0x556526024248
DIV	/	183	3
DECIMAL	2	183	4	2
SEMICOLON	;	183	5
ID	y	184	0	0x556526024270
ASSIGN	=	184	1
ID	y	184	2	0x556526024270
DIV	/	184	3
DECIMAL	2	184	4	2
SEMICOLON	;	184	5
ID	i	185	0	0x556526024220
ASSIGN	=	185	1
ID	i	185	2	0x556526024220
ADD	+	185	3
DECIMAL	1	185	4	1
SEMICOLON	;	185	5
RBRACE	}	186	0
IF	if	187	0
LPAREN	(	187	2
ID	ans	187	3	0x5565260241f8
RPAREN	)	187	6
LBRACE	{	187	7
LBRACE	{	188	0
INT	int	189	0
ID	al	189	3	0x5565260243b0
ASSIGN	=	189	5
ID	mres	189	6	0x556526024388
COMMA	,	189	10
ID	c	189	11	0x5565260243d8
ASSIGN	=	189	12
ID	ml	189	13	0x556526024338
COMMA	,	189	15
ID	sum	189	16	0x556526024400
SEMICOLON	;	189	19
WHILE	while	190	0
LPAREN	(	190	5
ID	c	190	6	0x5565260243d8
RPAREN	)	190	7
LBRACE	{	190	8
ID	ans	191	0	0x5565260241f8
ASSIGN	=	191	3
DECIMAL	0	191	4	0
SEMICOLON	;	191	5
ID	i	192	0	0x556526024220
ASSIGN	=	192	1
DECIMAL	0	192	2	0
SEMICOLON	;	192	3
ID	x	193	0	0x556526024248
ASSIGN	=	193	1
ID	al	193	2	0x5565260243b0
SEMICOLON	;	193	4
ID	y	194	0	0x556526024270
ASSIGN	=	194	1
ID	c	194	2	0x5565260243d8
SEMICOLON	;	194	3
WHILE	while	195	0
LPAREN	(	195	5
ID	i	195	6	0x556526024220
LESS	<	195	7
DECIMAL	16	195	8	16
RPAREN	)	195	10
LBRACE	{	195	11
IF	if	196	0
LPAREN	(	196	2
ID	x	196	3	0x556526024248
MOD	%	196	4
DECIMAL	2	196	5	2
RPAREN	)	196	6
LBRACE	{	196	7
IF	if	197	0
LPAREN	(	197	2
ID	y	197	3	0x556526024270
MOD	%	197	4
DECIMAL	2	197	5	2
EQUAL	==	197	6
DECIMAL	0	197	8	0
RPAREN	)	197	9
LBRACE	{	197	10
ID	ans	198	0	0x5565260241f8
ASSIGN	=	198	3
ID	ans	198	4	0x5565260241f8
ADD	+	198	7
DECIMAL	1	198	8	1
MUL	*	198	9
ID	SHIFT_TABLE	198	10	0x5565260241a8
LBRACKET	[	198	21
ID	i	198	22	0x556526024220
RBRACKET	]	198	23
SEMICOLON	;	198	24
RBRACE	}	199	0
RBRACE	}	200	0
ELSE	else	200	1
IF	if	200	5
LPAREN	(	200	7
ID	y	200	8	0x556526024270
MOD	%	200	9
DECIMAL	2	200	10	2
RPAREN	)	200	11
LBRACE	{	200	12
ID	ans	201	0	0x5565260241f8
ASSIGN	=	201	3
ID	ans	201	4	0x5565260241f8
ADD	+	201	7
DECIMAL	1	201	8	1
MUL	*	201	9
ID	SHIFT_TABLE	201	10	0x5565260241a8
LBRACKET	[	201	21
ID	i	201	22	0x556526024220
RBRACKET	]	201	23
SEMICOLON	;	201	24
RBRACE	}	202	0
ID	x	203	0	0x556526024248
ASSIGN	=	203	1
ID	x	203	2	0x556526024248
DIV	/	203	3
DECIMAL	2	203	4	2
SEMICOLON	;	203	5
ID	y	204	0	0x556526024270
ASSIGN	=	204	1
ID	y	204	2	0x556526024270
DIV	/	204	3
DECIMAL	2	204	4	2
SEMICOLON	;	204	5
ID	i	205	0	0x556526024220
ASSIGN	=	205	1
ID	i	205	2	0x556526024220
ADD	+	205	3
DECIMAL	1	205	4	1
SEMICOLON	;	205	5
RBRACE	}	206	0
ID	sum	207	0	0x556526024400
ASSIGN	=	207	3
ID	ans	207	4	0x5565260241f8
SEMICOLON	;	207	7
ID	ans	208	0	0x5565260241f8
ASSIGN	=	208	3
DECIMAL	0	208	4	0
SEMICOLON	;	208	5
ID	i	209	0	0x556526024220
ASSIGN	=	209	1
DECIMAL	0	209	2	0
SEMICOLON	;	209	3
ID	x	210	0	0x556526024248
ASSIGN	=	210	1
ID	al	210	2	0x5565260243b0
SEMICOLON	;	210	4
ID	y	211	0	0x556526024270
ASSIGN	=	211	1
ID	c	211	2	0x5565260243d8
SEMICOLON	;	211	3
WHILE	while	212	0
LPAREN	(	212	5
ID	i	212	6	0x556526024220
LESS	<	212	7
DECIMAL	16	212	8	16
RPAREN	)	212	10
LBRACE	{	212	11
IF	if	213	0
LPAREN	(	213	2
ID	x	213	3	0x556526024248
MOD	%	213	4
DECIMAL	2	213	5	2
AND	&&	213	6
ID	y	213	8	0x556526024270
MOD	%	213	9
DECIMAL	2	213	10	2
RPAREN	)	213	11
LBRACE	{	213	12
ID	ans	214	0	0x5565260241f8
ASSIGN	=	214	3
ID	ans	214	4	0x5565260241f8
ADD	+	214	7
DECIMAL	1	214	8	1
MUL	*	214	9
ID	SHIFT_TABLE	214	10	0x5565260241a8
LBRACKET	[	214	21
ID	i	214	22	0x556526024220
RBRACKET	]	214	23
SEMICOLON	;	214	24
RBRACE	}	215	0
ID	x	216	0	0x556526024248
ASSIGN	=	216	1
ID	x	216	2	0x556526024248
DIV	/	216	3
DECIMAL	2	216	4	2
SEMICOLON	;	216	5
ID	y	217	0	0x556526024270
ASSIGN	=	217	1
ID	y	217	2	0x556526024270
DIV	/	217	3
DECIMAL	2	217	4	2
SEMICOLON	;	217	5
ID	i	218	0	0x556526024220
ASSIGN	=	218	1
ID	i	218	2	0x556526024220
ADD	+	218	3
DECIMAL	1	218	4	1
SEMICOLON	;	218	5
RBRACE	}	219	0
ID	c	220	0	0x5565260243d8
ASSIGN	=	220	1
ID	ans	220	2	0x5565260241f8
SEMICOLON	;	220	5
IF	if	221	0
LPAREN	(	221	2
LPAREN	(	221	3
DECIMAL	1	221	4	1
RPAREN	)	221	5
GREATER	>	221	6
DECIMAL	15	221	7	15
RPAREN	)	221	9
LBRACE	{	221	10
ID	ans	222	0	0x5565260241f8
ASSIGN	=	222	3
DECIMAL	0	222	4	0
SEMICOLON	;	222	5
RBRACE	}	223	0
ELSE	else	223	1
LBRACE	{	223	5
ID	ans	224	0	0x5565260241f8
ASSIGN	=	224	3
DECIMAL	0	224	4	0
SEMICOLON	;	224	5
ID	i	225	0	0x556526024220
ASSIGN	=	225	1
DECIMAL	0	225	2	0
SEMICOLON	;	225	3
ID	x	226	0	0x556526024248
ASSIGN	=	226	1
LPAREN	(	226	2
ID	c	226	3	0x5565260243d8
RPAREN	)	226	4
MUL	*	226	5
ID	SHIFT_TABLE	226	6	0x5565260241a8
LBRACKET	[	226	17
DECIMAL	1	226	18	1
RBRACKET	]	226	19
SEMICOLON	;	226	20
ID	y	227	0	0x556526024270
ASSIGN	=	227	1
HEXADECIMAL	0xffff	227	2	65535
SEMICOLON	;	227	8
WHILE	while	228	0
LPAREN	(	228	5
ID	i	228	6	0x556526024220
LESS	<	228	7
DECIMAL	16	228	8	16
RPAREN	)	228	10
LBRACE	{	228	11
IF	if	229	0
LPAREN	(	229	2
ID	x	229	3	0x556526024248
MOD	%	229	4
DECIMAL	2	229	5	2
AND	&&	229	6
ID	y	229	8	0x556526024270
MOD	%	229	9
DECIMAL	2	229	10	2
RPAREN	)	229	11
LBRACE	{	229	12
ID	ans	230	0	0x5565260241f8
ASSIGN	=	230	3
ID	ans	230	4	0x5565260241f8
ADD	+	230	7
DECIMAL	1	230	8	1
MUL	*	230	9
ID	SHIFT_TABLE	230	10	0x5565260241a8
LBRACKET	[	230	21
ID	i	230	22	0x556526024220
RBRACKET	]	230	23
SEMICOLON	;	230	24
RBRACE	}	231	0
ID	x	232	0	0x556526024248
ASSIGN	=	232	1
ID	x	232	2	0x556526024248
DIV	/	232	3
DECIMAL	2	232	4	2
SEMICOLON	;	232	5
ID	y	233	0	0x556526024270
ASSIGN	=	233	1
ID	y	233	2	0x556526024270
DIV	/	233	3
DECIMAL	2	233	4	2
SEMICOLON	;	233	5
ID	i	234	0	0x556526024220
ASSIGN	=	234	1
ID	i	234	2	0x556526024220
ADD	+	234	3
DECIMAL	1	234	4	1
SEMICOLON	;	234	5
RBRACE	}	235	0
RBRACE	}	236	0
ID	c	237	0	0x5565260243d8
ASSIGN	=	237	1
ID	ans	237	2	0x5565260241f8
SEMICOLON	;	237	5
ID	al	238	0	0x5565260243b0
ASSIGN	=	238	2
ID	sum	238	3	0x556526024400
SEMICOLON	;	238	6
RBRACE	}	239	0
ID	ans	240	0	0x5565260241f8
ASSIGN	=	240	3
ID	al	240	4	0x5565260243b0
SEMICOLON	;	240	6
RBRACE	}	241	0
ID	mres	242	0	0x556526024388
ASSIGN	=	242	4
ID	ans	242	5	0x5565260241f8
SEMICOLON	;	242	8
RBRACE	}	243	0
LBRACE	{	244	0
INT	int	245	0
ID	al	245	3	0x5565260243b0
ASSIGN	=	245	5
ID	ml	245	6	0x556526024338
COMMA	,	245	8
ID	c	245	9	0x5565260243d8
ASSIGN	=	245	10
ID	ml	245	11	0x556526024338
COMMA	,	245	13
ID	sum	245	14	0x556526024400
SEMICOLON	;	245	17
WHILE	while	246	0
LPAREN	(	246	5
ID	c	246	6	0x5565260243d8
RPAREN	)	246	7
LBRACE	{	246	8
ID	ans	247	0	0x5565260241f8
ASSIGN	=	247	3
DECIMAL	0	247	4	0
SEMICOLON	;	247	5
ID	i	248	0	0x556526024220
ASSIGN	=	248	1
DECIMAL	0	248	2	0
SEMICOLON	;	248	3
ID	x	249	0	0x556526024248
ASSIGN	=	249	1
ID	al	249	2	0x5565260243b0
SEMICOLON	;	249	4
ID	y	250	0	0x556526024270
ASSIGN	=	250	1
ID	c	250	2	0x5565260243d8
SEMICOLON	;	250	3
WHILE	while	251	0
LPAREN	(	251	5
ID	i	251	6	0x556526024220
LESS	<	251	7
DECIMAL	16	251	8	16
RPAREN	)	251	10
LBRACE	{	251	11
IF	if	252	0
LPAREN	(	252	2
ID	x	252	3	0x556526024248
MOD	%	252	4
DECIMAL	2	252	5	2
RPAREN	)	252	6
LBRACE	{	252	7
IF	if	253	0
LPAREN	(	253	2
ID	y	253	3	0x556526024270
MOD	%	253	4
DECIMAL	2	253	5	2
EQUAL	==	253	6
DECIMAL	0	253	8	0
RPAREN	)	253	9
LBRACE	{	253	10
ID	ans	254	0	0x5565260241f8
ASSIGN	=	254	3
ID	ans	254	4	0x5565260241f8
ADD	+	254	7
DECIMAL	1	254	8	1
MUL	*	254	9
ID	SHIFT_TABLE	254	10	0x5565260241a8
LBRACKET	[	254	21
ID	i	254	22	0x556526024220
RBRACKET	]	254	23
SEMICOLON	;	254	24
RBRACE	}	255	0
RBRACE	}	256	0
ELSE	else	256	1
IF	if	256	5
LPAREN	(	256	7
ID	y	256	8	0x556526024270
MOD	%	256	9
DECIMAL	2	256	10	2
RPAREN	)	256	11
LBRACE	{	256	12
ID	ans	257	0	0x5565260241f8
ASSIGN	=	257	3
ID	ans	257	4	0x5565260241f8
ADD	+	257	7
DECIMAL	1	257	8	1
MUL	*	257	9
ID	SHIFT_TABLE	257	10	0x5565260241a8
LBRACKET	[	257	21
ID	i	257	22	0x556526024220
RBRACKET	]	257	23
SEMICOLON	;	257	24
RBRACE	}	258	0
ID	x	259	0	0x556526024248
ASSIGN	=	259	1
ID	x	259	2	0x556526024248
DIV	/	259	3
DECIMAL	2	259	4	2
SEMICOLON	;	259	5
ID	y	260	0	0x556526024270
ASSIGN	=	260	1
ID	y	260	2	0x556526024270
DIV	/	260	3
DECIMAL	2	260	4	2
SEMICOLON	;	260	5
ID	i	261	0	0x556526024220
ASSIGN	=	261	1
ID	i	261	2	0x556526024220
ADD	+	261	3
DECIMAL	1	261	4	1
SEMICOLON	;	261	5
RBRACE	}	262	0
ID	sum	263	0	0x556526024400
ASSIGN	=	263	3
ID	ans	263	4	0x5565260241f8
SEMICOLON	;	263	7
ID	ans	264	0	0x5565260241f8
ASSIGN	=	264	3
DECIMAL	0	264	4	0
SEMICOLON	;	264	5
ID	i	265	0	0x556526024220
ASSIGN	=	265	1
DECIMAL	0	265	2	0
SEMICOLON	;	265	3
ID	x	266	0	0x556526024248
ASSIGN	=	266	1
ID	al	266	2	0x5565260243b0
SEMICOLON	;	266	4
ID	y	267	0	0x556526024270
ASSIGN	=	267	1
ID	c	267	2	0x5565260243d8
SEMICOLON	;	267	3
WHILE	while	268	0
LPAREN	(	268	5
ID	i	268	6	0x556526024220
LESS	<	268	7
DECIMAL	16	268	8	16
RPAREN	)	268	10
LBRACE	{	268	11
IF	if	269	0
LPAREN	(	269	2
ID	x	269	3	0x556526024248
MOD	%	269	4
DECIMAL	2	269	5	2
AND	&&	269	6
ID	y	269	8	0x556526024270
MOD	%	269	9
DECIMAL	2	269	10	2
RPAREN	)	269	11
LBRACE	{	269	12
ID	ans	270	0	0x5565260241f8
ASSIGN	=	270	3
ID	ans	270	4	0x5565260241f8
ADD	+	270	7
DECIMAL	1	270	8	1
MUL	*	270	9
ID	SHIFT_TABLE	270	10	0x5565260241a8
LBRACKET	[	270	21
ID	i	270	22	0x556526024220
RBRACKET	]	270	23
SEMICOLON	;	270	24
RBRACE	}	271	0
ID	x	272	0	0x556526024248
ASSIGN	=	272	1
ID	x	272	2	0x556526024248
DIV	/	272	3
DECIMAL	2	272	4	2
SEMICOLON	;	272	5
ID	y	273	0	0x556526024270
ASSIGN	=	273	1
ID	y	273	2	0x556526024270
DIV	/	273	3
DECIMAL	2	273	4	2
SEMICOLON	;	273	5
ID	i	274	0	0x556526024220
ASSIGN	=	274	1
ID	i	274	2	0x556526024220
ADD	+	274	3
DECIMAL	1	274	4	1
SEMICOLON	;	274	5
RBRACE	}	275	0
ID	c	276	0	0x5565260243d8
ASSIGN	=	276	1
ID	ans	276	2	0x5565260241f8
SEMICOLON	;	276	5
IF	if	277	0
LPAREN	(	277	2
LPAREN	(	277	3
DECIMAL	1	277	4	1
RPAREN	)	277	5
GREATER	>	277	6
DECIMAL	15	277	7	15
RPAREN	)	277	9
LBRACE	{	277	10
ID	ans	278	0	0x5565260241f8
ASSIGN	=	278	3
DECIMAL	0	278	4	0
SEMICOLON	;	278	5
RBRACE	}	279	0
ELSE	else	279	1
LBRACE	{	279	5
ID	ans	280	0	0x5565260241f8
ASSIGN	=	280	3
DECIMAL	0	280	4	0
SEMICOLON	;	280	5
ID	i	281	0	0x556526024220
ASSIGN	=	281	1
DECIMAL	0	281	2	0
SEMICOLON	;	281	3
ID	x	282	0	0x556526024248
ASSIGN	=	282	1
LPAREN	(	282	2
ID	c	282	3	0x5565260243d8
RPAREN	)	282	4
MUL	*	282	5
ID	SHIFT_TABLE	282	6	0x5565260241a8
LBRACKET	[	282	17
DECIMAL	1	282	18	1
RBRACKET	]	282	19
SEMICOLON	;	282	20
ID	y	283	0	0x556526024270
ASSIGN	=	283	1
HEXADECIMAL	0xffff	283	2	65535
SEMICOLON	;	283	8
WHILE	while	284	0
LPAREN	(	284	5
ID	i	284	6	0x556526024220
LESS	<	284	7
DECIMAL	16	284	8	16
RPAREN	)	284	10
LBRACE	{	284	11
IF	if	285	0
LPAREN	(	285	2
ID	x	285	3	0x556526024248
MOD	%	285	4
DECIMAL	2	285	5	2
AND	&&	285	6
ID	y	285	8	0x556526024270
MOD	%	285	9
DECIMAL	2	285	10	2
RPAREN	)	285	11
LBRACE	{	285	12
ID	ans	286	0	0x5565260241f8
ASSIGN	=	286	3
ID	ans	286	4	0x5565260241f8
ADD	+	286	7
DECIMAL	1	286	8	1
MUL	*	286	9
ID	SHIFT_TABLE	286	10	0x5565260241a8
LBRACKET	[	286	21
ID	i	286	22	0x556526024220
RBRACKET	]	286	23
SEMICOLON	;	286	24
RBRACE	}	287	0
ID	x	288	0	0x556526024248
ASSIGN	=	288	1
ID	x	288	2	0x556526024248
DIV	/	288	3
DECIMAL	2	288	4	2
SEMICOLON	;	288	5
ID	y	289	0	0x556526024270
ASSIGN	=	289	1
ID	y	289	2	0x556526024270
DIV	/	289	3
DECIMAL	2	289	4	2
SEMICOLON	;	289	5
ID	i	290	0	0x556526024220
ASSIGN	=	290	1
ID	i	290	2	0x556526024220
ADD	+	290	3
DECIMAL	1	290	4	1
SEMICOLON	;	290	5
RBRACE	}	291	0
RBRACE	}	292	0
ID	c	293	0	0x5565260243d8
ASSIGN	=	293	1
ID	ans	293	2	0x5565260241f8
SEMICOLON	;	293	5
ID	al	294	0	0x5565260243b0
ASSIGN	=	294	2
ID	sum	294	3	0x556526024400
SEMICOLON	;	294	6
RBRACE	}	295	0
ID	ans	296	0	0x5565260241f8
ASSIGN	=	296	3
ID	al	296	4	0x5565260243b0
SEMICOLON	;	296	6
RBRACE	}	297	0
ID	ml	298	0	0x556526024338
ASSIGN	=	298	2
ID	ans	298	3	0x5565260241f8
SEMICOLON	;	298	6
ID	x	299	0	0x556526024248
ASSIGN	=	299	1
ID	mr	299	2	0x556526024360
SEMICOLON	;	299	4
ID	y	300	0	0x556526024270
ASSIGN	=	300	1
DECIMAL	1	300	2	1
SEMICOLON	;	300	3
IF	if	301	0
LPAREN	(	301	2
ID	y	301	3	0x556526024270
GEQUAL	>=	301	4
DECIMAL	15	301	6	15
RPAREN	)	301	8
LBRACE	{	301	9
IF	if	302	0
LPAREN	(	302	2
ID	x	302	3	0x556526024248
LESS	<	302	4
DECIMAL	0	302	5	0
RPAREN	)	302	6
LBRACE	{	302	7
ID	ans	303	0	0x5565260241f8
ASSIGN	=	303	3
HEXADECIMAL	0xffff	303	4	65535
SEMICOLON	;	303	10
RBRACE	}	304	0
ELSE	else	304	1
LBRACE	{	304	5
ID	ans	305	0	0x5565260241f8
ASSIGN	=	305	3
DECIMAL	0	305	4	0
SEMICOLON	;	305	5
RBRACE	}	306	0
RBRACE	}	307	0
ELSE	else	307	1
IF	if	307	5
LPAREN	(	307	7
ID	y	307	8	0x556526024270
GREATER	>	307	9
DECIMAL	0	307	10	0
RPAREN	)	307	11
LBRACE	{	307	12
IF	if	308	0
LPAREN	(	308	2
ID	x	308	3	0x556526024248
GREATER	>	308	4
HEXADECIMAL	0x7fff	308	5	32767
RPAREN	)	308	11
LBRACE	{	308	12
ID	x	309	0	0x556526024248
ASSIGN	=	309	1
ID	x	309	2	0x556526024248
DIV	/	309	3
ID	SHIFT_TABLE	309	4	0x5565260241a8
LBRACKET	[	309	15
ID	y	309	16	0x556526024270
RBRACKET	]	309	17
SEMICOLON	;	309	18
ID	ans	310	0	0x5565260241f8
ASSIGN	=	310	3
ID	x	310	4	0x556526024248
ADD	+	310	5
DECIMAL	65536	310	6	65536
SUB	-	310	11
ID	SHIFT_TABLE	310	12	0x5565260241a8
LBRACKET	[	310	23
DECIMAL	15	310	24	15
SUB	-	310	26
ID	y	310	27	0x556526024270
ADD	+	310	28
DECIMAL	1	310	29	1
RBRACKET	]	310	30
SEMICOLON	;	310	31
RBRACE	}	311	0
ELSE	else	311	1
LBRACE	{	311	5
ID	ans	312	0	0x5565260241f8
ASSIGN	=	312	3
ID	x	312	4	0x556526024248
DIV	/	312	5
ID	SHIFT_TABLE	312	6	0x5565260241a8
LBRACKET	[	312	17
ID	y	312	18	0x556526024270
RBRACKET	]	312	19
SEMICOLON	;	312	20
RBRACE	}	313	0
RBRACE	}	314	0
ELSE	else	314	1
LBRACE	{	314	5
ID	ans	315	0	0x5565260241f8
ASSIGN	=	315	3
ID	x	315	4	0x556526024248
SEMICOLON	;	315	5
RBRACE	}	316	0
ID	mr	317	0	0x556526024360
ASSIGN	=	317	2
ID	ans	317	3	0x5565260241f8
SEMICOLON	;	317	6
RBRACE	}	318	0
ID	ans	319	0	0x5565260241f8
ASSIGN	=	319	3
ID	mres	319	4	0x556526024388
SEMICOLON	;	319	8
RBRACE	}	320	0
ID	pl	321	0	0x5565260242c0
ASSIGN	=	321	2
ID	ans	321	3	0x5565260241f8
SEMICOLON	;	321	6
ID	x	322	0	0x556526024248
ASSIGN	=	322	1
ID	pr	322	2	0x5565260242e8
SEMICOLON	;	322	4
ID	y	323	0	0x556526024270
ASSIGN	=	323	1
DECIMAL	1	323	2	1
SEMICOLON	;	323	3
IF	if	324	0
LPAREN	(	324	2
ID	y	324	3	0x556526024270
GEQUAL	>=	324	4
DECIMAL	15	324	6	15
RPAREN	)	324	8
LBRACE	{	324	9
IF	if	325	0
LPAREN	(	325	2
ID	x	325	3	0x556526024248
LESS	<	325	4
DECIMAL	0	325	5	0
RPAREN	)	325	6
LBRACE	{	325	7
ID	ans	326	0	0x5565260241f8
ASSIGN	=	326	3
HEXADECIMAL	0xffff	326	4	65535
SEMICOLON	;	326	10
RBRACE	}	327	0
ELSE	else	327	1
LBRACE	{	327	5
ID	ans	328	0	0x5565260241f8
ASSIGN	=	328	3
DECIMAL	0	328	4	0
SEMICOLON	;	328	5
RBRACE	}	329	0
RBRACE	}	330	0
ELSE	else	330	1
IF	if	330	5
LPAREN	(	330	7
ID	y	330	8	0x556526024270
GREATER	>	330	9
DECIMAL	0	330	10	0
RPAREN	)	330	11
LBRACE	{	330	12
IF	if	331	0
LPAREN	(	331	2
ID	x	331	3	0x556526024248
GREATER	>	331	4
HEXADECIMAL	0x7fff	331	5	32767
RPAREN	)	331	11
LBRACE	{	331	12
ID	x	332	0	0x556526024248
ASSIGN	=	332	1
ID	x	332	2	0x556526024248
DIV	/	332	3
ID	SHIFT_TABLE	332	4	0x5565260241a8
LBRACKET	[	332	15
ID	y	332	16	0x556526024270
RBRACKET	]	332	17
SEMICOLON	;	332	18
ID	ans	333	0	0x5565260241f8
ASSIGN	=	333	3
ID	x	333	4	0x556526024248
ADD	+	333	5
DECIMAL	65536	333	6	65536
SUB	-	333	11
ID	SHIFT_TABLE	333	12	0x5565260241a8
LBRACKET	[	333	23
DECIMAL	15	333	24	15
SUB	-	333	26
ID	y	333	27	0x556526024270
ADD	+	333	28
DECIMAL	1	333	29	1
RBRACKET	]	333	30
SEMICOLON	;	333	31
RBRACE	}	334	0
ELSE	else	334	1
LBRACE	{	334	5
ID	ans	335	0	0x5565260241f8
ASSIGN	=	335	3
ID	x	335	4	0x556526024248
DIV	/	335	5
ID	SHIFT_TABLE	335	6	0x5565260241a8
LBRACKET	[	335	17
ID	y	335	18	0x556526024270
RBRACKET	]	335	19
SEMICOLON	;	335	20
RBRACE	}	336	0
RBRACE	}	337	0
ELSE	else	337	1
LBRACE	{	337	5
ID	ans	338	0	0x5565260241f8
ASSIGN	=	338	3
ID	x	338	4	0x556526024248
SEMICOLON	;	338	5
RBRACE	}	339	0
ID	pr	340	0	0x5565260242e8
ASSIGN	=	340	2
ID	ans	340	3	0x5565260241f8
SEMICOLON	;	340	6
RBRACE	}	341	0
ID	ans	342	0	0x5565260241f8
ASSIGN	=	342	3
ID	pres	342	4	0x556526024310
SEMICOLON	;	342	8
RBRACE	}	343	0
ID	putint	344	0	0x556526024428
LPAREN	(	344	6
ID	ans	344	7	0x5565260241f8
RPAREN	)	344	10
SEMICOLON	;	344	11
ID	putch	345	0	0x556526024450
LPAREN	(	345	5
DECIMAL	10	345	6	10
RPAREN	)	345	8
SEMICOLON	;	345	9
LBRACE	{	346	0
INT	int	347	0
ID	pl	347	3	0x5565260242c0
ASSIGN	=	347	5
DECIMAL	2	347	6	2
COMMA	,	347	7
ID	pr	347	8	0x5565260242e8
ASSIGN	=	347	10
DECIMAL	1	347	11	1
COMMA	,	347	12
ID	pres	347	13	0x556526024310
ASSIGN	=	347	17
DECIMAL	1	347	18	1
SEMICOLON	;	347	19
WHILE	while	348	0
LPAREN	(	348	5
ID	pr	348	6	0x5565260242e8
GREATER	>	348	8
DECIMAL	0	348	9	0
RPAREN	)	348	10
LBRACE	{	348	11
ID	ans	349	0	0x5565260241f8
ASSIGN	=	349	3
DECIMAL	0	349	4	0
SEMICOLON	;	349	5
ID	i	350	0	0x556526024220
ASSIGN	=	350	1
DECIMAL	0	350	2	0
SEMICOLON	;	350	3
ID	x	351	0	0x556526024248
ASSIGN	=	351	1
ID	pr	351	2	0x5565260242e8
SEMICOLON	;	351	4
ID	y	352	0	0x556526024270
ASSIGN	=	352	1
DECIMAL	1	352	2	1
SEMICOLON	;	352	3
WHILE	while	353	0
LPAREN	(	353	5
ID	i	353	6	0x556526024220
LESS	<	353	7
DECIMAL	16	353	8	16
RPAREN	)	353	10
LBRACE	{	353	11
IF	if	354	0
LPAREN	(	354	2
ID	x	354	3	0x556526024248
MOD	%	354	4
DECIMAL	2	354	5	2
AND	&&	354	6
ID	y	354	8	0x556526024270
MOD	%	354	9
DECIMAL	2	354	10	2
RPAREN	)	354	11
LBRACE	{	354	12
ID	ans	355	0	0x5565260241f8
ASSIGN	=	355	3
ID	ans	355	4	0x5565260241f8
ADD	+	355	7
DECIMAL	1	355	8	1
MUL	*	355	9
ID	SHIFT_TABLE	355	10	0x5565260241a8
LBRACKET	[	355	21
ID	i	355	22	0x556526024220
RBRACKET	]	355	23
SEMICOLON	;	355	24
RBRACE	}	356	0
ID	x	357	0	0x556526024248
ASSIGN	=	357	1
ID	x	357	2	0x556526024248
DIV	/	357	3
DECIMAL	2	357	4	2
SEMICOLON	;	357	5
ID	y	358	0	0x556526024270
ASSIGN	=	358	1
ID	y	358	2	0x556526024270
DIV	/	358	3
DECIMAL	2	358	4	2
SEMICOLON	;	358	5
ID	i	359	0	0x556526024220
ASSIGN	=	359	1
ID	i	359	2	0x556526024220
ADD	+	359	3
DECIMAL	1	359	4	1
SEMICOLON	;	359	5
RBRACE	}	360	0
IF	if	361	0
LPAREN	(	361	2
ID	ans	361	3	0x5565260241f8
RPAREN	)	361	6
LBRACE	{	361	7
LBRACE	{	362	0
INT	int	363	0
ID	ml	363	3	0x556526024338
ASSIGN	=	363	5
ID	pres	363	6	0x556526024310
COMMA	,	363	10
ID	mr	363	11	0x556526024360
ASSIGN	=	363	13
ID	pl	363	14	0x5565260242c0
COMMA	,	363	16
ID	mres	363	17	0x556526024388
ASSIGN	=	363	21
DECIMAL	0	363	22	0
SEMICOLON	;	363	23
WHILE	while	364	0
LPAREN	(	364	5
ID	mr	364	6	0x556526024360
RPAREN	)	364	8
LBRACE	{	364	9
ID	ans	365	0	0x5565260241f8
ASSIGN	=	365	3
DECIMAL	0	365	4	0
SEMICOLON	;	365	5
ID	i	366	0	0x556526024220
ASSIGN	=	366	1
DECIMAL	0	366	2	0
SEMICOLON	;	366	3
ID	x	367	0	0x556526024248
ASSIGN	=	367	1
ID	mr	367	2	0x556526024360
SEMICOLON	;	367	4
ID	y	368	0	0x556526024270
ASSIGN	=	368	1
DECIMAL	1	368	2	1
SEMICOLON	;	368	3
WHILE	while	369	0
LPAREN	(	369	5
ID	i	369	6	0x556526024220
LESS	<	369	7
DECIMAL	16	369	8	16
RPAREN	)	369	10
LBRACE	{	369	11
IF	if	370	0
LPAREN	(	370	2
ID	x	370	3	0x556526024248
MOD	%	370	4
DECIMAL	2	370	5	2
AND	&&	370	6
ID	y	370	8	0x556526024270
MOD	%	370	9
DECIMAL	2	370	10	2
RPAREN	)	370	11
LBRACE	{	370	12
ID	ans	371	0	0x5565260241f8
ASSIGN	=	371	3
ID	ans	371	4	0x5565260241f8
ADD	+	371	7
DECIMAL	1	371	8	1
MUL	*	371	9
ID	SHIFT_TABLE	371	10	0x5565260241a8
LBRACKET	[	371	21
ID	i	371	22	0x556526024220
RBRACKET	]	371	23
SEMICOLON	;	371	24
RBRACE	}	372	0
ID	x	373	0	0x556526024248
ASSIGN	=	373	1
ID	x	373	2	0x556526024248
DIV	/	373	3
DECIMAL	2	373	4	2
SEMICOLON	;	373	5
ID	y	374	0	0x556526024270
ASSIGN	=	374	1
ID	y	374	2	0x556526024270
DIV	/	374	3
DECIMAL	2	374	4	2
SEMICOLON	;	374	5
ID	i	375	0	0x556526024220
ASSIGN	=	375	1
ID	i	375	2	0x556526024220
ADD	+	375	3
DECIMAL	1	375	4	1
SEMICOLON	;	375	5
RBRACE	}	376	0
IF	if	377	0
LPAREN	(	377	2
ID	ans	377	3	0x5565260241f8
RPAREN	)	377	6
LBRACE	{	377	7
LBRACE	{	378	0
INT	int	379	0
ID	al	379	3	0x5565260243b0
ASSIGN	=	379	5
ID	mres	379	6	0x556526024388
COMMA	,	379	10
ID	c	379	11	0x5565260243d8
ASSIGN	=	379	12
ID	ml	379	13	0x556526024338
COMMA	,	379	15
ID	sum	379	16	0x556526024400
SEMICOLON	;	379	19
WHILE	while	380	0
LPAREN	(	380	5
ID	c	380	6	0x5565260243d8
RPAREN	)	380	7
LBRACE	{	380	8
ID	ans	381	0	0x5565260241f8
ASSIGN	=	381	3
DECIMAL	0	381	4	0
SEMICOLON	;	381	5
ID	i	382	0	0x556526024220
ASSIGN	=	382	1
DECIMAL	0	382	2	0
SEMICOLON	;	382	3
ID	x	383	0	0x556526024248
ASSIGN	=	383	1
ID	al	383	2	0x5565260243b0
SEMICOLON	;	383	4
ID	y	384	0	0x556526024270
ASSIGN	=	384	1
ID	c	384	2	0x5565260243d8
SEMICOLON	;	384	3
WHILE	while	385	0
LPAREN	(	385	5
ID	i	385	6	0x556526024220
LESS	<	385	7
DECIMAL	16	385	8	16
RPAREN	)	385	10
LBRACE	{	385	11
IF	if	386	0
LPAREN	(	386	2
ID	x	386	3	0x556526024248
MOD	%	386	4
DECIMAL	2	386	5	2
RPAREN	)	386	6
LBRACE	{	386	7
IF	if	387	0
LPAREN	(	387	2
ID	y	387	3	0x556526024270
MOD	%	387	4
DECIMAL	2	387	5	2
EQUAL	==	387	6
DECIMAL	0	387	8	0
RPAREN	)	387	9
LBRACE	{	387	10
ID	ans	388	0	0x5565260241f8
ASSIGN	=	388	3
ID	ans	388	4	0x5565260241f8
ADD	+	388	7
DECIMAL	1	388	8	1
MUL	*	388	9
ID	SHIFT_TABLE	388	10	0x5565260241a8
LBRACKET	[	388	21
ID	i	388	22	0x556526024220
RBRACKET	]	388	23
SEMICOLON	;	388	24
RBRACE	}	389	0
RBRACE	}	390	0
ELSE	else	390	1
IF	if	390	5
LPAREN	(	390	7
ID	y	390	8	0x556526024270
MOD	%	390	9
DECIMAL	2	390	10	2
RPAREN	)	390	11
LBRACE	{	390	12
ID	ans	391	0	0x5565260241f8
ASSIGN	=	391	3
ID	ans	391	4	0x5565260241f8
ADD	+	391	7
DECIMAL	1	391	8	1
MUL	*	391	9
ID	SHIFT_TABLE	391	10	0x5565260241a8
LBRACKET	[	391	21
ID	i	391	22	0x556526024220
RBRACKET	]	391	23
SEMICOLON	;	391	24
RBRACE	}	392	0
ID	x	393	0	0x556526024248
ASSIGN	=	393	1
ID	x	393	2	0x556526024248
DIV	/	393	3
DECIMAL	2	393	4	2
SEMICOLON	;	393	5
ID	y	394	0	0x556526024270
ASSIGN	=	394	1
ID	y	394	2	0x556526024270
DIV	/	394	3
DECIMAL	2	394	4	2
SEMICOLON	;	394	5
ID	i	395	0	0x556526024220
ASSIGN	=	395	1
ID	i	395	2	0x556526024220
ADD	+	395	3
DECIMAL	1	395	4	1
SEMICOLON	;	395	5
RBRACE	}	396	0
ID	sum	397	0	0x556526024400
ASSIGN	=	397	3
ID	ans	397	4	0x5565260241f8
SEMICOLON	;	397	7
ID	ans	398	0	0x5565260241f8
ASSIGN	=	398	3
DECIMAL	0	398	4	0
SEMICOLON	;	398	5
ID	i	399	0	0x556526024220
ASSIGN	=	399	1
DECIMAL	0	399	2	0
SEMICOLON	;	399	3
ID	x	400	0	0x556526024248
ASSIGN	=	400	1
ID	al	400	2	0x5565260243b0
SEMICOLON	;	400	4
ID	y	401	0	0x556526024270
ASSIGN	=	401	1
ID	c	401	2	0x5565260243d8
SEMICOLON	;	401	3
WHILE	while	402	0
LPAREN	(	402	5
ID	i	402	6	0x556526024220
LESS	<	402	7
DECIMAL	16	402	8	16
RPAREN	)	402	10
LBRACE	{	402	11
IF	if	403	0
LPAREN	(	403	2
ID	x	403	3	0x556526024248
MOD	%	403	4
DECIMAL	2	403	5	2
AND	&&	403	6
ID	y	403	8	0x556526024270
MOD	%	403	9
DECIMAL	2	403	10	2
RPAREN	)	403	11
LBRACE	{	403	12
ID	ans	404	0	0x5565260241f8
ASSIGN	=	404	3
ID	ans	404	4	0x5565260241f8
ADD	+	404	7
DECIMAL	1	404	8	1
MUL	*	404	9
ID	SHIFT_TABLE	404	10	0x5565260241a8
LBRACKET	[	404	21
ID	i	404	22	0x556526024220
RBRACKET	]	404	23
SEMICOLON	;	404	24
RBRACE	}	405	0
ID	x	406	0	0x556526024248
ASSIGN	=	406	1
ID	x	406	2	0x556526024248
DIV	/	406	3
DECIMAL	2	406	4	2
SEMICOLON	;	406	5
ID	y	407	0	0x556526024270
ASSIGN	=	407	1
ID	y	407	2	0x556526024270
DIV	/	407	3
DECIMAL	2	407	4	2
SEMICOLON	;	407	5
ID	i	408	0	0x556526024220
ASSIGN	=	408	1
ID	i	408	2	0x556526024220
ADD	+	408	3
DECIMAL	1	408	4	1
SEMICOLON	;	408	5
RBRACE	}	409	0
ID	c	410	0	0x5565260243d8
ASSIGN	=	410	1
ID	ans	410	2	0x5565260241f8
SEMICOLON	;	410	5
IF	if	411	0
LPAREN	(	411	2
LPAREN	(	411	3
DECIMAL	1	411	4	1
RPAREN	)	411	5
GREATER	>	411	6
DECIMAL	15	411	7	15
RPAREN	)	411	9
LBRACE	{	411	10
ID	ans	412	0	0x5565260241f8
ASSIGN	=	412	3
DECIMAL	0	412	4	0
SEMICOLON	;	412	5
RBRACE	}	413	0
ELSE	else	413	1
LBRACE	{	413	5
ID	ans	414	0	0x5565260241f8
ASSIGN	=	414	3
DECIMAL	0	414	4	0
SEMICOLON	;	414	5
ID	i	415	0	0x556526024220
ASSIGN	=	415	1
DECIMAL	0	415	2	0
SEMICOLON	;	415	3
ID	x	416	0	0x556526024248
ASSIGN	=	416	1
LPAREN	(	416	2
ID	c	416	3	0x5565260243d8
RPAREN	)	416	4
MUL	*	416	5
ID	SHIFT_TABLE	416	6	0x5565260241a8
LBRACKET	[	416	17
DECIMAL	1	416	18	1
RBRACKET	]	416	19
SEMICOLON	;	416	20
ID	y	417	0	0x556526024270
ASSIGN	=	417	1
HEXADECIMAL	0xffff	417	2	65535
SEMICOLON	;	417	8
WHILE	while	418	0
LPAREN	(	418	5
ID	i	418	6	0x556526024220
LESS	<	418	7
DECIMAL	16	418	8	16
RPAREN	)	418	10
LBRACE	{	418	11
IF	if	419	0
LPAREN	(	419	2
ID	x	419	3	0x556526024248
MOD	%	419	4
DECIMAL	2	419	5	2
AND	&&	419	6
ID	y	419	8	0x556526024270
MOD	%	419	9
DECIMAL	2	419	10	2
RPAREN	)	419	11
LBRACE	{	419	12
ID	ans	420	0	0x5565260241f8
ASSIGN	=	420	3
ID	ans	420	4	0x5565260241f8
ADD	+	420	7
DECIMAL	1	420	8	1
MUL	*	420	9
ID	SHIFT_TABLE	420	10	0x5565260241a8
LBRACKET	[	420	21
ID	i	420	22	0x556526024220
RBRACKET	]	420	23
SEMICOLON	;	420	24
RBRACE	}	421	0
ID	x	422	0	0x556526024248
ASSIGN	=	422	1
ID	x	422	2	0x556526024248
DIV	/	422	3
DECIMAL	2	422	4	2
SEMICOLON	;	422	5
ID	y	423	0	0x556526024270
ASSIGN	=	423	1
ID	y	423	2	0x556526024270
DIV	/	423	3
DECIMAL	2	423	4	2
SEMICOLON	;	423	5
ID	i	424	0	0x556526024220
ASSIGN	=	424	1
ID	i	424	2	0x556526024220
ADD	+	424	3
DECIMAL	1	424	4	1
SEMICOLON	;	424	5
RBRACE	}	425	0
RBRACE	}	426	0
ID	c	427	0	0x5565260243d8
ASSIGN	=	427	1
ID	ans	427	2	0x5565260241f8
SEMICOLON	;	427	5
ID	al	428	0	0x5565260243b0
ASSIGN	=	428	2
ID	sum	428	3	0x556526024400
SEMICOLON	;	428	6
RBRACE	}	429	0
ID	ans	430	0	0x5565260241f8
ASSIGN	=	430	3
ID	al	430	4	0x5565260243b0
SEMICOLON	;	430	6
RBRACE	}	431	0
ID	mres	432	0	0x556526024388
ASSIGN	=	432	4
ID	ans	432	5	0x5565260241f8
SEMICOLON	;	432	8
RBRACE	}	433	0
LBRACE	{	434	0
INT	int	435	0
ID	al	435	3	0x5565260243b0
ASSIGN	=	435	5
ID	ml	435	6	0x556526024338
COMMA	,	435	8
ID	c	435	9	0x5565260243d8
ASSIGN	=	435	10
ID	ml	435	11	0x556526024338
COMMA	,	435	13
ID	sum	435	14	0x556526024400
SEMICOLON	;	435	17
WHILE	while	436	0
LPAREN	(	436	5
ID	c	436	6	0x5565260243d8
RPAREN	)	436	7
LBRACE	{	436	8
ID	ans	437	0	0x5565260241f8
ASSIGN	=	437	3
DECIMAL	0	437	4	0
SEMICOLON	;	437	5
ID	i	438	0	0x556526024220
ASSIGN	=	438	1
DECIMAL	0	438	2	0
SEMICOLON	;	438	3
ID	x	439	0	0x556526024248
ASSIGN	=	439	1
ID	al	439	2	0x5565260243b0
SEMICOLON	;	439	4
ID	y	440	0	0x556526024270
ASSIGN	=	440	1
ID	c	440	2	0x5565260243d8
SEMICOLON	;	440	3
WHILE	while	441	0
LPAREN	(	441	5
ID	i	441	6	0x556526024220
LESS	<	441	7
DECIMAL	16	441	8	16
RPAREN	)	441	10
LBRACE	{	441	11
IF	if	442	0
LPAREN	(	442	2
ID	x	442	3	0x556526024248
MOD	%	442	4
DECIMAL	2	442	5	2
RPAREN	)	442	6
LBRACE	{	442	7
IF	if	443	0
LPAREN	(	443	2
ID	y	443	3	0x556526024270
MOD	%	443	4
DECIMAL	2	443	5	2
EQUAL	==	443	6
DECIMAL	0	443	8	0
RPAREN	)	443	9
LBRACE	{	443	10
ID	ans	444	0	0x5565260241f8
ASSIGN	=	444	3
ID	ans	444	4	0x5565260241f8
ADD	+	444	7
DECIMAL	1	444	8	1
MUL	*	444	9
ID	SHIFT_TABLE	444	10	0x5565260241a8
LBRACKET	[	444	21
ID	i	444	22	0x556526024220
RBRACKET	]	444	23
SEMICOLON	;	444	24
RBRACE	}	445	0
RBRACE	}	446	0
ELSE	else	446	1
IF	if	446	5
LPAREN	(	446	7
ID	y	446	8	0x556526024270
MOD	%	446	9
DECIMAL	2	446	10	2
RPAREN	)	446	11
LBRACE	{	446	12
ID	ans	447	0	0x5565260241f8
ASSIGN	=	447	3
ID	ans	447	4	0x5565260241f8
ADD	+	447	7
DECIMAL	1	447	8	1
MUL	*	447	9
ID	SHIFT_TABLE	447	10	0x5565260241a8
LBRACKET	[	447	21
ID	i	447	22	0x556526024220
RBRACKET	]	447	23
SEMICOLON	;	447	24
RBRACE	}	448	0
ID	x	449	0	0x556526024248
ASSIGN	=	449	1
ID	x	449	2	0x556526024248
DIV	/	449	3
DECIMAL	2	449	4	2
SEMICOLON	;	449	5
ID	y	450	0	0x556526024270
ASSIGN	=	450	1
ID	y	450	2	0x556526024270
DIV	/	450	3
DECIMAL	2	450	4	2
SEMICOLON	;	450	5
ID	i	451	0	0x556526024220
ASSIGN	=	451	1
ID	i	451	2	0x556526024220
ADD	+	451	3
DECIMAL	1	451	4	1
SEMICOLON	;	451	5
RBRACE	}	452	0
ID	sum	453	0	0x556526024400
ASSIGN	=	453	3
ID	ans	453	4	0x5565260241f8
SEMICOLON	;	453	7
ID	ans	454	0	0x5565260241f8
ASSIGN	=	454	3
DECIMAL	0	454	4	0
SEMICOLON	;	454	5
ID	i	455	0	0x556526024220
ASSIGN	=	455	1
DECIMAL	0	455	2	0
SEMICOLON	;	455	3
ID	x	456	0	0x556526024248
ASSIGN	=	456	1
ID	al	456	2	0x5565260243b0
SEMICOLON	;	456	4
ID	y	457	0	0x556526024270
ASSIGN	=	457	1
ID	c	457	2	0x5565260243d8
SEMICOLON	;	457	3
WHILE	while	458	0
LPAREN	(	458	5
ID	i	458	6	0x556526024220
LESS	<	458	7
DECIMAL	16	458	8	16
RPAREN	)	458	10
LBRACE	{	458	11
IF	if	459	0
LPAREN	(	459	2
ID	x	459	3	0x556526024248
MOD	%	459	4
DECIMAL	2	459	5	2
AND	&&	459	6
ID	y	459	8	0x556526024270
MOD	%	459	9
DECIMAL	2	459	10	2
RPAREN	)	459	11
LBRACE	{	459	12
ID	ans	460	0	0x5565260241f8
ASSIGN	=	460	3
ID	ans	460	4	0x5565260241f8
ADD	+	460	7
DECIMAL	1	460	8	1
MUL	*	460	9
ID	SHIFT_TABLE	460	10	0x5565260241a8
LBRACKET	[	460	21
ID	i	460	22	0x556526024220
RBRACKET	]	460	23
SEMICOLON	;	460	24
RBRACE	}	461	0
ID	x	462	0	0x556526024248
ASSIGN	=	462	1
ID	x	462	2	0x556526024248
DIV	/	462	3
DECIMAL	2	462	4	2
SEMICOLON	;	462	5
ID	y	463	0	0x556526024270
ASSIGN	=	463	1
ID	y	463	2	0x556526024270
DIV	/	463	3
DECIMAL	2	463	4	2
SEMICOLON	;	463	5
ID	i	464	0	0x556526024220
ASSIGN	=	464	1
ID	i	464	2	0x556526024220
ADD	+	464	3
DECIMAL	1	464	4	1
SEMICOLON	;	464	5
RBRACE	}	465	0
ID	c	466	0	0x5565260243d8
ASSIGN	=	466	1
ID	ans	466	2	0x5565260241f8
SEMICOLON	;	466	5
IF	if	467	0
LPAREN	(	467	2
LPAREN	(	467	3
DECIMAL	1	467	4	1
RPAREN	)	467	5
GREATER	>	467	6
DECIMAL	15	467	7	15
RPAREN	)	467	9
LBRACE	{	467	10
ID	ans	468	0	0x5565260241f8
ASSIGN	=	468	3
DECIMAL	0	468	4	0
SEMICOLON	;	468	5
RBRACE	}	469	0
ELSE	else	469	1
LBRACE	{	469	5
ID	ans	470	0	0x5565260241f8
ASSIGN	=	470	3
DECIMAL	0	470	4	0
SEMICOLON	;	470	5
ID	i	471	0	0x556526024220
ASSIGN	=	471	1
DECIMAL	0	471	2	0
SEMICOLON	;	471	3
ID	x	472	0	0x556526024248
ASSIGN	=	472	1
LPAREN	(	472	2
ID	c	472	3	0x5565260243d8
RPAREN	)	472	4
MUL	*	472	5
ID	SHIFT_TABLE	472	6	0x5565260241a8
LBRACKET	[	472	17
DECIMAL	1	472	18	1
RBRACKET	]	472	19
SEMICOLON	;	472	20
ID	y	473	0	0x556526024270
ASSIGN	=	473	1
HEXADECIMAL	0xffff	473	2	65535
SEMICOLON	;	473	8
WHILE	while	474	0
LPAREN	(	474	5
ID	i	474	6	0x556526024220
LESS	<	474	7
DECIMAL	16	474	8	16
RPAREN	)	474	10
LBRACE	{	474	11
IF	if	475	0
LPAREN	(	475	2
ID	x	475	3	0x556526024248
MOD	%	475	4
DECIMAL	2	475	5	2
AND	&&	475	6
ID	y	475	8	0x556526024270
MOD	%	475	9
DECIMAL	2	475	10	2
RPAREN	)	475	11
LBRACE	{	475	12
ID	ans	476	0	0x5565260241f8
ASSIGN	=	476	3
ID	ans	476	4	0x5565260241f8
ADD	+	476	7
DECIMAL	1	476	8	1
MUL	*	476	9
ID	SHIFT_TABLE	476	10	0x5565260241a8
LBRACKET	[	476	21
ID	i	476	22	0x556526024220
RBRACKET	]	476	23
SEMICOLON	;	476	24
RBRACE	}	477	0
ID	x	478	0	0x556526024248
ASSIGN	=	478	1
ID	x	478	2	0x556526024248
DIV	/	478	3
DECIMAL	2	478	4	2
SEMICOLON	;	478	5
ID	y	479	0	0x556526024270
ASSIGN	=	479	1
ID	y	479	2	0x556526024270
DIV	/	479	3
DECIMAL	2	479	4	2
SEMICOLON	;	479	5
ID	i	480	0	0x556526024220
ASSIGN	=	480	1
ID	i	480	2	0x556526024220
ADD	+	480	3
DECIMAL	1	480	4	1
SEMICOLON	;	480	5
RBRACE	}	481	0
RBRACE	}	482	0
ID	c	483	0	0x5565260243d8
ASSIGN	=	483	1
ID	ans	483	2	0x5565260241f8
SEMICOLON	;	483	5
ID	al	484	0	0x5565260243b0
ASSIGN	=	484	2
ID	sum	484	3	0x556526024400
SEMICOLON	;	484	6
RBRACE	}	485	0
ID	ans	486	0	0x5565260241f8
ASSIGN	=	486	3
ID	al	486	4	0x5565260243b0
SEMICOLON	;	486	6
RBRACE	}	487	0
ID	ml	488	0	0x556526024338
ASSIGN	=	488	2
ID	ans	488	3	0x5565260241f8
SEMICOLON	;	488	6
ID	x	489	0	0x556526024248
ASSIGN	=	489	1
ID	mr	489	2	0x556526024360
SEMICOLON	;	489	4
ID	y	490	0	0x556526024270
ASSIGN	=	490	1
DECIMAL	1	490	2	1
SEMICOLON	;	490	3
IF	if	491	0
LPAREN	(	491	2
ID	y	491	3	0x556526024270
GEQUAL	>=	491	4
DECIMAL	15	491	6	15
RPAREN	)	491	8
LBRACE	{	491	9
IF	if	492	0
LPAREN	(	492	2
ID	x	492	3	0x556526024248
LESS	<	492	4
DECIMAL	0	492	5	0
RPAREN	)	492	6
LBRACE	{	492	7
ID	ans	493	0	0x5565260241f8
ASSIGN	=	493	3
HEXADECIMAL	0xffff	493	4	65535
SEMICOLON	;	493	10
RBRACE	}	494	0
ELSE	else	494	1
LBRACE	{	494	5
ID	ans	495	0	0x5565260241f8
ASSIGN	=	495	3
DECIMAL	0	495	4	0
SEMICOLON	;	495	5
RBRACE	}	496	0
RBRACE	}	497	0
ELSE	else	497	1
IF	if	497	5
LPAREN	(	497	7
ID	y	497	8	0x556526024270
GREATER	>	497	9
DECIMAL	0	497	10	0
RPAREN	)	497	11
LBRACE	{	497	12
IF	if	498	0
LPAREN	(	498	2
ID	x	498	3	0x556526024248
GREATER	>	498	4
HEXADECIMAL	0x7fff	498	5	32767
RPAREN	)	498	11
LBRACE	{	498	12
ID	x	499	0	0x556526024248
ASSIGN	=	499	1
ID	x	499	2	0x556526024248
DIV	/	499	3
ID	SHIFT_TABLE	499	4	0x5565260241a8
LBRACKET	[	499	15
ID	y	499	16	0x556526024270
RBRACKET	]	499	17
SEMICOLON	;	499	18
ID	ans	500	0	0x5565260241f8
ASSIGN	=	500	3
ID	x	500	4	0x556526024248
ADD	+	500	5
DECIMAL	65536	500	6	65536
SUB	-	500	11
ID	SHIFT_TABLE	500	12	0x5565260241a8
LBRACKET	[	500	23
DECIMAL	15	500	24	15
SUB	-	500	26
ID	y	500	27	0x556526024270
ADD	+	500	28
DECIMAL	1	500	29	1
RBRACKET	]	500	30
SEMICOLON	;	500	31
RBRACE	}	501	0
ELSE	else	501	1
LBRACE	{	501	5
ID	ans	502	0	0x5565260241f8
ASSIGN	=	502	3
ID	x	502	4	0x556526024248
DIV	/	502	5
ID	SHIFT_TABLE	502	6	0x5565260241a8
LBRACKET	[	502	17
ID	y	502	18	0x556526024270
RBRACKET	]	502	19
SEMICOLON	;	502	20
RBRACE	}	503	0
RBRACE	}	504	0
ELSE	else	504	1
LBRACE	{	504	5
ID	ans	505	0	0x5565260241f8
ASSIGN	=	505	3
ID	x	505	4	0x556526024248
SEMICOLON	;	505	5
RBRACE	}	506	0
ID	mr	507	0	0x556526024360
ASSIGN	=	507	2
ID	ans	507	3	0x5565260241f8
SEMICOLON	;	507	6
RBRACE	}	508	0
ID	ans	509	0	0x5565260241f8
ASSIGN	=	509	3
ID	mres	509	4	0x556526024388
SEMICOLON	;	509	8
RBRACE	}	510	0
ID	pres	511	0	0x556526024310
ASSIGN	=	511	4
ID	ans	511	5	0x5565260241f8
SEMICOLON	;	511	8
RBRACE	}	512	0
LBRACE	{	513	0
INT	int	514	0
ID	ml	514	3	0x556526024338
ASSIGN	=	514	5
ID	pl	514	6	0x5565260242c0
COMMA	,	514	8
ID	mr	514	9	0x556526024360
ASSIGN	=	514	11
ID	pl	514	12	0x5565260242c0
COMMA	,	514	14
ID	mres	514	15	0x556526024388
ASSIGN	=	514	19
DECIMAL	0	514	20	0
SEMICOLON	;	514	21
WHILE	while	515	0
LPAREN	(	515	5
ID	mr	515	6	0x556526024360
RPAREN	)	515	8
LBRACE	{	515	9
ID	ans	516	0	0x5565260241f8
ASSIGN	=	516	3
DECIMAL	0	516	4	0
SEMICOLON	;	516	5
ID	i	517	0	0x556526024220
ASSIGN	=	517	1
DECIMAL	0	517	2	0
SEMICOLON	;	517	3
ID	x	518	0	0x556526024248
ASSIGN	=	518	1
ID	mr	518	2	0x556526024360
SEMICOLON	;	518	4
ID	y	519	0	0x556526024270
ASSIGN	=	519	1
DECIMAL	1	519	2	1
SEMICOLON	;	519	3
WHILE	while	520	0
LPAREN	(	520	5
ID	i	520	6	0x556526024220
LESS	<	520	7
DECIMAL	16	520	8	16
RPAREN	)	520	10
LBRACE	{	520	11
IF	if	521	0
LPAREN	(	521	2
ID	x	521	3	0x556526024248
MOD	%	521	4
DECIMAL	2	521	5	2
AND	&&	521	6
ID	y	521	8	0x556526024270
MOD	%	521	9
DECIMAL	2	521	10	2
RPAREN	)	521	11
LBRACE	{	521	12
ID	ans	522	0	0x5565260241f8
ASSIGN	=	522	3
ID	ans	522	4	0x5565260241f8
ADD	+	522	7
DECIMAL	1	522	8	1
MUL	*	522	9
ID	SHIFT_TABLE	522	10	0x5565260241a8
LBRACKET	[	522	21
ID	i	522	22	0x556526024220
RBRACKET	]	522	23
SEMICOLON	;	522	24
RBRACE	}	523	0
ID	x	524	0	0x556526024248
ASSIGN	=	524	1
ID	x	524	2	0x556526024248
DIV	/	524	3
DECIMAL	2	524	4	2
SEMICOLON	;	524	5
ID	y	525	0	0x556526024270
ASSIGN	=	525	1
ID	y	525	2	0x556526024270
DIV	/	525	3
DECIMAL	2	525	4	2
SEMICOLON	;	525	5
ID	i	526	0	0x556526024220
ASSIGN	=	526	1
ID	i	526	2	0x556526024220
ADD	+	526	3
DECIMAL	1	526	4	1
SEMICOLON	;	526	5
RBRACE	}	527	0
IF	if	528	0
LPAREN	(	528	2
ID	ans	528	3	0x5565260241f8
RPAREN	)	528	6
LBRACE	{	528	7
LBRACE	{	529	0
INT	int	530	0
ID	al	530	3	0x5565260243b0
ASSIGN	=	530	5
ID	mres	530	6	0x556526024388
COMMA	,	530	10
ID	c	530	11	0x5565260243d8
ASSIGN	=	530	12
ID	ml	530	13	0x556526024338
COMMA	,	530	15
ID	sum	530	16	0x556526024400
SEMICOLON	;	530	19
WHILE	while	531	0
LPAREN	(	531	5
ID	c	531	6	0x5565260243d8
RPAREN	)	531	7
LBRACE	{	531	8
ID	ans	532	0	0x5565260241f8
ASSIGN	=	532	3
DECIMAL	0	532	4	0
SEMICOLON	;	532	5
ID	i	533	0	0x556526024220
ASSIGN	=	533	1
DECIMAL	0	533	2	0
SEMICOLON	;	533	3
ID	x	534	0	0x556526024248
ASSIGN	=	534	1
ID	al	534	2	0x5565260243b0
SEMICOLON	;	534	4
ID	y	535	0	0x556526024270
ASSIGN	=	535	1
ID	c	535	2	0x5565260243d8
SEMICOLON	;	535	3
WHILE	while	536	0
LPAREN	(	536	5
ID	i	536	6	0x556526024220
LESS	<	536	7
DECIMAL	16	536	8	16
RPAREN	)	536	10
LBRACE	{	536	11
IF	if	537	0
LPAREN	(	537	2
ID	x	537	3	0x556526024248
MOD	%	537	4
DECIMAL	2	537	5	2
RPAREN	)	537	6
LBRACE	{	537	7
IF	if	538	0
LPAREN	(	538	2
ID	y	538	3	0x556526024270
MOD	%	538	4
DECIMAL	2	538	5	2
EQUAL	==	538	6
DECIMAL	0	538	8	0
RPAREN	)	538	9
LBRACE	{	538	10
ID	ans	539	0	0x5565260241f8
ASSIGN	=	539	3
ID	ans	539	4	0x5565260241f8
ADD	+	539	7
DECIMAL	1	539	8	1
MUL	*	539	9
ID	SHIFT_TABLE	539	10	0x5565260241a8
LBRACKET	[	539	21
ID	i	539	22	0x556526024220
RBRACKET	]	539	23
SEMICOLON	;	539	24
RBRACE	}	540	0
RBRACE	}	541	0
ELSE	else	541	1
IF	if	541	5
LPAREN	(	541	7
ID	y	541	8	0x556526024270
MOD	%	541	9
DECIMAL	2	541	10	2
RPAREN	)	541	11
LBRACE	{	541	12
ID	ans	542	0	0x5565260241f8
ASSIGN	=	542	3
ID	ans	542	4	0x5565260241f8
ADD	+	542	7
DECIMAL	1	542	8	1
MUL	*	542	9
ID	SHIFT_TABLE	542	10	0x5565260241a8
LBRACKET	[	542	21
ID	i	542	22	0x556526024220
RBRACKET	]	542	23
SEMICOLON	;	542	24
RBRACE	}	543	0
ID	x	544	0	0x556526024248
ASSIGN	=	544	1
ID	x	544	2	0x556526024248
DIV	/	544	3
DECIMAL	2	544	4	2
SEMICOLON	;	544	5
ID	y	545	0	0x556526024270
ASSIGN	=	545	1
ID	y	545	2	0x556526024270
DIV	/	545	3
DECIMAL	2	545	4	2
SEMICOLON	;	545	5
ID	i	546	0	0x556526024220
ASSIGN	=	546	1
ID	i	546	2	0x556526024220
ADD	+	546	3
DECIMAL	1	546	4	1
SEMICOLON	;	546	5
RBRACE	}	547	0
ID	sum	548	0	0x556526024400
ASSIGN	=	548	3
ID	ans	548	4	0x5565260241f8
SEMICOLON	;	548	7
ID	ans	549	0	0x5565260241f8
ASSIGN	=	549	3
DECIMAL	0	549	4	0
SEMICOLON	;	549	5
ID	i	550	0	0x556526024220
ASSIGN	=	550	1
DECIMAL	0	550	2	0
SEMICOLON	;	550	3
ID	x	551	0	0x556526024248
ASSIGN	=	551	1
ID	al	551	2	0x5565260243b0
SEMICOLON	;	551	4
ID	y	552	0	0x556526024270
ASSIGN	=	552	1
ID	c	552	2	0x5565260243d8
SEMICOLON	;	552	3
WHILE	while	553	0
LPAREN	(	553	5
ID	i	553	6	0x556526024220
LESS	<	553	7
DECIMAL	16	553	8	16
RPAREN	)	553	10
LBRACE	{	553	11
IF	if	554	0
LPAREN	(	554	2
ID	x	554	3	0x556526024248
MOD	%	554	4
DECIMAL	2	554	5	2
AND	&&	554	6
ID	y	554	8	0x556526024270
MOD	%	554	9
DECIMAL	2	554	10	2
RPAREN	)	554	11
LBRACE	{	554	12
ID	ans	555	0	0x5565260241f8
ASSIGN	=	555	3
ID	ans	555	4	0x5565260241f8
ADD	+	555	7
DECIMAL	1	555	8	1
MUL	*	555	9
ID	SHIFT_TABLE	555	10	0x5565260241a8
LBRACKET	[	555	21
ID	i	555	22	0x556526024220
RBRACKET	]	555	23
SEMICOLON	;	555	24
RBRACE	}	556	0
ID	x	557	0	0x556526024248
ASSIGN	=	557	1
ID	x	557	2	0x556526024248
DIV	/	557	3
DECIMAL	2	557	4	2
SEMICOLON	;	557	5
ID	y	558	0	0x556526024270
ASSIGN	=	558	1
ID	y	558	2	0x556526024270
DIV	/	558	3
DECIMAL	2	558	4	2
SEMICOLON	;	558	5
ID	i	559	0	0x556526024220
ASSIGN	=	559	1
ID	i	559	2	0x556526024220
ADD	+	559	3
DECIMAL	1	559	4	1
SEMICOLON	;	559	5
RBRACE	}	560	0
ID	c	561	0	0x5565260243d8
ASSIGN	=	561	1
ID	ans	561	2	0x5565260241f8
SEMICOLON	;	561	5
IF	if	562	0
LPAREN	(	562	2
LPAREN	(	562	3
DECIMAL	1	562	4	1
RPAREN	)	562	5
GREATER	>	562	6
DECIMAL	15	562	7	15
RPAREN	)	562	9
LBRACE	{	562	10
ID	ans	563	0	0x5565260241f8
ASSIGN	=	563	3
DECIMAL	0	563	4	0
SEMICOLON	;	563	5
RBRACE	}	564	0
ELSE	else	564	1
LBRACE	{	564	5
ID	ans	565	0	0x5565260241f8
ASSIGN	=	565	3
DECIMAL	0	565	4	0
SEMICOLON	;	565	5
ID	i	566	0	0x556526024220
ASSIGN	=	566	1
DECIMAL	0	566	2	0
SEMICOLON	;	566	3
ID	x	567	0	0x556526024248
ASSIGN	=	567	1
LPAREN	(	567	2
ID	c	567	3	0x5565260243d8
RPAREN	)	567	4
MUL	*	567	5
ID	SHIFT_TABLE	567	6	0x5565260241a8
LBRACKET	[	567	17
DECIMAL	1	567	18	1
RBRACKET	]	567	19
SEMICOLON	;	567	20
ID	y	568	0	0x556526024270
ASSIGN	=	568	1
HEXADECIMAL	0xffff	568	2	65535
SEMICOLON	;	568	8
WHILE	while	569	0
LPAREN	(	569	5
ID	i	569	6	0x556526024220
LESS	<	569	7
DECIMAL	16	569	8	16
RPAREN	)	569	10
LBRACE	{	569	11
IF	if	570	0
LPAREN	(	570	2
ID	x	570	3	0x556526024248
MOD	%	570	4
DECIMAL	2	570	5	2
AND	&&	570	6
ID	y	570	8	0x556526024270
MOD	%	570	9
DECIMAL	2	570	10	2
RPAREN	)	570	11
LBRACE	{	570	12
ID	ans	571	0	0x5565260241f8
ASSIGN	=	571	3
ID	ans	571	4	0x5565260241f8
ADD	+	571	7
DECIMAL	1	571	8	1
MUL	*	571	9
ID	SHIFT_TABLE	571	10	0x5565260241a8
LBRACKET	[	571	21
ID	i	571	22	0x556526024220
RBRACKET	]	571	23
SEMICOLON	;	571	24
RBRACE	}	572	0
ID	x	573	0	0x556526024248
ASSIGN	=	573	1
ID	x	573	2	0x556526024248
DIV	/	573	3
DECIMAL	2	573	4	2
SEMICOLON	;	573	5
ID	y	574	0	0x556526024270
ASSIGN	=	574	1
ID	y	574	2	0x556526024270
DIV	/	574	3
DECIMAL	2	574	4	2
SEMICOLON	;	574	5
ID	i	575	0	0x556526024220
ASSIGN	=	575	1
ID	i	575	2	0x556526024220
ADD	+	575	3
DECIMAL	1	575	4	1
SEMICOLON	;	575	5
RBRACE	}	576	0
RBRACE	}	577	0
ID	c	578	0	0x5565260243d8
ASSIGN	=	578	1
ID	ans	578	2	0x5565260241f8
SEMICOLON	;	578	5
ID	al	579	0	0x5565260243b0
ASSIGN	=	579	2
ID	sum	579	3	0x556526024400
SEMICOLON	;	579	6
RBRACE	}	580	0
ID	ans	581	0	0x5565260241f8
ASSIGN	=	581	3
ID	al	581	4	0x5565260243b0
SEMICOLON	;	581	6
RBRACE	}	582	0
ID	mres	583	0	0x556526024388
ASSIGN	=	583	4
ID	ans	583	5	0x5565260241f8
SEMICOLON	;	583	8
RBRACE	}	584	0
LBRACE	{	585	0
INT	int	586	0
ID	al	586	3	0x5565260243b0
ASSIGN	=	586	5
ID	ml	586	6	0x556526024338
COMMA	,	586	8
ID	c	586	9	0x5565260243d8
ASSIGN	=	586	10
ID	ml	586	11	0x556526024338
COMMA	,	586	13
ID	sum	586	14	0x556526024400
SEMICOLON	;	586	17
WHILE	while	587	0
LPAREN	(	587	5
ID	c	587	6	0x5565260243d8
RPAREN	)	587	7
LBRACE	{	587	8
ID	ans	588	0	0x5565260241f8
ASSIGN	=	588	3
DECIMAL	0	588	4	0
SEMICOLON	;	588	5
ID	i	589	0	0x556526024220
ASSIGN	=	589	1
DECIMAL	0	589	2	0
SEMICOLON	;	589	3
ID	x	590	0	0x556526024248
ASSIGN	=	590	1
ID	al	590	2	0x5565260243b0
SEMICOLON	;	590	4
ID	y	591	0	0x556526024270
ASSIGN	=	591	1
ID	c	591	2	0x5565260243d8
SEMICOLON	;	591	3
WHILE	while	592	0
LPAREN	(	592	5
ID	i	592	6	0x556526024220
LESS	<	592	7
DECIMAL	16	592	8	16
RPAREN	)	592	10
LBRACE	{	592	11
IF	if	593	0
LPAREN	(	593	2
ID	x	593	3	0x556526024248
MOD	%	593	4
DECIMAL	2	593	5	2
RPAREN	)	593	6
LBRACE	{	593	7
IF	if	594	0
LPAREN	(	594	2
ID	y	594	3	0x556526024270
MOD	%	594	4
DECIMAL	2	594	5	2
EQUAL	==	594	6
DECIMAL	0	594	8	0
RPAREN	)	594	9
LBRACE	{	594	10
ID	ans	595	0	0x5565260241f8
ASSIGN	=	595	3
ID	ans	595	4	0x5565260241f8
ADD	+	595	7
DECIMAL	1	595	8	1
MUL	*	595	9
ID	SHIFT_TABLE	595	10	0x5565260241a8
LBRACKET	[	595	21
ID	i	595	22	0x556526024220
RBRACKET	]	595	23
SEMICOLON	;	595	24
RBRACE	}	596	0
RBRACE	}	597	0
ELSE	else	597	1
IF	if	597	5
LPAREN	(	597	7
ID	y	597	8	0x556526024270
MOD	%	597	9
DECIMAL	2	597	10	2
RPAREN	)	597	11
LBRACE	{	597	12
ID	ans	598	0	0x5565260241f8
ASSIGN	=	598	3
ID	ans	598	4	0x5565260241f8
ADD	+	598	7
DECIMAL	1	598	8	1
MUL	*	598	9
ID	SHIFT_TABLE	598	10	0x5565260241a8
LBRACKET	[	598	21
ID	i	598	22	0x556526024220
RBRACKET	]	598	23
SEMICOLON	;	598	24
RBRACE	}	599	0
ID	x	600	0	0x556526024248
ASSIGN	=	600	1
ID	x	600	2	0x556526024248
DIV	/	600	3
DECIMAL	2	600	4	2
SEMICOLON	;	600	5
ID	y	601	0	0x556526024270
ASSIGN	=	601	1
ID	y	601	2	0x556526024270
DIV	/	601	3
DECIMAL	2	601	4	2
SEMICOLON	;	601	5
ID	i	602	0	0x556526024220
ASSIGN	=	602	1
ID	i	602	2	0x556526024220
ADD	+	602	3
DECIMAL	1	602	4	1
SEMICOLON	;	602	5
RBRACE	}	603	0
ID	sum	604	0	0x556526024400
ASSIGN	=	604	3
ID	ans	604	4	0x5565260241f8
SEMICOLON	;	604	7
ID	ans	605	0	0x5565260241f8
ASSIGN	=	605	3
DECIMAL	0	605	4	0
SEMICOLON	;	605	5
ID	i	606	0	0x556526024220
ASSIGN	=	606	1
DECIMAL	0	606	2	0
SEMICOLON	;	606	3
ID	x	607	0	0x556526024248
ASSIGN	=	607	1
ID	al	607	2	0x5565260243b0
SEMICOLON	;	607	4
ID	y	608	0	0x556526024270
ASSIGN	=	608	1
ID	c	608	2	0x5565260243d8
SEMICOLON	;	608	3
WHILE	while	609	0
LPAREN	(	609	5
ID	i	609	6	0x556526024220
LESS	<	609	7
DECIMAL	16	609	8	16
RPAREN	)	609	10
LBRACE	{	609	11
IF	if	610	0
LPAREN	(	610	2
ID	x	610	3	0x556526024248
MOD	%	610	4
DECIMAL	2	610	5	2
AND	&&	610	6
ID	y	610	8	0x556526024270
MOD	%	610	9
DECIMAL	2	610	10	2
RPAREN	)	610	11
LBRACE	{	610	12
ID	ans	611	0	0x5565260241f8
ASSIGN	=	611	3
ID	ans	611	4	0x5565260241f8
ADD	+	611	7
DECIMAL	1	611	8	1
MUL	*	611	9
ID	SHIFT_TABLE	611	10	0x5565260241a8
LBRACKET	[	611	21
ID	i	611	22	0x556526024220
RBRACKET	]	611	23
SEMICOLON	;	611	24
RBRACE	}	612	0
ID	x	613	0	0x556526024248
ASSIGN	=	613	1
ID	x	613	2	0x556526024248
DIV	/	613	3
DECIMAL	2	613	4	2
SEMICOLON	;	613	5
ID	y	614	0	0x556526024270
ASSIGN	=	614	1
ID	y	614	2	0x556526024270
DIV	/	614	3
DECIMAL	2	614	4	2
SEMICOLON	;	614	5
ID	i	615	0	0x556526024220
ASSIGN	=	615	1
ID	i	615	2	0x556526024220
ADD	+	615	3
DECIMAL	1	615	4	1
SEMICOLON	;	615	5
RBRACE	}	616	0
ID	c	617	0	0x5565260243d8
ASSIGN	=	617	1
ID	ans	617	2	0x5565260241f8
SEMICOLON	;	617	5
IF	if	618	0
LPAREN	(	618	2
LPAREN	(	618	3
DECIMAL	1	618	4	1
RPAREN	)	618	5
GREATER	>	618	6
DECIMAL	15	618	7	15
RPAREN	)	618	9
LBRACE	{	618	10
ID	ans	619	0	0x5565260241f8
ASSIGN	=	619	3
DECIMAL	0	619	4	0
SEMICOLON	;	619	5
RBRACE	}	620	0
ELSE	else	620	1
LBRACE	{	620	5
ID	ans	621	0	0x5565260241f8
ASSIGN	=	621	3
DECIMAL	0	621	4	0
SEMICOLON	;	621	5
ID	i	622	0	0x556526024220
ASSIGN	=	622	1
DECIMAL	0	622	2	0
SEMICOLON	;	622	3
ID	x	623	0	0x556526024248
ASSIGN	=	623	1
LPAREN	(	623	2
ID	c	623	3	0x5565260243d8
RPAREN	)	623	4
MUL	*	623	5
ID	SHIFT_TABLE	623	6	0x5565260241a8
LBRACKET	[	623	17
DECIMAL	1	623	18	1
RBRACKET	]	623	19
SEMICOLON	;	623	20
ID	y	624	0	0x556526024270
ASSIGN	=	624	1
HEXADECIMAL	0xffff	624	2	65535
SEMICOLON	;	624	8
WHILE	while	625	0
LPAREN	(	625	5
ID	i	625	6	0x556526024220
LESS	<	625	7
DECIMAL	16	625	8	16
RPAREN	)	625	10
LBRACE	{	625	11
IF	if	626	0
LPAREN	(	626	2
ID	x	626	3	0x556526024248
MOD	%	626	4
DECIMAL	2	626	5	2
AND	&&	626	6
ID	y	626	8	0x556526024270
MOD	%	626	9
DECIMAL	2	626	10	2
RPAREN	)	626	11
LBRACE	{	626	12
ID	ans	627	0	0x5565260241f8
ASSIGN	=	627	3
ID	ans	627	4	0x5565260241f8
ADD	+	627	7
DECIMAL	1	627	8	1
MUL	*	627	9
ID	SHIFT_TABLE	627	10	0x5565260241a8
LBRACKET	[	627	21
ID	i	627	22	0x556526024220
RBRACKET	]	627	23
SEMICOLON	;	627	24
RBRACE	}	628	0
ID	x	629	0	0x556526024248
ASSIGN	=	629	1
ID	x	629	2	0x556526024248
DIV	/	629	3
DECIMAL	2	629	4	2
SEMICOLON	;	629	5
ID	y	630	0	0x556526024270
ASSIGN	=	630	1
ID	y	630	2	0x556526024270
DIV	/	630	3
DECIMAL	2	630	4	2
SEMICOLON	;	630	5
ID	i	631	0	0x556526024220
ASSIGN	=	631	1
ID	i	631	2	0x556526024220
ADD	+	631	3
DECIMAL	1	631	4	1
SEMICOLON	;	631	5
RBRACE	}	632	0
RBRACE	}	633	0
ID	c	634	0	0x5565260243d8
ASSIGN	=	634	1
ID	ans	634	2	0x5565260241f8
SEMICOLON	;	634	5
ID	al	635	0	0x5565260243b0
ASSIGN	=	635	2
ID	sum	635	3	0x556526024400
SEMICOLON	;	635	6
RBRACE	}	636	0
ID	ans	637	0	0x5565260241f8
ASSIGN	=	637	3
ID	al	637	4	0x5565260243b0
SEMICOLON	;	637	6
RBRACE	}	638	0
ID	ml	639	0	0x556526024338
ASSIGN	=	639	2
ID	ans	639	3	0x5565260241f8
SEMICOLON	;	639	6
ID	x	640	0	0x556526024248
ASSIGN	=	640	1
ID	mr	640	2	0x556526024360
SEMICOLON	;	640	4
ID	y	641	0	0x556526024270
ASSIGN	=	641	1
DECIMAL	1	641	2	1
SEMICOLON	;	641	3
IF	if	642	0
LPAREN	(	642	2
ID	y	642	3	0x556526024270
GEQUAL	>=	642	4
DECIMAL	15	642	6	15
RPAREN	)	642	8
LBRACE	{	642	9
IF	if	643	0
LPAREN	(	643	2
ID	x	643	3	0x556526024248
LESS	<	643	4
DECIMAL	0	643	5	0
RPAREN	)	643	6
LBRACE	{	643	7
ID	ans	644	0	0x5565260241f8
ASSIGN	=	644	3
HEXADECIMAL	0xffff	644	4	65535
SEMICOLON	;	644	10
RBRACE	}	645	0
ELSE	else	645	1
LBRACE	{	645	5
ID	ans	646	0	0x5565260241f8
ASSIGN	=	646	3
DECIMAL	0	646	4	0
SEMICOLON	;	646	5
RBRACE	}	647	0
RBRACE	}	648	0
ELSE	else	648	1
IF	if	648	5
LPAREN	(	648	7
ID	y	648	8	0x556526024270
GREATER	>	648	9
DECIMAL	0	648	10	0
RPAREN	)	648	11
LBRACE	{	648	12
IF	if	649	0
LPAREN	(	649	2
ID	x	649	3	0x556526024248
GREATER	>	649	4
HEXADECIMAL	0x7fff	649	5	32767
RPAREN	)	649	11
LBRACE	{	649	12
ID	x	650	0	0x556526024248
ASSIGN	=	650	1
ID	x	650	2	0x556526024248
DIV	/	650	3
ID	SHIFT_TABLE	650	4	0x5565260241a8
LBRACKET	[	650	15
ID	y	650	16	0x556526024270
RBRACKET	]	650	17
SEMICOLON	;	650	18
ID	ans	651	0	0x5565260241f8
ASSIGN	=	651	3
ID	x	651	4	0x556526024248
ADD	+	651	5
DECIMAL	65536	651	6	65536
SUB	-	651	11
ID	SHIFT_TABLE	651	12	0x5565260241a8
LBRACKET	[	651	23
DECIMAL	15	651	24	15
SUB	-	651	26
ID	y	651	27	0x556526024270
ADD	+	651	28
DECIMAL	1	651	29	1
RBRACKET	]	651	30
SEMICOLON	;	651	31
RBRACE	}	652	0
ELSE	else	652	1
LBRACE	{	652	5
ID	ans	653	0	0x5565260241f8
ASSIGN	=	653	3
ID	x	653	4	0x556526024248
DIV	/	653	5
ID	SHIFT_TABLE	653	6	0x5565260241a8
LBRACKET	[	653	17
ID	y	653	18	0x556526024270
RBRACKET	]	653	19
SEMICOLON	;	653	20
RBRACE	}	654	0
RBRACE	}	655	0
ELSE	else	655	1
LBRACE	{	655	5
ID	ans	656	0	0x5565260241f8
ASSIGN	=	656	3
ID	x	656	4	0x556526024248
SEMICOLON	;	656	5
RBRACE	}	657	0
ID	mr	658	0	0x556526024360
ASSIGN	=	658	2
ID	ans	658	3	0x5565260241f8
SEMICOLON	;	658	6
RBRACE	}	659	0
ID	ans	660	0	0x5565260241f8
ASSIGN	=	660	3
ID	mres	660	4	0x556526024388
SEMICOLON	;	660	8
RBRACE	}	661	0
ID	pl	662	0	0x5565260242c0
ASSIGN	=	662	2
ID	ans	662	3	0x5565260241f8
SEMICOLON	;	662	6
ID	x	663	0	0x556526024248
ASSIGN	=	663	1
ID	pr	663	2	0x5565260242e8
SEMICOLON	;	663	4
ID	y	664	0	0x556526024270
ASSIGN	=	664	1
DECIMAL	1	664	2	1
SEMICOLON	;	664	3
IF	if	665	0
LPAREN	(	665	2
ID	y	665	3	0x556526024270
GEQUAL	>=	665	4
DECIMAL	15	665	6	15
RPAREN	)	665	8
LBRACE	{	665	9
IF	if	666	0
LPAREN	(	666	2
ID	x	666	3	0x556526024248
LESS	<	666	4
DECIMAL	0	666	5	0
RPAREN	)	666	6
LBRACE	{	666	7
ID	ans	667	0	0x5565260241f8
ASSIGN	=	667	3
HEXADECIMAL	0xffff	667	4	65535
SEMICOLON	;	667	10
RBRACE	}	668	0
ELSE	else	668	1
LBRACE	{	668	5
ID	ans	669	0	0x5565260241f8
ASSIGN	=	669	3
DECIMAL	0	669	4	0
SEMICOLON	;	669	5
RBRACE	}	670	0
RBRACE	}	671	0
ELSE	else	671	1
IF	if	671	5
LPAREN	(	671	7
ID	y	671	8	0x556526024270
GREATER	>	671	9
DECIMAL	0	671	10	0
RPAREN	)	671	11
LBRACE	{	671	12
IF	if	672	0
LPAREN	(	672	2
ID	x	672	3	0x556526024248
GREATER	>	672	4
HEXADECIMAL	0x7fff	672	5	32767
RPAREN	)	672	11
LBRACE	{	672	12
ID	x	673	0	0x556526024248
ASSIGN	=	673	1
ID	x	673	2	0x556526024248
DIV	/	673	3
ID	SHIFT_TABLE	673	4	0x5565260241a8
LBRACKET	[	673	15
ID	y	673	16	0x556526024270
RBRACKET	]	673	17
SEMICOLON	;	673	18
ID	ans	674	0	0x5565260241f8
ASSIGN	=	674	3
ID	x	674	4	0x556526024248
ADD	+	674	5
DECIMAL	65536	674	6	65536
SUB	-	674	11
ID	SHIFT_TABLE	674	12	0x5565260241a8
LBRACKET	[	674	23
DECIMAL	15	674	24	15
SUB	-	674	26
ID	y	674	27	0x556526024270
ADD	+	674	28
DECIMAL	1	674	29	1
RBRACKET	]	674	30
SEMICOLON	;	674	31
RBRACE	}	675	0
ELSE	else	675	1
LBRACE	{	675	5
ID	ans	676	0	0x5565260241f8
ASSIGN	=	676	3
ID	x	676	4	0x556526024248
DIV	/	676	5
ID	SHIFT_TABLE	676	6	0x5565260241a8
LBRACKET	[	676	17
ID	y	676	18	0x556526024270
RBRACKET	]	676	19
SEMICOLON	;	676	20
RBRACE	}	677	0
RBRACE	}	678	0
ELSE	else	678	1
LBRACE	{	678	5
ID	ans	679	0	0x5565260241f8
ASSIGN	=	679	3
ID	x	679	4	0x556526024248
SEMICOLON	;	679	5
RBRACE	}	680	0
ID	pr	681	0	0x5565260242e8
ASSIGN	=	681	2
ID	ans	681	3	0x5565260241f8
SEMICOLON	;	681	6
RBRACE	}	682	0
ID	ans	683	0	0x5565260241f8
ASSIGN	=	683	3
ID	pres	683	4	0x556526024310
SEMICOLON	;	683	8
RBRACE	}	684	0
ID	putint	685	0	0x556526024428
LPAREN	(	685	6
ID	ans	685	7	0x5565260241f8
RPAREN	)	685	10
SEMICOLON	;	685	11
ID	putch	686	0	0x556526024450
LPAREN	(	686	5
DECIMAL	10	686	6	10
RPAREN	)	686	8
SEMICOLON	;	686	9
ID	cur	687	0	0x556526024298
ASSIGN	=	687	3
DECIMAL	2	687	4	2
SEMICOLON	;	687	5
WHILE	while	688	0
LPAREN	(	688	5
ID	cur	688	6	0x556526024298
LESS	<	688	9
DECIMAL	16	688	10	16
RPAREN	)	688	12
LBRACE	{	688	13
LBRACE	{	689	0
INT	int	690	0
ID	pl	690	3	0x5565260242c0
ASSIGN	=	690	5
DECIMAL	2	690	6	2
COMMA	,	690	7
ID	pr	690	8	0x5565260242e8
ASSIGN	=	690	10
ID	cur	690	11	0x556526024298
COMMA	,	690	14
ID	pres	690	15	0x556526024310
ASSIGN	=	690	19
DECIMAL	1	690	20	1
SEMICOLON	;	690	21
WHILE	while	691	0
LPAREN	(	691	5
ID	pr	691	6	0x5565260242e8
GREATER	>	691	8
DECIMAL	0	691	9	0
RPAREN	)	691	10
LBRACE	{	691	11
ID	ans	692	0	0x5565260241f8
ASSIGN	=	692	3
DECIMAL	0	692	4	0
SEMICOLON	;	692	5
ID	i	693	0	0x556526024220
ASSIGN	=	693	1
DECIMAL	0	693	2	0
SEMICOLON	;	693	3
ID	x	694	0	0x556526024248
ASSIGN	=	694	1
ID	pr	694	2	0x5565260242e8
SEMICOLON	;	694	4
ID	y	695	0	0x556526024270
ASSIGN	=	695	1
DECIMAL	1	695	2	1
SEMICOLON	;	695	3
WHILE	while	696	0
LPAREN	(	696	5
ID	i	696	6	0x556526024220
LESS	<	696	7
DECIMAL	16	696	8	16
RPAREN	)	696	10
LBRACE	{	696	11
IF	if	697	0
LPAREN	(	697	2
ID	x	697	3	0x556526024248
MOD	%	697	4
DECIMAL	2	697	5	2
AND	&&	697	6
ID	y	697	8	0x556526024270
MOD	%	697	9
DECIMAL	2	697	10	2
RPAREN	)	697	11
LBRACE	{	697	12
ID	ans	698	0	0x5565260241f8
ASSIGN	=	698	3
ID	ans	698	4	0x5565260241f8
ADD	+	698	7
DECIMAL	1	698	8	1
MUL	*	698	9
ID	SHIFT_TABLE	698	10	0x5565260241a8
LBRACKET	[	698	21
ID	i	698	22	0x556526024220
RBRACKET	]	698	23
SEMICOLON	;	698	24
RBRACE	}	699	0
ID	x	700	0	0x556526024248
ASSIGN	=	700	1
ID	x	700	2	0x556526024248
DIV	/	700	3
DECIMAL	2	700	4	2
SEMICOLON	;	700	5
ID	y	701	0	0x556526024270
ASSIGN	=	701	1
ID	y	701	2	0x556526024270
DIV	/	701	3
DECIMAL	2	701	4	2
SEMICOLON	;	701	5
ID	i	702	0	0x556526024220
ASSIGN	=	702	1
ID	i	702	2	0x556526024220
ADD	+	702	3
DECIMAL	1	702	4	1
SEMICOLON	;	702	5
RBRACE	}	703	0
IF	if	704	0
LPAREN	(	704	2
ID	ans	704	3	0x5565260241f8
RPAREN	)	704	6
LBRACE	{	704	7
LBRACE	{	705	0
INT	int	706	0
ID	ml	706	3	0x556526024338
ASSIGN	=	706	5
ID	pres	706	6	0x556526024310
COMMA	,	706	10
ID	mr	706	11	0x556526024360
ASSIGN	=	706	13
ID	pl	706	14	0x5565260242c0
COMMA	,	706	16
ID	mres	706	17	0x556526024388
ASSIGN	=	706	21
DECIMAL	0	706	22	0
SEMICOLON	;	706	23
WHILE	while	707	0
LPAREN	(	707	5
ID	mr	707	6	0x556526024360
RPAREN	)	707	8
LBRACE	{	707	9
ID	ans	708	0	0x5565260241f8
ASSIGN	=	708	3
DECIMAL	0	708	4	0
SEMICOLON	;	708	5
ID	i	709	0	0x556526024220
ASSIGN	=	709	1
DECIMAL	0	709	2	0
SEMICOLON	;	709	3
ID	x	710	0	0x556526024248
ASSIGN	=	710	1
ID	mr	710	2	0x556526024360
SEMICOLON	;	710	4
ID	y	711	0	0x556526024270
ASSIGN	=	711	1
DECIMAL	1	711	2	1
SEMICOLON	;	711	3
WHILE	while	712	0
LPAREN	(	712	5
ID	i	712	6	0x556526024220
LESS	<	712	7
DECIMAL	16	712	8	16
RPAREN	)	712	10
LBRACE	{	712	11
IF	if	713	0
LPAREN	(	713	2
ID	x	713	3	0x556526024248
MOD	%	713	4
DECIMAL	2	713	5	2
AND	&&	713	6
ID	y	713	8	0x556526024270
MOD	%	713	9
DECIMAL	2	713	10	2
RPAREN	)	713	11
LBRACE	{	713	12
ID	ans	714	0	0x5565260241f8
ASSIGN	=	714	3
ID	ans	714	4	0x5565260241f8
ADD	+	714	7
DECIMAL	1	714	8	1
MUL	*	714	9
ID	SHIFT_TABLE	714	10	0x5565260241a8
LBRACKET	[	714	21
ID	i	714	22	0x556526024220
RBRACKET	]	714	23
SEMICOLON	;	714	24
RBRACE	}	715	0
ID	x	716	0	0x556526024248
ASSIGN	=	716	1
ID	x	716	2	0x556526024248
DIV	/	716	3
DECIMAL	2	716	4	2
SEMICOLON	;	716	5
ID	y	717	0	0x556526024270
ASSIGN	=	717	1
ID	y	717	2	0x556526024270
DIV	/	717	3
DECIMAL	2	717	4	2
SEMICOLON	;	717	5
ID	i	718	0	0x556526024220
ASSIGN	=	718	1
ID	i	718	2	0x556526024220
ADD	+	718	3
DECIMAL	1	718	4	1
SEMICOLON	;	718	5
RBRACE	}	719	0
IF	if	720	0
LPAREN	(	720	2
ID	ans	720	3	0x5565260241f8
RPAREN	)	720	6
LBRACE	{	720	7
LBRACE	{	721	0
INT	int	722	0
ID	al	722	3	0x5565260243b0
ASSIGN	=	722	5
ID	mres	722	6	0x556526024388
COMMA	,	722	10
ID	c	722	11	0x5565260243d8
ASSIGN	=	722	12
ID	ml	722	13	0x556526024338
COMMA	,	722	15
ID	sum	722	16	0x556526024400
SEMICOLON	;	722	19
WHILE	while	723	0
LPAREN	(	723	5
ID	c	723	6	0x5565260243d8
RPAREN	)	723	7
LBRACE	{	723	8
ID	ans	724	0	0x5565260241f8
ASSIGN	=	724	3
DECIMAL	0	724	4	0
SEMICOLON	;	724	5
ID	i	725	0	0x556526024220
ASSIGN	=	725	1
DECIMAL	0	725	2	0
SEMICOLON	;	725	3
ID	x	726	0	0x556526024248
ASSIGN	=	726	1
ID	al	726	2	0x5565260243b0
SEMICOLON	;	726	4
ID	y	727	0	0x556526024270
ASSIGN	=	727	1
ID	c	727	2	0x5565260243d8
SEMICOLON	;	727	3
WHILE	while	728	0
LPAREN	(	728	5
ID	i	728	6	0x556526024220
LESS	<	728	7
DECIMAL	16	728	8	16
RPAREN	)	728	10
LBRACE	{	728	11
IF	if	729	0
LPAREN	(	729	2
ID	x	729	3	0x556526024248
MOD	%	729	4
DECIMAL	2	729	5	2
RPAREN	)	729	6
LBRACE	{	729	7
IF	if	730	0
LPAREN	(	730	2
ID	y	730	3	0x556526024270
MOD	%	730	4
DECIMAL	2	730	5	2
EQUAL	==	730	6
DECIMAL	0	730	8	0
RPAREN	)	730	9
LBRACE	{	730	10
ID	ans	731	0	0x5565260241f8
ASSIGN	=	731	3
ID	ans	731	4	0x5565260241f8
ADD	+	731	7
DECIMAL	1	731	8	1
MUL	*	731	9
ID	SHIFT_TABLE	731	10	0x5565260241a8
LBRACKET	[	731	21
ID	i	731	22	0x556526024220
RBRACKET	]	731	23
SEMICOLON	;	731	24
RBRACE	}	732	0
RBRACE	}	733	0
ELSE	else	733	1
IF	if	733	5
LPAREN	(	733	7
ID	y	733	8	0x556526024270
MOD	%	733	9
DECIMAL	2	733	10	2
RPAREN	)	733	11
LBRACE	{	733	12
ID	ans	734	0	0x5565260241f8
ASSIGN	=	734	3
ID	ans	734	4	0x5565260241f8
ADD	+	734	7
DECIMAL	1	734	8	1
MUL	*	734	9
ID	SHIFT_TABLE	734	10	0x5565260241a8
LBRACKET	[	734	21
ID	i	734	22	0x556526024220
RBRACKET	]	734	23
SEMICOLON	;	734	24
RBRACE	}	735	0
ID	x	736	0	0x556526024248
ASSIGN	=	736	1
ID	x	736	2	0x556526024248
DIV	/	736	3
DECIMAL	2	736	4	2
SEMICOLON	;	736	5
ID	y	737	0	0x556526024270
ASSIGN	=	737	1
ID	y	737	2	0x556526024270
DIV	/	737	3
DECIMAL	2	737	4	2
SEMICOLON	;	737	5
ID	i	738	0	0x556526024220
ASSIGN	=	738	1
ID	i	738	2	0x556526024220
ADD	+	738	3
DECIMAL	1	738	4	1
SEMICOLON	;	738	5
RBRACE	}	739	0
ID	sum	740	0	0x556526024400
ASSIGN	=	740	3
ID	ans	740	4	0x5565260241f8
SEMICOLON	;	740	7
ID	ans	741	0	0x5565260241f8
ASSIGN	=	741	3
DECIMAL	0	741	4	0
SEMICOLON	;	741	5
ID	i	742	0	0x556526024220
ASSIGN	=	742	1
DECIMAL	0	742	2	0
SEMICOLON	;	742	3
ID	x	743	0	0x556526024248
ASSIGN	=	743	1
ID	al	743	2	0x5565260243b0
SEMICOLON	;	743	4
ID	y	744	0	0x556526024270
ASSIGN	=	744	1
ID	c	744	2	0x5565260243d8
SEMICOLON	;	744	3
WHILE	while	745	0
LPAREN	(	745	5
ID	i	745	6	0x556526024220
LESS	<	745	7
DECIMAL	16	745	8	16
RPAREN	)	745	10
LBRACE	{	745	11
IF	if	746	0
LPAREN	(	746	2
ID	x	746	3	0x556526024248
MOD	%	746	4
DECIMAL	2	746	5	2
AND	&&	746	6
ID	y	746	8	0x556526024270
MOD	%	746	9
DECIMAL	2	746	10	2
RPAREN	)	746	11
LBRACE	{	746	12
ID	ans	747	0	0x5565260241f8
ASSIGN	=	747	3
ID	ans	747	4	0x5565260241f8
ADD	+	747	7
DECIMAL	1	747	8	1
MUL	*	747	9
ID	SHIFT_TABLE	747	10	0x5565260241a8
LBRACKET	[	747	21
ID	i	747	22	0x556526024220
RBRACKET	]	747	23
SEMICOLON	;	747	24
RBRACE	}	748	0
ID	x	749	0	0x556526024248
ASSIGN	=	749	1
ID	x	749	2	0x556526024248
DIV	/	749	3
DECIMAL	2	749	4	2
SEMICOLON	;	749	5
ID	y	750	0	0x556526024270
ASSIGN	=	750	1
ID	y	750	2	0x556526024270
DIV	/	750	3
DECIMAL	2	750	4	2
SEMICOLON	;	750	5
ID	i	751	0	0x556526024220
ASSIGN	=	751	1
ID	i	751	2	0x556526024220
ADD	+	751	3
DECIMAL	1	751	4	1
SEMICOLON	;	751	5
RBRACE	}	752	0
ID	c	753	0	0x5565260243d8
ASSIGN	=	753	1
ID	ans	753	2	0x5565260241f8
SEMICOLON	;	753	5
IF	if	754	0
LPAREN	(	754	2
LPAREN	(	754	3
DECIMAL	1	754	4	1
RPAREN	)	754	5
GREATER	>	754	6
DECIMAL	15	754	7	15
RPAREN	)	754	9
LBRACE	{	754	10
ID	ans	755	0	0x5565260241f8
ASSIGN	=	755	3
DECIMAL	0	755	4	0
SEMICOLON	;	755	5
RBRACE	}	756	0
ELSE	else	756	1
LBRACE	{	756	5
ID	ans	757	0	0x5565260241f8
ASSIGN	=	757	3
DECIMAL	0	757	4	0
SEMICOLON	;	757	5
ID	i	758	0	0x556526024220
ASSIGN	=	758	1
DECIMAL	0	758	2	0
SEMICOLON	;	758	3
ID	x	759	0	0x556526024248
ASSIGN	=	759	1
LPAREN	(	759	2
ID	c	759	3	0x5565260243d8
RPAREN	)	759	4
MUL	*	759	5
ID	SHIFT_TABLE	759	6	0x5565260241a8
LBRACKET	[	759	17
DECIMAL	1	759	18	1
RBRACKET	]	759	19
SEMICOLON	;	759	20
ID	y	760	0	0x556526024270
ASSIGN	=	760	1
HEXADECIMAL	0xffff	760	2	65535
SEMICOLON	;	760	8
WHILE	while	761	0
LPAREN	(	761	5
ID	i	761	6	0x556526024220
LESS	<	761	7
DECIMAL	16	761	8	16
RPAREN	)	761	10
LBRACE	{	761	11
IF	if	762	0
LPAREN	(	762	2
ID	x	762	3	0x556526024248
MOD	%	762	4
DECIMAL	2	762	5	2
AND	&&	762	6
ID	y	762	8	0x556526024270
MOD	%	762	9
DECIMAL	2	762	10	2
RPAREN	)	762	11
LBRACE	{	762	12
ID	ans	763	0	0x5565260241f8
ASSIGN	=	763	3
ID	ans	763	4	0x5565260241f8
ADD	+	763	7
DECIMAL	1	763	8	1
MUL	*	763	9
ID	SHIFT_TABLE	763	10	0x5565260241a8
LBRACKET	[	763	21
ID	i	763	22	0x556526024220
RBRACKET	]	763	23
SEMICOLON	;	763	24
RBRACE	}	764	0
ID	x	765	0	0x556526024248
ASSIGN	=	765	1
ID	x	765	2	0x556526024248
DIV	/	765	3
DECIMAL	2	765	4	2
SEMICOLON	;	765	5
ID	y	766	0	0x556526024270
ASSIGN	=	766	1
ID	y	766	2	0x556526024270
DIV	/	766	3
DECIMAL	2	766	4	2
SEMICOLON	;	766	5
ID	i	767	0	0x556526024220
ASSIGN	=	767	1
ID	i	767	2	0x556526024220
ADD	+	767	3
DECIMAL	1	767	4	1
SEMICOLON	;	767	5
RBRACE	}	768	0
RBRACE	}	769	0
ID	c	770	0	0x5565260243d8
ASSIGN	=	770	1
ID	ans	770	2	0x5565260241f8
SEMICOLON	;	770	5
ID	al	771	0	0x5565260243b0
ASSIGN	=	771	2
ID	sum	771	3	0x556526024400
SEMICOLON	;	771	6
RBRACE	}	772	0
ID	ans	773	0	0x5565260241f8
ASSIGN	=	773	3
ID	al	773	4	0x5565260243b0
SEMICOLON	;	773	6
RBRACE	}	774	0
ID	mres	775	0	0x556526024388
ASSIGN	=	775	4
ID	ans	775	5	0x5565260241f8
SEMICOLON	;	775	8
RBRACE	}	776	0
LBRACE	{	777	0
INT	int	778	0
ID	al	778	3	0x5565260243b0
ASSIGN	=	778	5
ID	ml	778	6	0x556526024338
COMMA	,	778	8
ID	c	778	9	0x5565260243d8
ASSIGN	=	778	10
ID	ml	778	11	0x556526024338
COMMA	,	778	13
ID	sum	778	14	0x556526024400
SEMICOLON	;	778	17
WHILE	while	779	0
LPAREN	(	779	5
ID	c	779	6	0x5565260243d8
RPAREN	)	779	7
LBRACE	{	779	8
ID	ans	780	0	0x5565260241f8
ASSIGN	=	780	3
DECIMAL	0	780	4	0
SEMICOLON	;	780	5
ID	i	781	0	0x556526024220
ASSIGN	=	781	1
DECIMAL	0	781	2	0
SEMICOLON	;	781	3
ID	x	782	0	0x556526024248
ASSIGN	=	782	1
ID	al	782	2	0x5565260243b0
SEMICOLON	;	782	4
ID	y	783	0	0x556526024270
ASSIGN	=	783	1
ID	c	783	2	0x5565260243d8
SEMICOLON	;	783	3
WHILE	while	784	0
LPAREN	(	784	5
ID	i	784	6	0x556526024220
LESS	<	784	7
DECIMAL	16	784	8	16
RPAREN	)	784	10
LBRACE	{	784	11
IF	if	785	0
LPAREN	(	785	2
ID	x	785	3	0x556526024248
MOD	%	785	4
DECIMAL	2	785	5	2
RPAREN	)	785	6
LBRACE	{	785	7
IF	if	786	0
LPAREN	(	786	2
ID	y	786	3	0x556526024270
MOD	%	786	4
DECIMAL	2	786	5	2
EQUAL	==	786	6
DECIMAL	0	786	8	0
RPAREN	)	786	9
LBRACE	{	786	10
ID	ans	787	0	0x5565260241f8
ASSIGN	=	787	3
ID	ans	787	4	0x5565260241f8
ADD	+	787	7
DECIMAL	1	787	8	1
MUL	*	787	9
ID	SHIFT_TABLE	787	10	0x5565260241a8
LBRACKET	[	787	21
ID	i	787	22	0x556526024220
RBRACKET	]	787	23
SEMICOLON	;	787	24
RBRACE	}	788	0
RBRACE	}	789	0
ELSE	else	789	1
IF	if	789	5
LPAREN	(	789	7
ID	y	789	8	0x556526024270
MOD	%	789	9
DECIMAL	2	789	10	2
RPAREN	)	789	11
LBRACE	{	789	12
ID	ans	790	0	0x5565260241f8
ASSIGN	=	790	3
ID	ans	790	4	0x5565260241f8
ADD	+	790	7
DECIMAL	1	790	8	1
MUL	*	790	9
ID	SHIFT_TABLE	790	10	0x5565260241a8
LBRACKET	[	790	21
ID	i	790	22	0x556526024220
RBRACKET	]	790	23
SEMICOLON	;	790	24
RBRACE	}	791	0
ID	x	792	0	0x556526024248
ASSIGN	=	792	1
ID	x	792	2	0x556526024248
DIV	/	792	3
DECIMAL	2	792	4	2
SEMICOLON	;	792	5
ID	y	793	0	0x556526024270
ASSIGN	=	793	1
ID	y	793	2	0x556526024270
DIV	/	793	3
DECIMAL	2	793	4	2
SEMICOLON	;	793	5
ID	i	794	0	0x556526024220
ASSIGN	=	794	1
ID	i	794	2	0x556526024220
ADD	+	794	3
DECIMAL	1	794	4	1
SEMICOLON	;	794	5
RBRACE	}	795	0
ID	sum	796	0	0x556526024400
ASSIGN	=	796	3
ID	ans	796	4	0x5565260241f8
SEMICOLON	;	796	7
ID	ans	797	0	0x5565260241f8
ASSIGN	=	797	3
DECIMAL	0	797	4	0
SEMICOLON	;	797	5
ID	i	798	0	0x556526024220
ASSIGN	=	798	1
DECIMAL	0	798	2	0
SEMICOLON	;	798	3
ID	x	799	0	0x556526024248
ASSIGN	=	799	1
ID	al	799	2	0x5565260243b0
SEMICOLON	;	799	4
ID	y	800	0	0x556526024270
ASSIGN	=	800	1
ID	c	800	2	0x5565260243d8
SEMICOLON	;	800	3
WHILE	while	801	0
LPAREN	(	801	5
ID	i	801	6	0x556526024220
LESS	<	801	7
DECIMAL	16	801	8	16
RPAREN	)	801	10
LBRACE	{	801	11
IF	if	802	0
LPAREN	(	802	2
ID	x	802	3	0x556526024248
MOD	%	802	4
DECIMAL	2	802	5	2
AND	&&	802	6
ID	y	802	8	0x556526024270
MOD	%	802	9
DECIMAL	2	802	10	2
RPAREN	)	802	11
LBRACE	{	802	12
ID	ans	803	0	0x5565260241f8
ASSIGN	=	803	3
ID	ans	803	4	0x5565260241f8
ADD	+	803	7
DECIMAL	1	803	8	1
MUL	*	803	9
ID	SHIFT_TABLE	803	10	0x5565260241a8
LBRACKET	[	803	21
ID	i	803	22	0x556526024220
RBRACKET	]	803	23
SEMICOLON	;	803	24
RBRACE	}	804	0
ID	x	805	0	0x556526024248
ASSIGN	=	805	1
ID	x	805	2	0x556526024248
DIV	/	805	3
DECIMAL	2	805	4	2
SEMICOLON	;	805	5
ID	y	806	0	0x556526024270
ASSIGN	=	806	1
ID	y	806	2	0x556526024270
DIV	/	806	3
DECIMAL	2	806	4	2
SEMICOLON	;	806	5
ID	i	807	0	0x556526024220
ASSIGN	=	807	1
ID	i	807	2	0x556526024220
ADD	+	807	3
DECIMAL	1	807	4	1
SEMICOLON	;	807	5
RBRACE	}	808	0
ID	c	809	0	0x5565260243d8
ASSIGN	=	809	1
ID	ans	809	2	0x5565260241f8
SEMICOLON	;	809	5
IF	if	810	0
LPAREN	(	810	2
LPAREN	(	810	3
DECIMAL	1	810	4	1
RPAREN	)	810	5
GREATER	>	810	6
DECIMAL	15	810	7	15
RPAREN	)	810	9
LBRACE	{	810	10
ID	ans	811	0	0x5565260241f8
ASSIGN	=	811	3
DECIMAL	0	811	4	0
SEMICOLON	;	811	5
RBRACE	}	812	0
ELSE	else	812	1
LBRACE	{	812	5
ID	ans	813	0	0x5565260241f8
ASSIGN	=	813	3
DECIMAL	0	813	4	0
SEMICOLON	;	813	5
ID	i	814	0	0x556526024220
ASSIGN	=	814	1
DECIMAL	0	814	2	0
SEMICOLON	;	814	3
ID	x	815	0	0x556526024248
ASSIGN	=	815	1
LPAREN	(	815	2
ID	c	815	3	0x5565260243d8
RPAREN	)	815	4
MUL	*	815	5
ID	SHIFT_TABLE	815	6	0x5565260241a8
LBRACKET	[	815	17
DECIMAL	1	815	18	1
RBRACKET	]	815	19
SEMICOLON	;	815	20
ID	y	816	0	0x556526024270
ASSIGN	=	816	1
HEXADECIMAL	0xffff	816	2	65535
SEMICOLON	;	816	8
WHILE	while	817	0
LPAREN	(	817	5
ID	i	817	6	0x556526024220
LESS	<	817	7
DECIMAL	16	817	8	16
RPAREN	)	817	10
LBRACE	{	817	11
IF	if	818	0
LPAREN	(	818	2
ID	x	818	3	0x556526024248
MOD	%	818	4
DECIMAL	2	818	5	2
AND	&&	818	6
ID	y	818	8	0x556526024270
MOD	%	818	9
DECIMAL	2	818	10	2
RPAREN	)	818	11
LBRACE	{	818	12
ID	ans	819	0	0x5565260241f8
ASSIGN	=	819	3
ID	ans	819	4	0x5565260241f8
ADD	+	819	7
DECIMAL	1	819	8	1
MUL	*	819	9
ID	SHIFT_TABLE	819	10	0x5565260241a8
LBRACKET	[	819	21
ID	i	819	22	0x556526024220
RBRACKET	]	819	23
SEMICOLON	;	819	24
RBRACE	}	820	0
ID	x	821	0	0x556526024248
ASSIGN	=	821	1
ID	x	821	2	0x556526024248
DIV	/	821	3
DECIMAL	2	821	4	2
SEMICOLON	;	821	5
ID	y	822	0	0x556526024270
ASSIGN	=	822	1
ID	y	822	2	0x556526024270
DIV	/	822	3
DECIMAL	2	822	4	2
SEMICOLON	;	822	5
ID	i	823	0	0x556526024220
ASSIGN	=	823	1
ID	i	823	2	0x556526024220
ADD	+	823	3
DECIMAL	1	823	4	1
SEMICOLON	;	823	5
RBRACE	}	824	0
RBRACE	}	825	0
ID	c	826	0	0x5565260243d8
ASSIGN	=	826	1
ID	ans	826	2	0x5565260241f8
SEMICOLON	;	826	5
ID	al	827	0	0x5565260243b0
ASSIGN	=	827	2
ID	sum	827	3	0x556526024400
SEMICOLON	;	827	6
RBRACE	}	828	0
ID	ans	829	0	0x5565260241f8
ASSIGN	=	829	3
ID	al	829	4	0x5565260243b0
SEMICOLON	;	829	6
RBRACE	}	830	0
ID	ml	831	0	0x556526024338
ASSIGN	=	831	2
ID	ans	831	3	0x5565260241f8
SEMICOLON	;	831	6
ID	x	832	0	0x556526024248
ASSIGN	=	832	1
ID	mr	832	2	0x556526024360
SEMICOLON	;	832	4
ID	y	833	0	0x556526024270
ASSIGN	=	833	1
DECIMAL	1	833	2	1
SEMICOLON	;	833	3
IF	if	834	0
LPAREN	(	834	2
ID	y	834	3	0x556526024270
GEQUAL	>=	834	4
DECIMAL	15	834	6	15
RPAREN	)	834	8
LBRACE	{	834	9
IF	if	835	0
LPAREN	(	835	2
ID	x	835	3	0x556526024248
LESS	<	835	4
DECIMAL	0	835	5	0
RPAREN	)	835	6
LBRACE	{	835	7
ID	ans	836	0	0x5565260241f8
ASSIGN	=	836	3
HEXADECIMAL	0xffff	836	4	65535
SEMICOLON	;	836	10
RBRACE	}	837	0
ELSE	else	837	1
LBRACE	{	837	5
ID	ans	838	0	0x5565260241f8
ASSIGN	=	838	3
DECIMAL	0	838	4	0
SEMICOLON	;	838	5
RBRACE	}	839	0
RBRACE	}	840	0
ELSE	else	840	1
IF	if	840	5
LPAREN	(	840	7
ID	y	840	8	0x556526024270
GREATER	>	840	9
DECIMAL	0	840	10	0
RPAREN	)	840	11
LBRACE	{	840	12
IF	if	841	0
LPAREN	(	841	2
ID	x	841	3	0x556526024248
GREATER	>	841	4
HEXADECIMAL	0x7fff	841	5	32767
RPAREN	)	841	11
LBRACE	{	841	12
ID	x	842	0	0x556526024248
ASSIGN	=	842	1
ID	x	842	2	0x556526024248
DIV	/	842	3
ID	SHIFT_TABLE	842	4	0x5565260241a8
LBRACKET	[	842	15
ID	y	842	16	0x556526024270
RBRACKET	]	842	17
SEMICOLON	;	842	18
ID	ans	843	0	0x5565260241f8
ASSIGN	=	843	3
ID	x	843	4	0x556526024248
ADD	+	843	5
DECIMAL	65536	843	6	65536
SUB	-	843	11
ID	SHIFT_TABLE	843	12	0x5565260241a8
LBRACKET	[	843	23
DECIMAL	15	843	24	15
SUB	-	843	26
ID	y	843	27	0x556526024270
ADD	+	843	28
DECIMAL	1	843	29	1
RBRACKET	]	843	30
SEMICOLON	;	843	31
RBRACE	}	844	0
ELSE	else	844	1
LBRACE	{	844	5
ID	ans	845	0	0x5565260241f8
ASSIGN	=	845	3
ID	x	845	4	0x556526024248
DIV	/	845	5
ID	SHIFT_TABLE	845	6	0x5565260241a8
LBRACKET	[	845	17
ID	y	845	18	0x556526024270
RBRACKET	]	845	19
SEMICOLON	;	845	20
RBRACE	}	846	0
RBRACE	}	847	0
ELSE	else	847	1
LBRACE	{	847	5
ID	ans	848	0	0x5565260241f8
ASSIGN	=	848	3
ID	x	848	4	0x556526024248
SEMICOLON	;	848	5
RBRACE	}	849	0
ID	mr	850	0	0x556526024360
ASSIGN	=	850	2
ID	ans	850	3	0x5565260241f8
SEMICOLON	;	850	6
RBRACE	}	851	0
ID	ans	852	0	0x5565260241f8
ASSIGN	=	852	3
ID	mres	852	4	0x556526024388
SEMICOLON	;	852	8
RBRACE	}	853	0
ID	pres	854	0	0x556526024310
ASSIGN	=	854	4
ID	ans	854	5	0x5565260241f8
SEMICOLON	;	854	8
RBRACE	}	855	0
LBRACE	{	856	0
INT	int	857	0
ID	ml	857	3	0x556526024338
ASSIGN	=	857	5
ID	pl	857	6	0x5565260242c0
COMMA	,	857	8
ID	mr	857	9	0x556526024360
ASSIGN	=	857	11
ID	pl	857	12	0x5565260242c0
COMMA	,	857	14
ID	mres	857	15	0x556526024388
ASSIGN	=	857	19
DECIMAL	0	857	20	0
SEMICOLON	;	857	21
WHILE	while	858	0
LPAREN	(	858	5
ID	mr	858	6	0x556526024360
RPAREN	)	858	8
LBRACE	{	858	9
ID	ans	859	0	0x5565260241f8
ASSIGN	=	859	3
DECIMAL	0	859	4	0
SEMICOLON	;	859	5
ID	i	860	0	0x556526024220
ASSIGN	=	860	1
DECIMAL	0	860	2	0
SEMICOLON	;	860	3
ID	x	861	0	0x556526024248
ASSIGN	=	861	1
ID	mr	861	2	0x556526024360
SEMICOLON	;	861	4
ID	y	862	0	0x556526024270
ASSIGN	=	862	1
DECIMAL	1	862	2	1
SEMICOLON	;	862	3
WHILE	while	863	0
LPAREN	(	863	5
ID	i	863	6	0x556526024220
LESS	<	863	7
DECIMAL	16	863	8	16
RPAREN	)	863	10
LBRACE	{	863	11
IF	if	864	0
LPAREN	(	864	2
ID	x	864	3	0x556526024248
MOD	%	864	4
DECIMAL	2	864	5	2
AND	&&	864	6
ID	y	864	8	0x556526024270
MOD	%	864	9
DECIMAL	2	864	10	2
RPAREN	)	864	11
LBRACE	{	864	12
ID	ans	865	0	0x5565260241f8
ASSIGN	=	865	3
ID	ans	865	4	0x5565260241f8
ADD	+	865	7
DECIMAL	1	865	8	1
MUL	*	865	9
ID	SHIFT_TABLE	865	10	0x5565260241a8
LBRACKET	[	865	21
ID	i	865	22	0x556526024220
RBRACKET	]	865	23
SEMICOLON	;	865	24
RBRACE	}	866	0
ID	x	867	0	0x556526024248
ASSIGN	=	867	1
ID	x	867	2	0x556526024248
DIV	/	867	3
DECIMAL	2	867	4	2
SEMICOLON	;	867	5
ID	y	868	0	0x556526024270
ASSIGN	=	868	1
ID	y	868	2	0x556526024270
DIV	/	868	3
DECIMAL	2	868	4	2
SEMICOLON	;	868	5
ID	i	869	0	0x556526024220
ASSIGN	=	869	1
ID	i	869	2	0x556526024220
ADD	+	869	3
DECIMAL	1	869	4	1
SEMICOLON	;	869	5
RBRACE	}	870	0
IF	if	871	0
LPAREN	(	871	2
ID	ans	871	3	0x5565260241f8
RPAREN	)	871	6
LBRACE	{	871	7
LBRACE	{	872	0
INT	int	873	0
ID	al	873	3	0x5565260243b0
ASSIGN	=	873	5
ID	mres	873	6	0x556526024388
COMMA	,	873	10
ID	c	873	11	0x5565260243d8
ASSIGN	=	873	12
ID	ml	873	13	0x556526024338
COMMA	,	873	15
ID	sum	873	16	0x556526024400
SEMICOLON	;	873	19
WHILE	while	874	0
LPAREN	(	874	5
ID	c	874	6	0x5565260243d8
RPAREN	)	874	7
LBRACE	{	874	8
ID	ans	875	0	0x5565260241f8
ASSIGN	=	875	3
DECIMAL	0	875	4	0
SEMICOLON	;	875	5
ID	i	876	0	0x556526024220
ASSIGN	=	876	1
DECIMAL	0	876	2	0
SEMICOLON	;	876	3
ID	x	877	0	0x556526024248
ASSIGN	=	877	1
ID	al	877	2	0x5565260243b0
SEMICOLON	;	877	4
ID	y	878	0	0x556526024270
ASSIGN	=	878	1
ID	c	878	2	0x5565260243d8
SEMICOLON	;	878	3
WHILE	while	879	0
LPAREN	(	879	5
ID	i	879	6	0x556526024220
LESS	<	879	7
DECIMAL	16	879	8	16
RPAREN	)	879	10
LBRACE	{	879	11
IF	if	880	0
LPAREN	(	880	2
ID	x	880	3	0x556526024248
MOD	%	880	4
DECIMAL	2	880	5	2
RPAREN	)	880	6
LBRACE	{	880	7
IF	if	881	0
LPAREN	(	881	2
ID	y	881	3	0x556526024270
MOD	%	881	4
DECIMAL	2	881	5	2
EQUAL	==	881	6
DECIMAL	0	881	8	0
RPAREN	)	881	9
LBRACE	{	881	10
ID	ans	882	0	0x5565260241f8
ASSIGN	=	882	3
ID	ans	882	4	0x5565260241f8
ADD	+	882	7
DECIMAL	1	882	8	1
MUL	*	882	9
ID	SHIFT_TABLE	882	10	0x5565260241a8
LBRACKET	[	882	21
ID	i	882	22	0x556526024220
RBRACKET	]	882	23
SEMICOLON	;	882	24
RBRACE	}	883	0
RBRACE	}	884	0
ELSE	else	884	1
IF	if	884	5
LPAREN	(	884	7
ID	y	884	8	0x556526024270
MOD	%	884	9
DECIMAL	2	884	10	2
RPAREN	)	884	11
LBRACE	{	884	12
ID	ans	885	0	0x5565260241f8
ASSIGN	=	885	3
ID	ans	885	4	0x5565260241f8
ADD	+	885	7
DECIMAL	1	885	8	1
MUL	*	885	9
ID	SHIFT_TABLE	885	10	0x5565260241a8
LBRACKET	[	885	21
ID	i	885	22	0x556526024220
RBRACKET	]	885	23
SEMICOLON	;	885	24
RBRACE	}	886	0
ID	x	887	0	0x556526024248
ASSIGN	=	887	1
ID	x	887	2	0x556526024248
DIV	/	887	3
DECIMAL	2	887	4	2
SEMICOLON	;	887	5
ID	y	888	0	0x556526024270
ASSIGN	=	888	1
ID	y	888	2	0x556526024270
DIV	/	888	3
DECIMAL	2	888	4	2
SEMICOLON	;	888	5
ID	i	889	0	0x556526024220
ASSIGN	=	889	1
ID	i	889	2	0x556526024220
ADD	+	889	3
DECIMAL	1	889	4	1
SEMICOLON	;	889	5
RBRACE	}	890	0
ID	sum	891	0	0x556526024400
ASSIGN	=	891	3
ID	ans	891	4	0x5565260241f8
SEMICOLON	;	891	7
ID	ans	892	0	0x5565260241f8
ASSIGN	=	892	3
DECIMAL	0	892	4	0
SEMICOLON	;	892	5
ID	i	893	0	0x556526024220
ASSIGN	=	893	1
DECIMAL	0	893	2	0
SEMICOLON	;	893	3
ID	x	894	0	0x556526024248
ASSIGN	=	894	1
ID	al	894	2	0x5565260243b0
SEMICOLON	;	894	4
ID	y	895	0	0x556526024270
ASSIGN	=	895	1
ID	c	895	2	0x5565260243d8
SEMICOLON	;	895	3
WHILE	while	896	0
LPAREN	(	896	5
ID	i	896	6	0x556526024220
LESS	<	896	7
DECIMAL	16	896	8	16
RPAREN	)	896	10
LBRACE	{	896	11
IF	if	897	0
LPAREN	(	897	2
ID	x	897	3	0x556526024248
MOD	%	897	4
DECIMAL	2	897	5	2
AND	&&	897	6
ID	y	897	8	0x556526024270
MOD	%	897	9
DECIMAL	2	897	10	2
RPAREN	)	897	11
LBRACE	{	897	12
ID	ans	898	0	0x5565260241f8
ASSIGN	=	898	3
ID	ans	898	4	0x5565260241f8
ADD	+	898	7
DECIMAL	1	898	8	1
MUL	*	898	9
ID	SHIFT_TABLE	898	10	0x5565260241a8
LBRACKET	[	898	21
ID	i	898	22	0x556526024220
RBRACKET	]	898	23
SEMICOLON	;	898	24
RBRACE	}	899	0
ID	x	900	0	0x556526024248
ASSIGN	=	900	1
ID	x	900	2	0x556526024248
DIV	/	900	3
DECIMAL	2	900	4	2
SEMICOLON	;	900	5
ID	y	901	0	0x556526024270
ASSIGN	=	901	1
ID	y	901	2	0x556526024270
DIV	/	901	3
DECIMAL	2	901	4	2
SEMICOLON	;	901	5
ID	i	902	0	0x556526024220
ASSIGN	=	902	1
ID	i	902	2	0x556526024220
ADD	+	902	3
DECIMAL	1	902	4	1
SEMICOLON	;	902	5
RBRACE	}	903	0
ID	c	904	0	0x5565260243d8
ASSIGN	=	904	1
ID	ans	904	2	0x5565260241f8
SEMICOLON	;	904	5
IF	if	905	0
LPAREN	(	905	2
LPAREN	(	905	3
DECIMAL	1	905	4	1
RPAREN	)	905	5
GREATER	>	905	6
DECIMAL	15	905	7	15
RPAREN	)	905	9
LBRACE	{	905	10
ID	ans	906	0	0x5565260241f8
ASSIGN	=	906	3
DECIMAL	0	906	4	0
SEMICOLON	;	906	5
RBRACE	}	907	0
ELSE	else	907	1
LBRACE	{	907	5
ID	ans	908	0	0x5565260241f8
ASSIGN	=	908	3
DECIMAL	0	908	4	0
SEMICOLON	;	908	5
ID	i	909	0	0x556526024220
ASSIGN	=	909	1
DECIMAL	0	909	2	0
SEMICOLON	;	909	3
ID	x	910	0	0x556526024248
ASSIGN	=	910	1
LPAREN	(	910	2
ID	c	910	3	0x5565260243d8
RPAREN	)	910	4
MUL	*	910	5
ID	SHIFT_TABLE	910	6	0x5565260241a8
LBRACKET	[	910	17
DECIMAL	1	910	18	1
RBRACKET	]	910	19
SEMICOLON	;	910	20
ID	y	911	0	0x556526024270
ASSIGN	=	911	1
HEXADECIMAL	0xffff	911	2	65535
SEMICOLON	;	911	8
WHILE	while	912	0
LPAREN	(	912	5
ID	i	912	6	0x556526024220
LESS	<	912	7
DECIMAL	16	912	8	16
RPAREN	)	912	10
LBRACE	{	912	11
IF	if	913	0
LPAREN	(	913	2
ID	x	913	3	0x556526024248
MOD	%	913	4
DECIMAL	2	913	5	2
AND	&&	913	6
ID	y	913	8	0x556526024270
MOD	%	913	9
DECIMAL	2	913	10	2
RPAREN	)	913	11
LBRACE	{	913	12
ID	ans	914	0	0x5565260241f8
ASSIGN	=	914	3
ID	ans	914	4	0x5565260241f8
ADD	+	914	7
DECIMAL	1	914	8	1
MUL	*	914	9
ID	SHIFT_TABLE	914	10	0x5565260241a8
LBRACKET	[	914	21
ID	i	914	22	0x556526024220
RBRACKET	]	914	23
SEMICOLON	;	914	24
RBRACE	}	915	0
ID	x	916	0	0x556526024248
ASSIGN	=	916	1
ID	x	916	2	0x556526024248
DIV	/	916	3
DECIMAL	2	916	4	2
SEMICOLON	;	916	5
ID	y	917	0	0x556526024270
ASSIGN	=	917	1
ID	y	917	2	0x556526024270
DIV	/	917	3
DECIMAL	2	917	4	2
SEMICOLON	;	917	5
ID	i	918	0	0x556526024220
ASSIGN	=	918	1
ID	i	918	2	0x556526024220
ADD	+	918	3
DECIMAL	1	918	4	1
SEMICOLON	;	918	5
RBRACE	}	919	0
RBRACE	}	920	0
ID	c	921	0	0x5565260243d8
ASSIGN	=	921	1
ID	ans	921	2	0x5565260241f8
SEMICOLON	;	921	5
ID	al	922	0	0x5565260243b0
ASSIGN	=	922	2
ID	sum	922	3	0x556526024400
SEMICOLON	;	922	6
RBRACE	}	923	0
ID	ans	924	0	0x5565260241f8
ASSIGN	=	924	3
ID	al	924	4	0x5565260243b0
SEMICOLON	;	924	6
RBRACE	}	925	0
ID	mres	926	0	0x556526024388
ASSIGN	=	926	4
ID	ans	926	5	0x5565260241f8
SEMICOLON	;	926	8
RBRACE	}	927	0
LBRACE	{	928	0
INT	int	929	0
ID	al	929	3	0x5565260243b0
ASSIGN	=	929	5
ID	ml	929	6	0x556526024338
COMMA	,	929	8
ID	c	929	9	0x5565260243d8
ASSIGN	=	929	10
ID	ml	929	11	0x556526024338
COMMA	,	929	13
ID	sum	929	14	0x556526024400
SEMICOLON	;	929	17
WHILE	while	930	0
LPAREN	(	930	5
ID	c	930	6	0x5565260243d8
RPAREN	)	930	7
LBRACE	{	930	8
ID	ans	931	0	0x5565260241f8
ASSIGN	=	931	3
DECIMAL	0	931	4	0
SEMICOLON	;	931	5
ID	i	932	0	0x556526024220
ASSIGN	=	932	1
DECIMAL	0	932	2	0
SEMICOLON	;	932	3
ID	x	933	0	0x556526024248
ASSIGN	=	933	1
ID	al	933	2	0x5565260243b0
SEMICOLON	;	933	4
ID	y	934	0	0x556526024270
ASSIGN	=	934	1
ID	c	934	2	0x5565260243d8
SEMICOLON	;	934	3
WHILE	while	935	0
LPAREN	(	935	5
ID	i	935	6	0x556526024220
LESS	<	935	7
DECIMAL	16	935	8	16
RPAREN	)	935	10
LBRACE	{	935	11
IF	if	936	0
LPAREN	(	936	2
ID	x	936	3	0x556526024248
MOD	%	936	4
DECIMAL	2	936	5	2
RPAREN	)	936	6
LBRACE	{	936	7
IF	if	937	0
LPAREN	(	937	2
ID	y	937	3	0x556526024270
MOD	%	937	4
DECIMAL	2	937	5	2
EQUAL	==	937	6
DECIMAL	0	937	8	0
RPAREN	)	937	9
LBRACE	{	937	10
ID	ans	938	0	0x5565260241f8
ASSIGN	=	938	3
ID	ans	938	4	0x5565260241f8
ADD	+	938	7
DECIMAL	1	938	8	1
MUL	*	938	9
ID	SHIFT_TABLE	938	10	0x5565260241a8
LBRACKET	[	938	21
ID	i	938	22	0x556526024220
RBRACKET	]	938	23
SEMICOLON	;	938	24
RBRACE	}	939	0
RBRACE	}	940	0
ELSE	else	940	1
IF	if	940	5
LPAREN	(	940	7
ID	y	940	8	0x556526024270
MOD	%	940	9
DECIMAL	2	940	10	2
RPAREN	)	940	11
LBRACE	{	940	12
ID	ans	941	0	0x5565260241f8
ASSIGN	=	941	3
ID	ans	941	4	0x5565260241f8
ADD	+	941	7
DECIMAL	1	941	8	1
MUL	*	941	9
ID	SHIFT_TABLE	941	10	0x5565260241a8
LBRACKET	[	941	21
ID	i	941	22	0x556526024220
RBRACKET	]	941	23
SEMICOLON	;	941	24
RBRACE	}	942	0
ID	x	943	0	0x556526024248
ASSIGN	=	943	1
ID	x	943	2	0x556526024248
DIV	/	943	3
DECIMAL	2	943	4	2
SEMICOLON	;	943	5
ID	y	944	0	0x556526024270
ASSIGN	=	944	1
ID	y	944	2	0x556526024270
DIV	/	944	3
DECIMAL	2	944	4	2
SEMICOLON	;	944	5
ID	i	945	0	0x556526024220
ASSIGN	=	945	1
ID	i	945	2	0x556526024220
ADD	+	945	3
DECIMAL	1	945	4	1
SEMICOLON	;	945	5
RBRACE	}	946	0
ID	sum	947	0	0x556526024400
ASSIGN	=	947	3
ID	ans	947	4	0x5565260241f8
SEMICOLON	;	947	7
ID	ans	948	0	0x5565260241f8
ASSIGN	=	948	3
DECIMAL	0	948	4	0
SEMICOLON	;	948	5
ID	i	949	0	0x556526024220
ASSIGN	=	949	1
DECIMAL	0	949	2	0
SEMICOLON	;	949	3
ID	x	950	0	0x556526024248
ASSIGN	=	950	1
ID	al	950	2	0x5565260243b0
SEMICOLON	;	950	4
ID	y	951	0	0x556526024270
ASSIGN	=	951	1
ID	c	951	2	0x5565260243d8
SEMICOLON	;	951	3
WHILE	while	952	0
LPAREN	(	952	5
ID	i	952	6	0x556526024220
LESS	<	952	7
DECIMAL	16	952	8	16
RPAREN	)	952	10
LBRACE	{	952	11
IF	if	953	0
LPAREN	(	953	2
ID	x	953	3	0x556526024248
MOD	%	953	4
DECIMAL	2	953	5	2
AND	&&	953	6
ID	y	953	8	0x556526024270
MOD	%	953	9
DECIMAL	2	953	10	2
RPAREN	)	953	11
LBRACE	{	953	12
ID	ans	954	0	0x5565260241f8
ASSIGN	=	954	3
ID	ans	954	4	0x5565260241f8
ADD	+	954	7
DECIMAL	1	954	8	1
MUL	*	954	9
ID	SHIFT_TABLE	954	10	0x5565260241a8
LBRACKET	[	954	21
ID	i	954	22	0x556526024220
RBRACKET	]	954	23
SEMICOLON	;	954	24
RBRACE	}	955	0
ID	x	956	0	0x556526024248
ASSIGN	=	956	1
ID	x	956	2	0x556526024248
DIV	/	956	3
DECIMAL	2	956	4	2
SEMICOLON	;	956	5
ID	y	957	0	0x556526024270
ASSIGN	=	957	1
ID	y	957	2	0x556526024270
DIV	/	957	3
DECIMAL	2	957	4	2
SEMICOLON	;	957	5
ID	i	958	0	0x556526024220
ASSIGN	=	958	1
ID	i	958	2	0x556526024220
ADD	+	958	3
DECIMAL	1	958	4	1
SEMICOLON	;	958	5
RBRACE	}	959	0
ID	c	960	0	0x5565260243d8
ASSIGN	=	960	1
ID	ans	960	2	0x5565260241f8
SEMICOLON	;	960	5
IF	if	961	0
LPAREN	(	961	2
LPAREN	(	961	3
DECIMAL	1	961	4	1
RPAREN	)	961	5
GREATER	>	961	6
DECIMAL	15	961	7	15
RPAREN	)	961	9
LBRACE	{	961	10
ID	ans	962	0	0x5565260241f8
ASSIGN	=	962	3
DECIMAL	0	962	4	0
SEMICOLON	;	962	5
RBRACE	}	963	0
ELSE	else	963	1
LBRACE	{	963	5
ID	ans	964	0	0x5565260241f8
ASSIGN	=	964	3
DECIMAL	0	964	4	0
SEMICOLON	;	964	5
ID	i	965	0	0x556526024220
ASSIGN	=	965	1
DECIMAL	0	965	2	0
SEMICOLON	;	965	3
ID	x	966	0	0x556526024248
ASSIGN	=	966	1
LPAREN	(	966	2
ID	c	966	3	0x5565260243d8
RPAREN	)	966	4
MUL	*	966	5
ID	SHIFT_TABLE	966	6	0x5565260241a8
LBRACKET	[	966	17
DECIMAL	1	966	18	1
RBRACKET	]	966	19
SEMICOLON	;	966	20
ID	y	967	0	0x556526024270
ASSIGN	=	967	1
HEXADECIMAL	0xffff	967	2	65535
SEMICOLON	;	967	8
WHILE	while	968	0
LPAREN	(	968	5
ID	i	968	6	0x556526024220
LESS	<	968	7
DECIMAL	16	968	8	16
RPAREN	)	968	10
LBRACE	{	968	11
IF	if	969	0
LPAREN	(	969	2
ID	x	969	3	0x556526024248
MOD	%	969	4
DECIMAL	2	969	5	2
AND	&&	969	6
ID	y	969	8	0x556526024270
MOD	%	969	9
DECIMAL	2	969	10	2
RPAREN	)	969	11
LBRACE	{	969	12
ID	ans	970	0	0x5565260241f8
ASSIGN	=	970	3
ID	ans	970	4	0x5565260241f8
ADD	+	970	7
DECIMAL	1	970	8	1
MUL	*	970	9
ID	SHIFT_TABLE	970	10	0x5565260241a8
LBRACKET	[	970	21
ID	i	970	22	0x556526024220
RBRACKET	]	970	23
SEMICOLON	;	970	24
RBRACE	}	971	0
ID	x	972	0	0x556526024248
ASSIGN	=	972	1
ID	x	972	2	0x556526024248
DIV	/	972	3
DECIMAL	2	972	4	2
SEMICOLON	;	972	5
ID	y	973	0	0x556526024270
ASSIGN	=	973	1
ID	y	973	2	0x556526024270
DIV	/	973	3
DECIMAL	2	973	4	2
SEMICOLON	;	973	5
ID	i	974	0	0x556526024220
ASSIGN	=	974	1
ID	i	974	2	0x556526024220
ADD	+	974	3
DECIMAL	1	974	4	1
SEMICOLON	;	974	5
RBRACE	}	975	0
RBRACE	}	976	0
ID	c	977	0	0x5565260243d8
ASSIGN	=	977	1
ID	ans	977	2	0x5565260241f8
SEMICOLON	;	977	5
ID	al	978	0	0x5565260243b0
ASSIGN	=	978	2
ID	sum	978	3	0x556526024400
SEMICOLON	;	978	6
RBRACE	}	979	0
ID	ans	980	0	0x5565260241f8
ASSIGN	=	980	3
ID	al	980	4	0x5565260243b0
SEMICOLON	;	980	6
RBRACE	}	981	0
ID	ml	982	0	0x556526024338
ASSIGN	=	982	2
ID	ans	982	3	0x5565260241f8
SEMICOLON	;	982	6
ID	x	983	0	0x556526024248
ASSIGN	=	983	1
ID	mr	983	2	0x556526024360
SEMICOLON	;	983	4
ID	y	984	0	0x556526024270
ASSIGN	=	984	1
DECIMAL	1	984	2	1
SEMICOLON	;	984	3
IF	if	985	0
LPAREN	(	985	2
ID	y	985	3	0x556526024270
GEQUAL	>=	985	4
DECIMAL	15	985	6	15
RPAREN	)	985	8
LBRACE	{	985	9
IF	if	986	0
LPAREN	(	986	2
ID	x	986	3	0x556526024248
LESS	<	986	4
DECIMAL	0	986	5	0
RPAREN	)	986	6
LBRACE	{	986	7
ID	ans	987	0	0x5565260241f8
ASSIGN	=	987	3
HEXADECIMAL	0xffff	987	4	65535
SEMICOLON	;	987	10
RBRACE	}	988	0
ELSE	else	988	1
LBRACE	{	988	5
ID	ans	989	0	0x5565260241f8
ASSIGN	=	989	3
DECIMAL	0	989	4	0
SEMICOLON	;	989	5
RBRACE	}	990	0
RBRACE	}	991	0
ELSE	else	991	1
IF	if	991	5
LPAREN	(	991	7
ID	y	991	8	0x556526024270
GREATER	>	991	9
DECIMAL	0	991	10	0
RPAREN	)	991	11
LBRACE	{	991	12
IF	if	992	0
LPAREN	(	992	2
ID	x	992	3	0x556526024248
GREATER	>	992	4
HEXADECIMAL	0x7fff	992	5	32767
RPAREN	)	992	11
LBRACE	{	992	12
ID	x	993	0	0x556526024248
ASSIGN	=	993	1
ID	x	993	2	0x556526024248
DIV	/	993	3
ID	SHIFT_TABLE	993	4	0x5565260241a8
LBRACKET	[	993	15
ID	y	993	16	0x556526024270
RBRACKET	]	993	17
SEMICOLON	;	993	18
ID	ans	994	0	0x5565260241f8
ASSIGN	=	994	3
ID	x	994	4	0x556526024248
ADD	+	994	5
DECIMAL	65536	994	6	65536
SUB	-	994	11
ID	SHIFT_TABLE	994	12	0x5565260241a8
LBRACKET	[	994	23
DECIMAL	15	994	24	15
SUB	-	994	26
ID	y	994	27	0x556526024270
ADD	+	994	28
DECIMAL	1	994	29	1
RBRACKET	]	994	30
SEMICOLON	;	994	31
RBRACE	}	995	0
ELSE	else	995	1
LBRACE	{	995	5
ID	ans	996	0	0x5565260241f8
ASSIGN	=	996	3
ID	x	996	4	0x556526024248
DIV	/	996	5
ID	SHIFT_TABLE	996	6	0x5565260241a8
LBRACKET	[	996	17
ID	y	996	18	0x556526024270
RBRACKET	]	996	19
SEMICOLON	;	996	20
RBRACE	}	997	0
RBRACE	}	998	0
ELSE	else	998	1
LBRACE	{	998	5
ID	ans	999	0	0x5565260241f8
ASSIGN	=	999	3
ID	x	999	4	0x556526024248
SEMICOLON	;	999	5
RBRACE	}	1000	0
ID	mr	1001	0	0x556526024360
ASSIGN	=	1001	2
ID	ans	1001	3	0x5565260241f8
SEMICOLON	;	1001	6
RBRACE	}	1002	0
ID	ans	1003	0	0x5565260241f8
ASSIGN	=	1003	3
ID	mres	1003	4	0x556526024388
SEMICOLON	;	1003	8
RBRACE	}	1004	0
ID	pl	1005	0	0x5565260242c0
ASSIGN	=	1005	2
ID	ans	1005	3	0x5565260241f8
SEMICOLON	;	1005	6
ID	x	1006	0	0x556526024248
ASSIGN	=	1006	1
ID	pr	1006	2	0x5565260242e8
SEMICOLON	;	1006	4
ID	y	1007	0	0x556526024270
ASSIGN	=	1007	1
DECIMAL	1	1007	2	1
SEMICOLON	;	1007	3
IF	if	1008	0
LPAREN	(	1008	2
ID	y	1008	3	0x556526024270
GEQUAL	>=	1008	4
DECIMAL	15	1008	6	15
RPAREN	)	1008	8
LBRACE	{	1008	9
IF	if	1009	0
LPAREN	(	1009	2
ID	x	1009	3	0x556526024248
LESS	<	1009	4
DECIMAL	0	1009	5	0
RPAREN	)	1009	6
LBRACE	{	1009	7
ID	ans	1010	0	0x5565260241f8
ASSIGN	=	1010	3
HEXADECIMAL	0xffff	1010	4	65535
SEMICOLON	;	1010	10
RBRACE	}	1011	0
ELSE	else	1011	1
LBRACE	{	1011	5
ID	ans	1012	0	0x5565260241f8
ASSIGN	=	1012	3
DECIMAL	0	1012	4	0
SEMICOLON	;	1012	5
RBRACE	}	1013	0
RBRACE	}	1014	0
ELSE	else	1014	1
IF	if	1014	5
LPAREN	(	1014	7
ID	y	1014	8	0x556526024270
GREATER	>	1014	9
DECIMAL	0	1014	10	0
RPAREN	)	1014	11
LBRACE	{	1014	12
IF	if	1015	0
LPAREN	(	1015	2
ID	x	1015	3	0x556526024248
GREATER	>	1015	4
HEXADECIMAL	0x7fff	1015	5	32767
RPAREN	)	1015	11
LBRACE	{	1015	12
ID	x	1016	0	0x556526024248
ASSIGN	=	1016	1
ID	x	1016	2	0x556526024248
DIV	/	1016	3
ID	SHIFT_TABLE	1016	4	0x5565260241a8
LBRACKET	[	1016	15
ID	y	1016	16	0x556526024270
RBRACKET	]	1016	17
SEMICOLON	;	1016	18
ID	ans	1017	0	0x5565260241f8
ASSIGN	=	1017	3
ID	x	1017	4	0x556526024248
ADD	+	1017	5
DECIMAL	65536	1017	6	65536
SUB	-	1017	11
ID	SHIFT_TABLE	1017	12	0x5565260241a8
LBRACKET	[	1017	23
DECIMAL	15	1017	24	15
SUB	-	1017	26
ID	y	1017	27	0x556526024270
ADD	+	1017	28
DECIMAL	1	1017	29	1
RBRACKET	]	1017	30
SEMICOLON	;	1017	31
RBRACE	}	1018	0
ELSE	else	1018	1
LBRACE	{	1018	5
ID	ans	1019	0	0x5565260241f8
ASSIGN	=	1019	3
ID	x	1019	4	0x556526024248
DIV	/	1019	5
ID	SHIFT_TABLE	1019	6	0x5565260241a8
LBRACKET	[	1019	17
ID	y	1019	18	0x556526024270
RBRACKET	]	1019	19
SEMICOLON	;	1019	20
RBRACE	}	1020	0
RBRACE	}	1021	0
ELSE	else	1021	1
LBRACE	{	1021	5
ID	ans	1022	0	0x5565260241f8
ASSIGN	=	1022	3
ID	x	1022	4	0x556526024248
SEMICOLON	;	1022	5
RBRACE	}	1023	0
ID	pr	1024	0	0x5565260242e8
ASSIGN	=	1024	2
ID	ans	1024	3	0x5565260241f8
SEMICOLON	;	1024	6
RBRACE	}	1025	0
ID	ans	1026	0	0x5565260241f8
ASSIGN	=	1026	3
ID	pres	1026	4	0x556526024310
SEMICOLON	;	1026	8
RBRACE	}	1027	0
ID	putint	1028	0	0x556526024428
LPAREN	(	1028	6
ID	ans	1028	7	0x5565260241f8
RPAREN	)	1028	10
SEMICOLON	;	1028	11
ID	putch	1029	0	0x556526024450
LPAREN	(	1029	5
DECIMAL	10	1029	6	10
RPAREN	)	1029	8
SEMICOLON	;	1029	9
ID	cur	1030	0	0x556526024298
ASSIGN	=	1030	3
ID	cur	1030	4	0x556526024298
ADD	+	1030	7
DECIMAL	1	1030	8	1
SEMICOLON	;	1030	9
RBRACE	}	1031	0
ID	cur	1032	0	0x556526024298
ASSIGN	=	1032	3
DECIMAL	0	1032	4	0
SEMICOLON	;	1032	5
WHILE	while	1033	0
LPAREN	(	1033	5
ID	cur	1033	6	0x556526024298
LESS	<	1033	9
DECIMAL	16	1033	10	16
RPAREN	)	1033	12
LBRACE	{	1033	13
LBRACE	{	1034	0
INT	int	1035	0
ID	pl	1035	3	0x5565260242c0
ASSIGN	=	1035	5
DECIMAL	2	1035	6	2
COMMA	,	1035	7
ID	pr	1035	8	0x5565260242e8
ASSIGN	=	1035	10
ID	cur	1035	11	0x556526024298
COMMA	,	1035	14
ID	pres	1035	15	0x556526024310
ASSIGN	=	1035	19
DECIMAL	1	1035	20	1
SEMICOLON	;	1035	21
WHILE	while	1036	0
LPAREN	(	1036	5
ID	pr	1036	6	0x5565260242e8
GREATER	>	1036	8
DECIMAL	0	1036	9	0
RPAREN	)	1036	10
LBRACE	{	1036	11
ID	ans	1037	0	0x5565260241f8
ASSIGN	=	1037	3
DECIMAL	0	1037	4	0
SEMICOLON	;	1037	5
ID	i	1038	0	0x556526024220
ASSIGN	=	1038	1
DECIMAL	0	1038	2	0
SEMICOLON	;	1038	3
ID	x	1039	0	0x556526024248
ASSIGN	=	1039	1
ID	pr	1039	2	0x5565260242e8
SEMICOLON	;	1039	4
ID	y	1040	0	0x556526024270
ASSIGN	=	1040	1
DECIMAL	1	1040	2	1
SEMICOLON	;	1040	3
WHILE	while	1041	0
LPAREN	(	1041	5
ID	i	1041	6	0x556526024220
LESS	<	1041	7
DECIMAL	16	1041	8	16
RPAREN	)	1041	10
LBRACE	{	1041	11
IF	if	1042	0
LPAREN	(	1042	2
ID	x	1042	3	0x556526024248
MOD	%	1042	4
DECIMAL	2	1042	5	2
AND	&&	1042	6
ID	y	1042	8	0x556526024270
MOD	%	1042	9
DECIMAL	2	1042	10	2
RPAREN	)	1042	11
LBRACE	{	1042	12
ID	ans	1043	0	0x5565260241f8
ASSIGN	=	1043	3
ID	ans	1043	4	0x5565260241f8
ADD	+	1043	7
DECIMAL	1	1043	8	1
MUL	*	1043	9
ID	SHIFT_TABLE	1043	10	0x5565260241a8
LBRACKET	[	1043	21
ID	i	1043	22	0x556526024220
RBRACKET	]	1043	23
SEMICOLON	;	1043	24
RBRACE	}	1044	0
ID	x	1045	0	0x556526024248
ASSIGN	=	1045	1
ID	x	1045	2	0x556526024248
DIV	/	1045	3
DECIMAL	2	1045	4	2
SEMICOLON	;	1045	5
ID	y	1046	0	0x556526024270
ASSIGN	=	1046	1
ID	y	1046	2	0x556526024270
DIV	/	1046	3
DECIMAL	2	1046	4	2
SEMICOLON	;	1046	5
ID	i	1047	0	0x556526024220
ASSIGN	=	1047	1
ID	i	1047	2	0x556526024220
ADD	+	1047	3
DECIMAL	1	1047	4	1
SEMICOLON	;	1047	5
RBRACE	}	1048	0
IF	if	1049	0
LPAREN	(	1049	2
ID	ans	1049	3	0x5565260241f8
RPAREN	)	1049	6
LBRACE	{	1049	7
LBRACE	{	1050	0
INT	int	1051	0
ID	ml	1051	3	0x556526024338
ASSIGN	=	1051	5
ID	pres	1051	6	0x556526024310
COMMA	,	1051	10
ID	mr	1051	11	0x556526024360
ASSIGN	=	1051	13
ID	pl	1051	14	0x5565260242c0
COMMA	,	1051	16
ID	mres	1051	17	0x556526024388
ASSIGN	=	1051	21
DECIMAL	0	1051	22	0
SEMICOLON	;	1051	23
WHILE	while	1052	0
LPAREN	(	1052	5
ID	mr	1052	6	0x556526024360
RPAREN	)	1052	8
LBRACE	{	1052	9
ID	ans	1053	0	0x5565260241f8
ASSIGN	=	1053	3
DECIMAL	0	1053	4	0
SEMICOLON	;	1053	5
ID	i	1054	0	0x556526024220
ASSIGN	=	1054	1
DECIMAL	0	1054	2	0
SEMICOLON	;	1054	3
ID	x	1055	0	0x556526024248
ASSIGN	=	1055	1
ID	mr	1055	2	0x556526024360
SEMICOLON	;	1055	4
ID	y	1056	0	0x556526024270
ASSIGN	=	1056	1
DECIMAL	1	1056	2	1
SEMICOLON	;	1056	3
WHILE	while	1057	0
LPAREN	(	1057	5
ID	i	1057	6	0x556526024220
LESS	<	1057	7
DECIMAL	16	1057	8	16
RPAREN	)	1057	10
LBRACE	{	1057	11
IF	if	1058	0
LPAREN	(	1058	2
ID	x	1058	3	0x556526024248
MOD	%	1058	4
DECIMAL	2	1058	5	2
AND	&&	1058	6
ID	y	1058	8	0x556526024270
MOD	%	1058	9
DECIMAL	2	1058	10	2
RPAREN	)	1058	11
LBRACE	{	1058	12
ID	ans	1059	0	0x5565260241f8
ASSIGN	=	1059	3
ID	ans	1059	4	0x5565260241f8
ADD	+	1059	7
DECIMAL	1	1059	8	1
MUL	*	1059	9
ID	SHIFT_TABLE	1059	10	0x5565260241a8
LBRACKET	[	1059	21
ID	i	1059	22	0x556526024220
RBRACKET	]	1059	23
SEMICOLON	;	1059	24
RBRACE	}	1060	0
ID	x	1061	0	0x556526024248
ASSIGN	=	1061	1
ID	x	1061	2	0x556526024248
DIV	/	1061	3
DECIMAL	2	1061	4	2
SEMICOLON	;	1061	5
ID	y	1062	0	0x556526024270
ASSIGN	=	1062	1
ID	y	1062	2	0x556526024270
DIV	/	1062	3
DECIMAL	2	1062	4	2
SEMICOLON	;	1062	5
ID	i	1063	0	0x556526024220
ASSIGN	=	1063	1
ID	i	1063	2	0x556526024220
ADD	+	1063	3
DECIMAL	1	1063	4	1
SEMICOLON	;	1063	5
RBRACE	}	1064	0
IF	if	1065	0
LPAREN	(	1065	2
ID	ans	1065	3	0x5565260241f8
RPAREN	)	1065	6
LBRACE	{	1065	7
LBRACE	{	1066	0
INT	int	1067	0
ID	al	1067	3	0x5565260243b0
ASSIGN	=	1067	5
ID	mres	1067	6	0x556526024388
COMMA	,	1067	10
ID	c	1067	11	0x5565260243d8
ASSIGN	=	1067	12
ID	ml	1067	13	0x556526024338
COMMA	,	1067	15
ID	sum	1067	16	0x556526024400
SEMICOLON	;	1067	19
WHILE	while	1068	0
LPAREN	(	1068	5
ID	c	1068	6	0x5565260243d8
RPAREN	)	1068	7
LBRACE	{	1068	8
ID	ans	1069	0	0x5565260241f8
ASSIGN	=	1069	3
DECIMAL	0	1069	4	0
SEMICOLON	;	1069	5
ID	i	1070	0	0x556526024220
ASSIGN	=	1070	1
DECIMAL	0	1070	2	0
SEMICOLON	;	1070	3
ID	x	1071	0	0x556526024248
ASSIGN	=	1071	1
ID	al	1071	2	0x5565260243b0
SEMICOLON	;	1071	4
ID	y	1072	0	0x556526024270
ASSIGN	=	1072	1
ID	c	1072	2	0x5565260243d8
SEMICOLON	;	1072	3
WHILE	while	1073	0
LPAREN	(	1073	5
ID	i	1073	6	0x556526024220
LESS	<	1073	7
DECIMAL	16	1073	8	16
RPAREN	)	1073	10
LBRACE	{	1073	11
IF	if	1074	0
LPAREN	(	1074	2
ID	x	1074	3	0x556526024248
MOD	%	1074	4
DECIMAL	2	1074	5	2
RPAREN	)	1074	6
LBRACE	{	1074	7
IF	if	1075	0
LPAREN	(	1075	2
ID	y	1075	3	0x556526024270
MOD	%	1075	4
DECIMAL	2	1075	5	2
EQUAL	==	1075	6
DECIMAL	0	1075	8	0
RPAREN	)	1075	9
LBRACE	{	1075	10
ID	ans	1076	0	0x5565260241f8
ASSIGN	=	1076	3
ID	ans	1076	4	0x5565260241f8
ADD	+	1076	7
DECIMAL	1	1076	8	1
MUL	*	1076	9
ID	SHIFT_TABLE	1076	10	0x5565260241a8
LBRACKET	[	1076	21
ID	i	1076	22	0x556526024220
RBRACKET	]	1076	23
SEMICOLON	;	1076	24
RBRACE	}	1077	0
RBRACE	}	1078	0
ELSE	else	1078	1
IF	if	1078	5
LPAREN	(	1078	7
ID	y	1078	8	0x556526024270
MOD	%	1078	9
DECIMAL	2	1078	10	2
RPAREN	)	1078	11
LBRACE	{	1078	12
ID	ans	1079	0	0x5565260241f8
ASSIGN	=	1079	3
ID	ans	1079	4	0x5565260241f8
ADD	+	1079	7
DECIMAL	1	1079	8	1
MUL	*	1079	9
ID	SHIFT_TABLE	1079	10	0x5565260241a8
LBRACKET	[	1079	21
ID	i	1079	22	0x556526024220
RBRACKET	]	1079	23
SEMICOLON	;	1079	24
RBRACE	}	1080	0
ID	x	1081	0	0x556526024248
ASSIGN	=	1081	1
ID	x	1081	2	0x556526024248
DIV	/	1081	3
DECIMAL	2	1081	4	2
SEMICOLON	;	1081	5
ID	y	1082	0	0x556526024270
ASSIGN	=	1082	1
ID	y	1082	2	0x556526024270
DIV	/	1082	3
DECIMAL	2	1082	4	2
SEMICOLON	;	1082	5
ID	i	1083	0	0x556526024220
ASSIGN	=	1083	1
ID	i	1083	2	0x556526024220
ADD	+	1083	3
DECIMAL	1	1083	4	1
SEMICOLON	;	1083	5
RBRACE	}	1084	0
ID	sum	1085	0	0x556526024400
ASSIGN	=	1085	3
ID	ans	1085	4	0x5565260241f8
SEMICOLON	;	1085	7
ID	ans	1086	0	0x5565260241f8
ASSIGN	=	1086	3
DECIMAL	0	1086	4	0
SEMICOLON	;	1086	5
ID	i	1087	0	0x556526024220
ASSIGN	=	1087	1
DECIMAL	0	1087	2	0
SEMICOLON	;	1087	3
ID	x	1088	0	0x556526024248
ASSIGN	=	1088	1
ID	al	1088	2	0x5565260243b0
SEMICOLON	;	1088	4
ID	y	1089	0	0x556526024270
ASSIGN	=	1089	1
ID	c	1089	2	0x5565260243d8
SEMICOLON	;	1089	3
WHILE	while	1090	0
LPAREN	(	1090	5
ID	i	1090	6	0x556526024220
LESS	<	1090	7
DECIMAL	16	1090	8	16
RPAREN	)	1090	10
LBRACE	{	1090	11
IF	if	1091	0
LPAREN	(	1091	2
ID	x	1091	3	0x556526024248
MOD	%	1091	4
DECIMAL	2	1091	5	2
AND	&&	1091	6
ID	y	1091	8	0x556526024270
MOD	%	1091	9
DECIMAL	2	1091	10	2
RPAREN	)	1091	11
LBRACE	{	1091	12
ID	ans	1092	0	0x5565260241f8
ASSIGN	=	1092	3
ID	ans	1092	4	0x5565260241f8
ADD	+	1092	7
DECIMAL	1	1092	8	1
MUL	*	1092	9
ID	SHIFT_TABLE	1092	10	0x5565260241a8
LBRACKET	[	1092	21
ID	i	1092	22	0x556526024220
RBRACKET	]	1092	23
SEMICOLON	;	1092	24
RBRACE	}	1093	0
ID	x	1094	0	0x556526024248
ASSIGN	=	1094	1
ID	x	1094	2	0x556526024248
DIV	/	1094	3
DECIMAL	2	1094	4	2
SEMICOLON	;	1094	5
ID	y	1095	0	0x556526024270
ASSIGN	=	1095	1
ID	y	1095	2	0x556526024270
DIV	/	1095	3
DECIMAL	2	1095	4	2
SEMICOLON	;	1095	5
ID	i	1096	0	0x556526024220
ASSIGN	=	1096	1
ID	i	1096	2	0x556526024220
ADD	+	1096	3
DECIMAL	1	1096	4	1
SEMICOLON	;	1096	5
RBRACE	}	1097	0
ID	c	1098	0	0x5565260243d8
ASSIGN	=	1098	1
ID	ans	1098	2	0x5565260241f8
SEMICOLON	;	1098	5
IF	if	1099	0
LPAREN	(	1099	2
LPAREN	(	1099	3
DECIMAL	1	1099	4	1
RPAREN	)	1099	5
GREATER	>	1099	6
DECIMAL	15	1099	7	15
RPAREN	)	1099	9
LBRACE	{	1099	10
ID	ans	1100	0	0x5565260241f8
ASSIGN	=	1100	3
DECIMAL	0	1100	4	0
SEMICOLON	;	1100	5
RBRACE	}	1101	0
ELSE	else	1101	1
LBRACE	{	1101	5
ID	ans	1102	0	0x5565260241f8
ASSIGN	=	1102	3
DECIMAL	0	1102	4	0
SEMICOLON	;	1102	5
ID	i	1103	0	0x556526024220
ASSIGN	=	1103	1
DECIMAL	0	1103	2	0
SEMICOLON	;	1103	3
ID	x	1104	0	0x556526024248
ASSIGN	=	1104	1
LPAREN	(	1104	2
ID	c	1104	3	0x5565260243d8
RPAREN	)	1104	4
MUL	*	1104	5
ID	SHIFT_TABLE	1104	6	0x5565260241a8
LBRACKET	[	1104	17
DECIMAL	1	1104	18	1
RBRACKET	]	1104	19
SEMICOLON	;	1104	20
ID	y	1105	0	0x556526024270
ASSIGN	=	1105	1
HEXADECIMAL	0xffff	1105	2	65535
SEMICOLON	;	1105	8
WHILE	while	1106	0
LPAREN	(	1106	5
ID	i	1106	6	0x556526024220
LESS	<	1106	7
DECIMAL	16	1106	8	16
RPAREN	)	1106	10
LBRACE	{	1106	11
IF	if	1107	0
LPAREN	(	1107	2
ID	x	1107	3	0x556526024248
MOD	%	1107	4
DECIMAL	2	1107	5	2
AND	&&	1107	6
ID	y	1107	8	0x556526024270
MOD	%	1107	9
DECIMAL	2	1107	10	2
RPAREN	)	1107	11
LBRACE	{	1107	12
ID	ans	1108	0	0x5565260241f8
ASSIGN	=	1108	3
ID	ans	1108	4	0x5565260241f8
ADD	+	1108	7
DECIMAL	1	1108	8	1
MUL	*	1108	9
ID	SHIFT_TABLE	1108	10	0x5565260241a8
LBRACKET	[	1108	21
ID	i	1108	22	0x556526024220
RBRACKET	]	1108	23
SEMICOLON	;	1108	24
RBRACE	}	1109	0
ID	x	1110	0	0x556526024248
ASSIGN	=	1110	1
ID	x	1110	2	0x556526024248
DIV	/	1110	3
DECIMAL	2	1110	4	2
SEMICOLON	;	1110	5
ID	y	1111	0	0x556526024270
ASSIGN	=	1111	1
ID	y	1111	2	0x556526024270
DIV	/	1111	3
DECIMAL	2	1111	4	2
SEMICOLON	;	1111	5
ID	i	1112	0	0x556526024220
ASSIGN	=	1112	1
ID	i	1112	2	0x556526024220
ADD	+	1112	3
DECIMAL	1	1112	4	1
SEMICOLON	;	1112	5
RBRACE	}	1113	0
RBRACE	}	1114	0
ID	c	1115	0	0x5565260243d8
ASSIGN	=	1115	1
ID	ans	1115	2	0x5565260241f8
SEMICOLON	;	1115	5
ID	al	1116	0	0x5565260243b0
ASSIGN	=	1116	2
ID	sum	1116	3	0x556526024400
SEMICOLON	;	1116	6
RBRACE	}	1117	0
ID	ans	1118	0	0x5565260241f8
ASSIGN	=	1118	3
ID	al	1118	4	0x5565260243b0
SEMICOLON	;	1118	6
RBRACE	}	1119	0
ID	mres	1120	0	0x556526024388
ASSIGN	=	1120	4
ID	ans	1120	5	0x5565260241f8
SEMICOLON	;	1120	8
RBRACE	}	1121	0
LBRACE	{	1122	0
INT	int	1123	0
ID	al	1123	3	0x5565260243b0
ASSIGN	=	1123	5
ID	ml	1123	6	0x556526024338
COMMA	,	1123	8
ID	c	1123	9	0x5565260243d8
ASSIGN	=	1123	10
ID	ml	1123	11	0x556526024338
COMMA	,	1123	13
ID	sum	1123	14	0x556526024400
SEMICOLON	;	1123	17
WHILE	while	1124	0
LPAREN	(	1124	5
ID	c	1124	6	0x5565260243d8
RPAREN	)	1124	7
LBRACE	{	1124	8
ID	ans	1125	0	0x5565260241f8
ASSIGN	=	1125	3
DECIMAL	0	1125	4	0
SEMICOLON	;	1125	5
ID	i	1126	0	0x556526024220
ASSIGN	=	1126	1
DECIMAL	0	1126	2	0
SEMICOLON	;	1126	3
ID	x	1127	0	0x556526024248
ASSIGN	=	1127	1
ID	al	1127	2	0x5565260243b0
SEMICOLON	;	1127	4
ID	y	1128	0	0x556526024270
ASSIGN	=	1128	1
ID	c	1128	2	0x5565260243d8
SEMICOLON	;	1128	3
WHILE	while	1129	0
LPAREN	(	1129	5
ID	i	1129	6	0x556526024220
LESS	<	1129	7
DECIMAL	16	1129	8	16
RPAREN	)	1129	10
LBRACE	{	1129	11
IF	if	1130	0
LPAREN	(	1130	2
ID	x	1130	3	0x556526024248
MOD	%	1130	4
DECIMAL	2	1130	5	2
RPAREN	)	1130	6
LBRACE	{	1130	7
IF	if	1131	0
LPAREN	(	1131	2
ID	y	1131	3	0x556526024270
MOD	%	1131	4
DECIMAL	2	1131	5	2
EQUAL	==	1131	6
DECIMAL	0	1131	8	0
RPAREN	)	1131	9
LBRACE	{	1131	10
ID	ans	1132	0	0x5565260241f8
ASSIGN	=	1132	3
ID	ans	1132	4	0x5565260241f8
ADD	+	1132	7
DECIMAL	1	1132	8	1
MUL	*	1132	9
ID	SHIFT_TABLE	1132	10	0x5565260241a8
LBRACKET	[	1132	21
ID	i	1132	22	0x556526024220
RBRACKET	]	1132	23
SEMICOLON	;	1132	24
RBRACE	}	1133	0
RBRACE	}	1134	0
ELSE	else	1134	1
IF	if	1134	5
LPAREN	(	1134	7
ID	y	1134	8	0x556526024270
MOD	%	1134	9
DECIMAL	2	1134	10	2
RPAREN	)	1134	11
LBRACE	{	1134	12
ID	ans	1135	0	0x5565260241f8
ASSIGN	=	1135	3
ID	ans	1135	4	0x5565260241f8
ADD	+	1135	7
DECIMAL	1	1135	8	1
MUL	*	1135	9
ID	SHIFT_TABLE	1135	10	0x5565260241a8
LBRACKET	[	1135	21
ID	i	1135	22	0x556526024220
RBRACKET	]	1135	23
SEMICOLON	;	1135	24
RBRACE	}	1136	0
ID	x	1137	0	0x556526024248
ASSIGN	=	1137	1
ID	x	1137	2	0x556526024248
DIV	/	1137	3
DECIMAL	2	1137	4	2
SEMICOLON	;	1137	5
ID	y	1138	0	0x556526024270
ASSIGN	=	1138	1
ID	y	1138	2	0x556526024270
DIV	/	1138	3
DECIMAL	2	1138	4	2
SEMICOLON	;	1138	5
ID	i	1139	0	0x556526024220
ASSIGN	=	1139	1
ID	i	1139	2	0x556526024220
ADD	+	1139	3
DECIMAL	1	1139	4	1
SEMICOLON	;	1139	5
RBRACE	}	1140	0
ID	sum	1141	0	0x556526024400
ASSIGN	=	1141	3
ID	ans	1141	4	0x5565260241f8
SEMICOLON	;	1141	7
ID	ans	1142	0	0x5565260241f8
ASSIGN	=	1142	3
DECIMAL	0	1142	4	0
SEMICOLON	;	1142	5
ID	i	1143	0	0x556526024220
ASSIGN	=	1143	1
DECIMAL	0	1143	2	0
SEMICOLON	;	1143	3
ID	x	1144	0	0x556526024248
ASSIGN	=	1144	1
ID	al	1144	2	0x5565260243b0
SEMICOLON	;	1144	4
ID	y	1145	0	0x556526024270
ASSIGN	=	1145	1
ID	c	1145	2	0x5565260243d8
SEMICOLON	;	1145	3
WHILE	while	1146	0
LPAREN	(	1146	5
ID	i	1146	6	0x556526024220
LESS	<	1146	7
DECIMAL	16	1146	8	16
RPAREN	)	1146	10
LBRACE	{	1146	11
IF	if	1147	0
LPAREN	(	1147	2
ID	x	1147	3	0x556526024248
MOD	%	1147	4
DECIMAL	2	1147	5	2
AND	&&	1147	6
ID	y	1147	8	0x556526024270
MOD	%	1147	9
DECIMAL	2	1147	10	2
RPAREN	)	1147	11
LBRACE	{	1147	12
ID	ans	1148	0	0x5565260241f8
ASSIGN	=	1148	3
ID	ans	1148	4	0x5565260241f8
ADD	+	1148	7
DECIMAL	1	1148	8	1
MUL	*	1148	9
ID	SHIFT_TABLE	1148	10	0x5565260241a8
LBRACKET	[	1148	21
ID	i	1148	22	0x556526024220
RBRACKET	]	1148	23
SEMICOLON	;	1148	24
RBRACE	}	1149	0
ID	x	1150	0	0x556526024248
ASSIGN	=	1150	1
ID	x	1150	2	0x556526024248
DIV	/	1150	3
DECIMAL	2	1150	4	2
SEMICOLON	;	1150	5
ID	y	1151	0	0x556526024270
ASSIGN	=	1151	1
ID	y	1151	2	0x556526024270
DIV	/	1151	3
DECIMAL	2	1151	4	2
SEMICOLON	;	1151	5
ID	i	1152	0	0x556526024220
ASSIGN	=	1152	1
ID	i	1152	2	0x556526024220
ADD	+	1152	3
DECIMAL	1	1152	4	1
SEMICOLON	;	1152	5
RBRACE	}	1153	0
ID	c	1154	0	0x5565260243d8
ASSIGN	=	1154	1
ID	ans	1154	2	0x5565260241f8
SEMICOLON	;	1154	5
IF	if	1155	0
LPAREN	(	1155	2
LPAREN	(	1155	3
DECIMAL	1	1155	4	1
RPAREN	)	1155	5
GREATER	>	1155	6
DECIMAL	15	1155	7	15
RPAREN	)	1155	9
LBRACE	{	1155	10
ID	ans	1156	0	0x5565260241f8
ASSIGN	=	1156	3
DECIMAL	0	1156	4	0
SEMICOLON	;	1156	5
RBRACE	}	1157	0
ELSE	else	1157	1
LBRACE	{	1157	5
ID	ans	1158	0	0x5565260241f8
ASSIGN	=	1158	3
DECIMAL	0	1158	4	0
SEMICOLON	;	1158	5
ID	i	1159	0	0x556526024220
ASSIGN	=	1159	1
DECIMAL	0	1159	2	0
SEMICOLON	;	1159	3
ID	x	1160	0	0x556526024248
ASSIGN	=	1160	1
LPAREN	(	1160	2
ID	c	1160	3	0x5565260243d8
RPAREN	)	1160	4
MUL	*	1160	5
ID	SHIFT_TABLE	1160	6	0x5565260241a8
LBRACKET	[	1160	17
DECIMAL	1	1160	18	1
RBRACKET	]	1160	19
SEMICOLON	;	1160	20
ID	y	1161	0	0x556526024270
ASSIGN	=	1161	1
HEXADECIMAL	0xffff	1161	2	65535
SEMICOLON	;	1161	8
WHILE	while	1162	0
LPAREN	(	1162	5
ID	i	1162	6	0x556526024220
LESS	<	1162	7
DECIMAL	16	1162	8	16
RPAREN	)	1162	10
LBRACE	{	1162	11
IF	if	1163	0
LPAREN	(	1163	2
ID	x	1163	3	0x556526024248
MOD	%	1163	4
DECIMAL	2	1163	5	2
AND	&&	1163	6
ID	y	1163	8	0x556526024270
MOD	%	1163	9
DECIMAL	2	1163	10	2
RPAREN	)	1163	11
LBRACE	{	1163	12
ID	ans	1164	0	0x5565260241f8
ASSIGN	=	1164	3
ID	ans	1164	4	0x5565260241f8
ADD	+	1164	7
DECIMAL	1	1164	8	1
MUL	*	1164	9
ID	SHIFT_TABLE	1164	10	0x5565260241a8
LBRACKET	[	1164	21
ID	i	1164	22	0x556526024220
RBRACKET	]	1164	23
SEMICOLON	;	1164	24
RBRACE	}	1165	0
ID	x	1166	0	0x556526024248
ASSIGN	=	1166	1
ID	x	1166	2	0x556526024248
DIV	/	1166	3
DECIMAL	2	1166	4	2
SEMICOLON	;	1166	5
ID	y	1167	0	0x556526024270
ASSIGN	=	1167	1
ID	y	1167	2	0x556526024270
DIV	/	1167	3
DECIMAL	2	1167	4	2
SEMICOLON	;	1167	5
ID	i	1168	0	0x556526024220
ASSIGN	=	1168	1
ID	i	1168	2	0x556526024220
ADD	+	1168	3
DECIMAL	1	1168	4	1
SEMICOLON	;	1168	5
RBRACE	}	1169	0
RBRACE	}	1170	0
ID	c	1171	0	0x5565260243d8
ASSIGN	=	1171	1
ID	ans	1171	2	0x5565260241f8
SEMICOLON	;	1171	5
ID	al	1172	0	0x5565260243b0
ASSIGN	=	1172	2
ID	sum	1172	3	0x556526024400
SEMICOLON	;	1172	6
RBRACE	}	1173	0
ID	ans	1174	0	0x5565260241f8
ASSIGN	=	1174	3
ID	al	1174	4	0x5565260243b0
SEMICOLON	;	1174	6
RBRACE	}	1175	0
ID	ml	1176	0	0x556526024338
ASSIGN	=	1176	2
ID	ans	1176	3	0x5565260241f8
SEMICOLON	;	1176	6
ID	x	1177	0	0x556526024248
ASSIGN	=	1177	1
ID	mr	1177	2	0x556526024360
SEMICOLON	;	1177	4
ID	y	1178	0	0x556526024270
ASSIGN	=	1178	1
DECIMAL	1	1178	2	1
SEMICOLON	;	1178	3
IF	if	1179	0
LPAREN	(	1179	2
ID	y	1179	3	0x556526024270
GEQUAL	>=	1179	4
DECIMAL	15	1179	6	15
RPAREN	)	1179	8
LBRACE	{	1179	9
IF	if	1180	0
LPAREN	(	1180	2
ID	x	1180	3	0x556526024248
LESS	<	1180	4
DECIMAL	0	1180	5	0
RPAREN	)	1180	6
LBRACE	{	1180	7
ID	ans	1181	0	0x5565260241f8
ASSIGN	=	1181	3
HEXADECIMAL	0xffff	1181	4	65535
SEMICOLON	;	1181	10
RBRACE	}	1182	0
ELSE	else	1182	1
LBRACE	{	1182	5
ID	ans	1183	0	0x5565260241f8
ASSIGN	=	1183	3
DECIMAL	0	1183	4	0
SEMICOLON	;	1183	5
RBRACE	}	1184	0
RBRACE	}	1185	0
ELSE	else	1185	1
IF	if	1185	5
LPAREN	(	1185	7
ID	y	1185	8	0x556526024270
GREATER	>	1185	9
DECIMAL	0	1185	10	0
RPAREN	)	1185	11
LBRACE	{	1185	12
IF	if	1186	0
LPAREN	(	1186	2
ID	x	1186	3	0x556526024248
GREATER	>	1186	4
HEXADECIMAL	0x7fff	1186	5	32767
RPAREN	)	1186	11
LBRACE	{	1186	12
ID	x	1187	0	0x556526024248
ASSIGN	=	1187	1
ID	x	1187	2	0x556526024248
DIV	/	1187	3
ID	SHIFT_TABLE	1187	4	0x5565260241a8
LBRACKET	[	1187	15
ID	y	1187	16	0x556526024270
RBRACKET	]	1187	17
SEMICOLON	;	1187	18
ID	ans	1188	0	0x5565260241f8
ASSIGN	=	1188	3
ID	x	1188	4	0x556526024248
ADD	+	1188	5
DECIMAL	65536	1188	6	65536
SUB	-	1188	11
ID	SHIFT_TABLE	1188	12	0x5565260241a8
LBRACKET	[	1188	23
DECIMAL	15	1188	24	15
SUB	-	1188	26
ID	y	1188	27	0x556526024270
ADD	+	1188	28
DECIMAL	1	1188	29	1
RBRACKET	]	1188	30
SEMICOLON	;	1188	31
RBRACE	}	1189	0
ELSE	else	1189	1
LBRACE	{	1189	5
ID	ans	1190	0	0x5565260241f8
ASSIGN	=	1190	3
ID	x	1190	4	0x556526024248
DIV	/	1190	5
ID	SHIFT_TABLE	1190	6	0x5565260241a8
LBRACKET	[	1190	17
ID	y	1190	18	0x556526024270
RBRACKET	]	1190	19
SEMICOLON	;	1190	20
RBRACE	}	1191	0
RBRACE	}	1192	0
ELSE	else	1192	1
LBRACE	{	1192	5
ID	ans	1193	0	0x5565260241f8
ASSIGN	=	1193	3
ID	x	1193	4	0x556526024248
SEMICOLON	;	1193	5
RBRACE	}	1194	0
ID	mr	1195	0	0x556526024360
ASSIGN	=	1195	2
ID	ans	1195	3	0x5565260241f8
SEMICOLON	;	1195	6
RBRACE	}	1196	0
ID	ans	1197	0	0x5565260241f8
ASSIGN	=	1197	3
ID	mres	1197	4	0x556526024388
SEMICOLON	;	1197	8
RBRACE	}	1198	0
ID	pres	1199	0	0x556526024310
ASSIGN	=	1199	4
ID	ans	1199	5	0x5565260241f8
SEMICOLON	;	1199	8
RBRACE	}	1200	0
LBRACE	{	1201	0
INT	int	1202	0
ID	ml	1202	3	0x556526024338
ASSIGN	=	1202	5
ID	pl	1202	6	0x5565260242c0
COMMA	,	1202	8
ID	mr	1202	9	0x556526024360
ASSIGN	=	1202	11
ID	pl	1202	12	0x5565260242c0
COMMA	,	1202	14
ID	mres	1202	15	0x556526024388
ASSIGN	=	1202	19
DECIMAL	0	1202	20	0
SEMICOLON	;	1202	21
WHILE	while	1203	0
LPAREN	(	1203	5
ID	mr	1203	6	0x556526024360
RPAREN	)	1203	8
LBRACE	{	1203	9
ID	ans	1204	0	0x5565260241f8
ASSIGN	=	1204	3
DECIMAL	0	1204	4	0
SEMICOLON	;	1204	5
ID	i	1205	0	0x556526024220
ASSIGN	=	1205	1
DECIMAL	0	1205	2	0
SEMICOLON	;	1205	3
ID	x	1206	0	0x556526024248
ASSIGN	=	1206	1
ID	mr	1206	2	0x556526024360
SEMICOLON	;	1206	4
ID	y	1207	0	0x556526024270
ASSIGN	=	1207	1
DECIMAL	1	1207	2	1
SEMICOLON	;	1207	3
WHILE	while	1208	0
LPAREN	(	1208	5
ID	i	1208	6	0x556526024220
LESS	<	1208	7
DECIMAL	16	1208	8	16
RPAREN	)	1208	10
LBRACE	{	1208	11
IF	if	1209	0
LPAREN	(	1209	2
ID	x	1209	3	0x556526024248
MOD	%	1209	4
DECIMAL	2	1209	5	2
AND	&&	1209	6
ID	y	1209	8	0x556526024270
MOD	%	1209	9
DECIMAL	2	1209	10	2
RPAREN	)	1209	11
LBRACE	{	1209	12
ID	ans	1210	0	0x5565260241f8
ASSIGN	=	1210	3
ID	ans	1210	4	0x5565260241f8
ADD	+	1210	7
DECIMAL	1	1210	8	1
MUL	*	1210	9
ID	SHIFT_TABLE	1210	10	0x5565260241a8
LBRACKET	[	1210	21
ID	i	1210	22	0x556526024220
RBRACKET	]	1210	23
SEMICOLON	;	1210	24
RBRACE	}	1211	0
ID	x	1212	0	0x556526024248
ASSIGN	=	1212	1
ID	x	1212	2	0x556526024248
DIV	/	1212	3
DECIMAL	2	1212	4	2
SEMICOLON	;	1212	5
ID	y	1213	0	0x556526024270
ASSIGN	=	1213	1
ID	y	1213	2	0x556526024270
DIV	/	1213	3
DECIMAL	2	1213	4	2
SEMICOLON	;	1213	5
ID	i	1214	0	0x556526024220
ASSIGN	=	1214	1
ID	i	1214	2	0x556526024220
ADD	+	1214	3
DECIMAL	1	1214	4	1
SEMICOLON	;	1214	5
RBRACE	}	1215	0
IF	if	1216	0
LPAREN	(	1216	2
ID	ans	1216	3	0x5565260241f8
RPAREN	)	1216	6
LBRACE	{	1216	7
LBRACE	{	1217	0
INT	int	1218	0
ID	al	1218	3	0x5565260243b0
ASSIGN	=	1218	5
ID	mres	1218	6	0x556526024388
COMMA	,	1218	10
ID	c	1218	11	0x5565260243d8
ASSIGN	=	1218	12
ID	ml	1218	13	0x556526024338
COMMA	,	1218	15
ID	sum	1218	16	0x556526024400
SEMICOLON	;	1218	19
WHILE	while	1219	0
LPAREN	(	1219	5
ID	c	1219	6	0x5565260243d8
RPAREN	)	1219	7
LBRACE	{	1219	8
ID	ans	1220	0	0x5565260241f8
ASSIGN	=	1220	3
DECIMAL	0	1220	4	0
SEMICOLON	;	1220	5
ID	i	1221	0	0x556526024220
ASSIGN	=	1221	1
DECIMAL	0	1221	2	0
SEMICOLON	;	1221	3
ID	x	1222	0	0x556526024248
ASSIGN	=	1222	1
ID	al	1222	2	0x5565260243b0
SEMICOLON	;	1222	4
ID	y	1223	0	0x556526024270
ASSIGN	=	1223	1
ID	c	1223	2	0x5565260243d8
SEMICOLON	;	1223	3
WHILE	while	1224	0
LPAREN	(	1224	5
ID	i	1224	6	0x556526024220
LESS	<	1224	7
DECIMAL	16	1224	8	16
RPAREN	)	1224	10
LBRACE	{	1224	11
IF	if	1225	0
LPAREN	(	1225	2
ID	x	1225	3	0x556526024248
MOD	%	1225	4
DECIMAL	2	1225	5	2
RPAREN	)	1225	6
LBRACE	{	1225	7
IF	if	1226	0
LPAREN	(	1226	2
ID	y	1226	3	0x556526024270
MOD	%	1226	4
DECIMAL	2	1226	5	2
EQUAL	==	1226	6
DECIMAL	0	1226	8	0
RPAREN	)	1226	9
LBRACE	{	1226	10
ID	ans	1227	0	0x5565260241f8
ASSIGN	=	1227	3
ID	ans	1227	4	0x5565260241f8
ADD	+	1227	7
DECIMAL	1	1227	8	1
MUL	*	1227	9
ID	SHIFT_TABLE	1227	10	0x5565260241a8
LBRACKET	[	1227	21
ID	i	1227	22	0x556526024220
RBRACKET	]	1227	23
SEMICOLON	;	1227	24
RBRACE	}	1228	0
RBRACE	}	1229	0
ELSE	else	1229	1
IF	if	1229	5
LPAREN	(	1229	7
ID	y	1229	8	0x556526024270
MOD	%	1229	9
DECIMAL	2	1229	10	2
RPAREN	)	1229	11
LBRACE	{	1229	12
ID	ans	1230	0	0x5565260241f8
ASSIGN	=	1230	3
ID	ans	1230	4	0x5565260241f8
ADD	+	1230	7
DECIMAL	1	1230	8	1
MUL	*	1230	9
ID	SHIFT_TABLE	1230	10	0x5565260241a8
LBRACKET	[	1230	21
ID	i	1230	22	0x556526024220
RBRACKET	]	1230	23
SEMICOLON	;	1230	24
RBRACE	}	1231	0
ID	x	1232	0	0x556526024248
ASSIGN	=	1232	1
ID	x	1232	2	0x556526024248
DIV	/	1232	3
DECIMAL	2	1232	4	2
SEMICOLON	;	1232	5
ID	y	1233	0	0x556526024270
ASSIGN	=	1233	1
ID	y	1233	2	0x556526024270
DIV	/	1233	3
DECIMAL	2	1233	4	2
SEMICOLON	;	1233	5
ID	i	1234	0	0x556526024220
ASSIGN	=	1234	1
ID	i	1234	2	0x556526024220
ADD	+	1234	3
DECIMAL	1	1234	4	1
SEMICOLON	;	1234	5
RBRACE	}	1235	0
ID	sum	1236	0	0x556526024400
ASSIGN	=	1236	3
ID	ans	1236	4	0x5565260241f8
SEMICOLON	;	1236	7
ID	ans	1237	0	0x5565260241f8
ASSIGN	=	1237	3
DECIMAL	0	1237	4	0
SEMICOLON	;	1237	5
ID	i	1238	0	0x556526024220
ASSIGN	=	1238	1
DECIMAL	0	1238	2	0
SEMICOLON	;	1238	3
ID	x	1239	0	0x556526024248
ASSIGN	=	1239	1
ID	al	1239	2	0x5565260243b0
SEMICOLON	;	1239	4
ID	y	1240	0	0x556526024270
ASSIGN	=	1240	1
ID	c	1240	2	0x5565260243d8
SEMICOLON	;	1240	3
WHILE	while	1241	0
LPAREN	(	1241	5
ID	i	1241	6	0x556526024220
LESS	<	1241	7
DECIMAL	16	1241	8	16
RPAREN	)	1241	10
LBRACE	{	1241	11
IF	if	1242	0
LPAREN	(	1242	2
ID	x	1242	3	0x556526024248
MOD	%	1242	4
DECIMAL	2	1242	5	2
AND	&&	1242	6
ID	y	1242	8	0x556526024270
MOD	%	1242	9
DECIMAL	2	1242	10	2
RPAREN	)	1242	11
LBRACE	{	1242	12
ID	ans	1243	0	0x5565260241f8
ASSIGN	=	1243	3
ID	ans	1243	4	0x5565260241f8
ADD	+	1243	7
DECIMAL	1	1243	8	1
MUL	*	1243	9
ID	SHIFT_TABLE	1243	10	0x5565260241a8
LBRACKET	[	1243	21
ID	i	1243	22	0x556526024220
RBRACKET	]	1243	23
SEMICOLON	;	1243	24
RBRACE	}	1244	0
ID	x	1245	0	0x556526024248
ASSIGN	=	1245	1
ID	x	1245	2	0x556526024248
DIV	/	1245	3
DECIMAL	2	1245	4	2
SEMICOLON	;	1245	5
ID	y	1246	0	0x556526024270
ASSIGN	=	1246	1
ID	y	1246	2	0x556526024270
DIV	/	1246	3
DECIMAL	2	1246	4	2
SEMICOLON	;	1246	5
ID	i	1247	0	0x556526024220
ASSIGN	=	1247	1
ID	i	1247	2	0x556526024220
ADD	+	1247	3
DECIMAL	1	1247	4	1
SEMICOLON	;	1247	5
RBRACE	}	1248	0
ID	c	1249	0	0x5565260243d8
ASSIGN	=	1249	1
ID	ans	1249	2	0x5565260241f8
SEMICOLON	;	1249	5
IF	if	1250	0
LPAREN	(	1250	2
LPAREN	(	1250	3
DECIMAL	1	1250	4	1
RPAREN	)	1250	5
GREATER	>	1250	6
DECIMAL	15	1250	7	15
RPAREN	)	1250	9
LBRACE	{	1250	10
ID	ans	1251	0	0x5565260241f8
ASSIGN	=	1251	3
DECIMAL	0	1251	4	0
SEMICOLON	;	1251	5
RBRACE	}	1252	0
ELSE	else	1252	1
LBRACE	{	1252	5
ID	ans	1253	0	0x5565260241f8
ASSIGN	=	1253	3
DECIMAL	0	1253	4	0
SEMICOLON	;	1253	5
ID	i	1254	0	0x556526024220
ASSIGN	=	1254	1
DECIMAL	0	1254	2	0
SEMICOLON	;	1254	3
ID	x	1255	0	0x556526024248
ASSIGN	=	1255	1
LPAREN	(	1255	2
ID	c	1255	3	0x5565260243d8
RPAREN	)	1255	4
MUL	*	1255	5
ID	SHIFT_TABLE	1255	6	0x5565260241a8
LBRACKET	[	1255	17
DECIMAL	1	1255	18	1
RBRACKET	]	1255	19
SEMICOLON	;	1255	20
ID	y	1256	0	0x556526024270
ASSIGN	=	1256	1
HEXADECIMAL	0xffff	1256	2	65535
SEMICOLON	;	1256	8
WHILE	while	1257	0
LPAREN	(	1257	5
ID	i	1257	6	0x556526024220
LESS	<	1257	7
DECIMAL	16	1257	8	16
RPAREN	)	1257	10
LBRACE	{	1257	11
IF	if	1258	0
LPAREN	(	1258	2
ID	x	1258	3	0x556526024248
MOD	%	1258	4
DECIMAL	2	1258	5	2
AND	&&	1258	6
ID	y	1258	8	0x556526024270
MOD	%	1258	9
DECIMAL	2	1258	10	2
RPAREN	)	1258	11
LBRACE	{	1258	12
ID	ans	1259	0	0x5565260241f8
ASSIGN	=	1259	3
ID	ans	1259	4	0x5565260241f8
ADD	+	1259	7
DECIMAL	1	1259	8	1
MUL	*	1259	9
ID	SHIFT_TABLE	1259	10	0x5565260241a8
LBRACKET	[	1259	21
ID	i	1259	22	0x556526024220
RBRACKET	]	1259	23
SEMICOLON	;	1259	24
RBRACE	}	1260	0
ID	x	1261	0	0x556526024248
ASSIGN	=	1261	1
ID	x	1261	2	0x556526024248
DIV	/	1261	3
DECIMAL	2	1261	4	2
SEMICOLON	;	1261	5
ID	y	1262	0	0x556526024270
ASSIGN	=	1262	1
ID	y	1262	2	0x556526024270
DIV	/	1262	3
DECIMAL	2	1262	4	2
SEMICOLON	;	1262	5
ID	i	1263	0	0x556526024220
ASSIGN	=	1263	1
ID	i	1263	2	0x556526024220
ADD	+	1263	3
DECIMAL	1	1263	4	1
SEMICOLON	;	1263	5
RBRACE	}	1264	0
RBRACE	}	1265	0
ID	c	1266	0	0x5565260243d8
ASSIGN	=	1266	1
ID	ans	1266	2	0x5565260241f8
SEMICOLON	;	1266	5
ID	al	1267	0	0x5565260243b0
ASSIGN	=	1267	2
ID	sum	1267	3	0x556526024400
SEMICOLON	;	1267	6
RBRACE	}	1268	0
ID	ans	1269	0	0x5565260241f8
ASSIGN	=	1269	3
ID	al	1269	4	0x5565260243b0
SEMICOLON	;	1269	6
RBRACE	}	1270	0
ID	mres	1271	0	0x556526024388
ASSIGN	=	1271	4
ID	ans	1271	5	0x5565260241f8
SEMICOLON	;	1271	8
RBRACE	}	1272	0
LBRACE	{	1273	0
INT	int	1274	0
ID	al	1274	3	0x5565260243b0
ASSIGN	=	1274	5
ID	ml	1274	6	0x556526024338
COMMA	,	1274	8
ID	c	1274	9	0x5565260243d8
ASSIGN	=	1274	10
ID	ml	1274	11	0x556526024338
COMMA	,	1274	13
ID	sum	1274	14	0x556526024400
SEMICOLON	;	1274	17
WHILE	while	1275	0
LPAREN	(	1275	5
ID	c	1275	6	0x5565260243d8
RPAREN	)	1275	7
LBRACE	{	1275	8
ID	ans	1276	0	0x5565260241f8
ASSIGN	=	1276	3
DECIMAL	0	1276	4	0
SEMICOLON	;	1276	5
ID	i	1277	0	0x556526024220
ASSIGN	=	1277	1
DECIMAL	0	1277	2	0
SEMICOLON	;	1277	3
ID	x	1278	0	0x556526024248
ASSIGN	=	1278	1
ID	al	1278	2	0x5565260243b0
SEMICOLON	;	1278	4
ID	y	1279	0	0x556526024270
ASSIGN	=	1279	1
ID	c	1279	2	0x5565260243d8
SEMICOLON	;	1279	3
WHILE	while	1280	0
LPAREN	(	1280	5
ID	i	1280	6	0x556526024220
LESS	<	1280	7
DECIMAL	16	1280	8	16
RPAREN	)	1280	10
LBRACE	{	1280	11
IF	if	1281	0
LPAREN	(	1281	2
ID	x	1281	3	0x556526024248
MOD	%	1281	4
DECIMAL	2	1281	5	2
RPAREN	)	1281	6
LBRACE	{	1281	7
IF	if	1282	0
LPAREN	(	1282	2
ID	y	1282	3	0x556526024270
MOD	%	1282	4
DECIMAL	2	1282	5	2
EQUAL	==	1282	6
DECIMAL	0	1282	8	0
RPAREN	)	1282	9
LBRACE	{	1282	10
ID	ans	1283	0	0x5565260241f8
ASSIGN	=	1283	3
ID	ans	1283	4	0x5565260241f8
ADD	+	1283	7
DECIMAL	1	1283	8	1
MUL	*	1283	9
ID	SHIFT_TABLE	1283	10	0x5565260241a8
LBRACKET	[	1283	21
ID	i	1283	22	0x556526024220
RBRACKET	]	1283	23
SEMICOLON	;	1283	24
RBRACE	}	1284	0
RBRACE	}	1285	0
ELSE	else	1285	1
IF	if	1285	5
LPAREN	(	1285	7
ID	y	1285	8	0x556526024270
MOD	%	1285	9
DECIMAL	2	1285	10	2
RPAREN	)	1285	11
LBRACE	{	1285	12
ID	ans	1286	0	0x5565260241f8
ASSIGN	=	1286	3
ID	ans	1286	4	0x5565260241f8
ADD	+	1286	7
DECIMAL	1	1286	8	1
MUL	*	1286	9
ID	SHIFT_TABLE	1286	10	0x5565260241a8
LBRACKET	[	1286	21
ID	i	1286	22	0x556526024220
RBRACKET	]	1286	23
SEMICOLON	;	1286	24
RBRACE	}	1287	0
ID	x	1288	0	0x556526024248
ASSIGN	=	1288	1
ID	x	1288	2	0x556526024248
DIV	/	1288	3
DECIMAL	2	1288	4	2
SEMICOLON	;	1288	5
ID	y	1289	0	0x556526024270
ASSIGN	=	1289	1
ID	y	1289	2	0x556526024270
DIV	/	1289	3
DECIMAL	2	1289	4	2
SEMICOLON	;	1289	5
ID	i	1290	0	0x556526024220
ASSIGN	=	1290	1
ID	i	1290	2	0x556526024220
ADD	+	1290	3
DECIMAL	1	1290	4	1
SEMICOLON	;	1290	5
RBRACE	}	1291	0
ID	sum	1292	0	0x556526024400
ASSIGN	=	1292	3
ID	ans	1292	4	0x5565260241f8
SEMICOLON	;	1292	7
ID	ans	1293	0	0x5565260241f8
ASSIGN	=	1293	3
DECIMAL	0	1293	4	0
SEMICOLON	;	1293	5
ID	i	1294	0	0x556526024220
ASSIGN	=	1294	1
DECIMAL	0	1294	2	0
SEMICOLON	;	1294	3
ID	x	1295	0	0x556526024248
ASSIGN	=	1295	1
ID	al	1295	2	0x5565260243b0
SEMICOLON	;	1295	4
ID	y	1296	0	0x556526024270
ASSIGN	=	1296	1
ID	c	1296	2	0x5565260243d8
SEMICOLON	;	1296	3
WHILE	while	1297	0
LPAREN	(	1297	5
ID	i	1297	6	0x556526024220
LESS	<	1297	7
DECIMAL	16	1297	8	16
RPAREN	)	1297	10
LBRACE	{	1297	11
IF	if	1298	0
LPAREN	(	1298	2
ID	x	1298	3	0x556526024248
MOD	%	1298	4
DECIMAL	2	1298	5	2
AND	&&	1298	6
ID	y	1298	8	0x556526024270
MOD	%	1298	9
DECIMAL	2	1298	10	2
RPAREN	)	1298	11
LBRACE	{	1298	12
ID	ans	1299	0	0x5565260241f8
ASSIGN	=	1299	3
ID	ans	1299	4	0x5565260241f8
ADD	+	1299	7
DECIMAL	1	1299	8	1
MUL	*	1299	9
ID	SHIFT_TABLE	1299	10	0x5565260241a8
LBRACKET	[	1299	21
ID	i	1299	22	0x556526024220
RBRACKET	]	1299	23
SEMICOLON	;	1299	24
RBRACE	}	1300	0
ID	x	1301	0	0x556526024248
ASSIGN	=	1301	1
ID	x	1301	2	0x556526024248
DIV	/	1301	3
DECIMAL	2	1301	4	2
SEMICOLON	;	1301	5
ID	y	1302	0	0x556526024270
ASSIGN	=	1302	1
ID	y	1302	2	0x556526024270
DIV	/	1302	3
DECIMAL	2	1302	4	2
SEMICOLON	;	1302	5
ID	i	1303	0	0x556526024220
ASSIGN	=	1303	1
ID	i	1303	2	0x556526024220
ADD	+	1303	3
DECIMAL	1	1303	4	1
SEMICOLON	;	1303	5
RBRACE	}	1304	0
ID	c	1305	0	0x5565260243d8
ASSIGN	=	1305	1
ID	ans	1305	2	0x5565260241f8
SEMICOLON	;	1305	5
IF	if	1306	0
LPAREN	(	1306	2
LPAREN	(	1306	3
DECIMAL	1	1306	4	1
RPAREN	)	1306	5
GREATER	>	1306	6
DECIMAL	15	1306	7	15
RPAREN	)	1306	9
LBRACE	{	1306	10
ID	ans	1307	0	0x5565260241f8
ASSIGN	=	1307	3
DECIMAL	0	1307	4	0
SEMICOLON	;	1307	5
RBRACE	}	1308	0
ELSE	else	1308	1
LBRACE	{	1308	5
ID	ans	1309	0	0x5565260241f8
ASSIGN	=	1309	3
DECIMAL	0	1309	4	0
SEMICOLON	;	1309	5
ID	i	1310	0	0x556526024220
ASSIGN	=	1310	1
DECIMAL	0	1310	2	0
SEMICOLON	;	1310	3
ID	x	1311	0	0x556526024248
ASSIGN	=	1311	1
LPAREN	(	1311	2
ID	c	1311	3	0x5565260243d8
RPAREN	)	1311	4
MUL	*	1311	5
ID	SHIFT_TABLE	1311	6	0x5565260241a8
LBRACKET	[	1311	17
DECIMAL	1	1311	18	1
RBRACKET	]	1311	19
SEMICOLON	;	1311	20
ID	y	1312	0	0x556526024270
ASSIGN	=	1312	1
HEXADECIMAL	0xffff	1312	2	65535
SEMICOLON	;	1312	8
WHILE	while	1313	0
LPAREN	(	1313	5
ID	i	1313	6	0x556526024220
LESS	<	1313	7
DECIMAL	16	1313	8	16
RPAREN	)	1313	10
LBRACE	{	1313	11
IF	if	1314	0
LPAREN	(	1314	2
ID	x	1314	3	0x556526024248
MOD	%	1314	4
DECIMAL	2	1314	5	2
AND	&&	1314	6
ID	y	1314	8	0x556526024270
MOD	%	1314	9
DECIMAL	2	1314	10	2
RPAREN	)	1314	11
LBRACE	{	1314	12
ID	ans	1315	0	0x5565260241f8
ASSIGN	=	1315	3
ID	ans	1315	4	0x5565260241f8
ADD	+	1315	7
DECIMAL	1	1315	8	1
MUL	*	1315	9
ID	SHIFT_TABLE	1315	10	0x5565260241a8
LBRACKET	[	1315	21
ID	i	1315	22	0x556526024220
RBRACKET	]	1315	23
SEMICOLON	;	1315	24
RBRACE	}	1316	0
ID	x	1317	0	0x556526024248
ASSIGN	=	1317	1
ID	x	1317	2	0x556526024248
DIV	/	1317	3
DECIMAL	2	1317	4	2
SEMICOLON	;	1317	5
ID	y	1318	0	0x556526024270
ASSIGN	=	1318	1
ID	y	1318	2	0x556526024270
DIV	/	1318	3
DECIMAL	2	1318	4	2
SEMICOLON	;	1318	5
ID	i	1319	0	0x556526024220
ASSIGN	=	1319	1
ID	i	1319	2	0x556526024220
ADD	+	1319	3
DECIMAL	1	1319	4	1
SEMICOLON	;	1319	5
RBRACE	}	1320	0
RBRACE	}	1321	0
ID	c	1322	0	0x5565260243d8
ASSIGN	=	1322	1
ID	ans	1322	2	0x5565260241f8
SEMICOLON	;	1322	5
ID	al	1323	0	0x5565260243b0
ASSIGN	=	1323	2
ID	sum	1323	3	0x556526024400
SEMICOLON	;	1323	6
RBRACE	}	1324	0
ID	ans	1325	0	0x5565260241f8
ASSIGN	=	1325	3
ID	al	1325	4	0x5565260243b0
SEMICOLON	;	1325	6
RBRACE	}	1326	0
ID	ml	1327	0	0x556526024338
ASSIGN	=	1327	2
ID	ans	1327	3	0x5565260241f8
SEMICOLON	;	1327	6
ID	x	1328	0	0x556526024248
ASSIGN	=	1328	1
ID	mr	1328	2	0x556526024360
SEMICOLON	;	1328	4
ID	y	1329	0	0x556526024270
ASSIGN	=	1329	1
DECIMAL	1	1329	2	1
SEMICOLON	;	1329	3
IF	if	1330	0
LPAREN	(	1330	2
ID	y	1330	3	0x556526024270
GEQUAL	>=	1330	4
DECIMAL	15	1330	6	15
RPAREN	)	1330	8
LBRACE	{	1330	9
IF	if	1331	0
LPAREN	(	1331	2
ID	x	1331	3	0x556526024248
LESS	<	1331	4
DECIMAL	0	1331	5	0
RPAREN	)	1331	6
LBRACE	{	1331	7
ID	ans	1332	0	0x5565260241f8
ASSIGN	=	1332	3
HEXADECIMAL	0xffff	1332	4	65535
SEMICOLON	;	1332	10
RBRACE	}	1333	0
ELSE	else	1333	1
LBRACE	{	1333	5
ID	ans	1334	0	0x5565260241f8
ASSIGN	=	1334	3
DECIMAL	0	1334	4	0
SEMICOLON	;	1334	5
RBRACE	}	1335	0
RBRACE	}	1336	0
ELSE	else	1336	1
IF	if	1336	5
LPAREN	(	1336	7
ID	y	1336	8	0x556526024270
GREATER	>	1336	9
DECIMAL	0	1336	10	0
RPAREN	)	1336	11
LBRACE	{	1336	12
IF	if	1337	0
LPAREN	(	1337	2
ID	x	1337	3	0x556526024248
GREATER	>	1337	4
HEXADECIMAL	0x7fff	1337	5	32767
RPAREN	)	1337	11
LBRACE	{	1337	12
ID	x	1338	0	0x556526024248
ASSIGN	=	1338	1
ID	x	1338	2	0x556526024248
DIV	/	1338	3
ID	SHIFT_TABLE	1338	4	0x5565260241a8
LBRACKET	[	1338	15
ID	y	1338	16	0x556526024270
RBRACKET	]	1338	17
SEMICOLON	;	1338	18
ID	ans	1339	0	0x5565260241f8
ASSIGN	=	1339	3
ID	x	1339	4	0x556526024248
ADD	+	1339	5
DECIMAL	65536	1339	6	65536
SUB	-	1339	11
ID	SHIFT_TABLE	1339	12	0x5565260241a8
LBRACKET	[	1339	23
DECIMAL	15	1339	24	15
SUB	-	1339	26
ID	y	1339	27	0x556526024270
ADD	+	1339	28
DECIMAL	1	1339	29	1
RBRACKET	]	1339	30
SEMICOLON	;	1339	31
RBRACE	}	1340	0
ELSE	else	1340	1
LBRACE	{	1340	5
ID	ans	1341	0	0x5565260241f8
ASSIGN	=	1341	3
ID	x	1341	4	0x556526024248
DIV	/	1341	5
ID	SHIFT_TABLE	1341	6	0x5565260241a8
LBRACKET	[	1341	17
ID	y	1341	18	0x556526024270
RBRACKET	]	1341	19
SEMICOLON	;	1341	20
RBRACE	}	1342	0
RBRACE	}	1343	0
ELSE	else	1343	1
LBRACE	{	1343	5
ID	ans	1344	0	0x5565260241f8
ASSIGN	=	1344	3
ID	x	1344	4	0x556526024248
SEMICOLON	;	1344	5
RBRACE	}	1345	0
ID	mr	1346	0	0x556526024360
ASSIGN	=	1346	2
ID	ans	1346	3	0x5565260241f8
SEMICOLON	;	1346	6
RBRACE	}	1347	0
ID	ans	1348	0	0x5565260241f8
ASSIGN	=	1348	3
ID	mres	1348	4	0x556526024388
SEMICOLON	;	1348	8
RBRACE	}	1349	0
ID	pl	1350	0	0x5565260242c0
ASSIGN	=	1350	2
ID	ans	1350	3	0x5565260241f8
SEMICOLON	;	1350	6
ID	x	1351	0	0x556526024248
ASSIGN	=	1351	1
ID	pr	1351	2	0x5565260242e8
SEMICOLON	;	1351	4
ID	y	1352	0	0x556526024270
ASSIGN	=	1352	1
DECIMAL	1	1352	2	1
SEMICOLON	;	1352	3
IF	if	1353	0
LPAREN	(	1353	2
ID	y	1353	3	0x556526024270
GEQUAL	>=	1353	4
DECIMAL	15	1353	6	15
RPAREN	)	1353	8
LBRACE	{	1353	9
IF	if	1354	0
LPAREN	(	1354	2
ID	x	1354	3	0x556526024248
LESS	<	1354	4
DECIMAL	0	1354	5	0
RPAREN	)	1354	6
LBRACE	{	1354	7
ID	ans	1355	0	0x5565260241f8
ASSIGN	=	1355	3
HEXADECIMAL	0xffff	1355	4	65535
SEMICOLON	;	1355	10
RBRACE	}	1356	0
ELSE	else	1356	1
LBRACE	{	1356	5
ID	ans	1357	0	0x5565260241f8
ASSIGN	=	1357	3
DECIMAL	0	1357	4	0
SEMICOLON	;	1357	5
RBRACE	}	1358	0
RBRACE	}	1359	0
ELSE	else	1359	1
IF	if	1359	5
LPAREN	(	1359	7
ID	y	1359	8	0x556526024270
GREATER	>	1359	9
DECIMAL	0	1359	10	0
RPAREN	)	1359	11
LBRACE	{	1359	12
IF	if	1360	0
LPAREN	(	1360	2
ID	x	1360	3	0x556526024248
GREATER	>	1360	4
HEXADECIMAL	0x7fff	1360	5	32767
RPAREN	)	1360	11
LBRACE	{	1360	12
ID	x	1361	0	0x556526024248
ASSIGN	=	1361	1
ID	x	1361	2	0x556526024248
DIV	/	1361	3
ID	SHIFT_TABLE	1361	4	0x5565260241a8
LBRACKET	[	1361	15
ID	y	1361	16	0x556526024270
RBRACKET	]	1361	17
SEMICOLON	;	1361	18
ID	ans	1362	0	0x5565260241f8
ASSIGN	=	1362	3
ID	x	1362	4	0x556526024248
ADD	+	1362	5
DECIMAL	65536	1362	6	65536
SUB	-	1362	11
ID	SHIFT_TABLE	1362	12	0x5565260241a8
LBRACKET	[	1362	23
DECIMAL	15	1362	24	15
SUB	-	1362	26
ID	y	1362	27	0x556526024270
ADD	+	1362	28
DECIMAL	1	1362	29	1
RBRACKET	]	1362	30
SEMICOLON	;	1362	31
RBRACE	}	1363	0
ELSE	else	1363	1
LBRACE	{	1363	5
ID	ans	1364	0	0x5565260241f8
ASSIGN	=	1364	3
ID	x	1364	4	0x556526024248
DIV	/	1364	5
ID	SHIFT_TABLE	1364	6	0x5565260241a8
LBRACKET	[	1364	17
ID	y	1364	18	0x556526024270
RBRACKET	]	1364	19
SEMICOLON	;	1364	20
RBRACE	}	1365	0
RBRACE	}	1366	0
ELSE	else	1366	1
LBRACE	{	1366	5
ID	ans	1367	0	0x5565260241f8
ASSIGN	=	1367	3
ID	x	1367	4	0x556526024248
SEMICOLON	;	1367	5
RBRACE	}	1368	0
ID	pr	1369	0	0x5565260242e8
ASSIGN	=	1369	2
ID	ans	1369	3	0x5565260241f8
SEMICOLON	;	1369	6
RBRACE	}	1370	0
ID	ans	1371	0	0x5565260241f8
ASSIGN	=	1371	3
ID	pres	1371	4	0x556526024310
SEMICOLON	;	1371	8
RBRACE	}	1372	0
IF	if	1373	0
LPAREN	(	1373	2
ID	SHIFT_TABLE	1373	3	0x5565260241a8
LBRACKET	[	1373	14
ID	cur	1373	15	0x556526024298
RBRACKET	]	1373	18
NEQUAL	!=	1373	19
ID	ans	1373	21	0x5565260241f8
RPAREN	)	1373	24
RETURN	return	1373	25
DECIMAL	1	1373	31	1
SEMICOLON	;	1373	32
ID	cur	1374	0	0x556526024298
ASSIGN	=	1374	3
ID	cur	1374	4	0x556526024298
ADD	+	1374	7
DECIMAL	1	1374	8	1
SEMICOLON	;	1374	9
RBRACE	}	1375	0
RETURN	return	1376	0
DECIMAL	0	1376	6	0
SEMICOLON	;	1376	7
RBRACE	}	1377	0
INT	int	1379	0
ID	main	1379	3	0x556526024478
LPAREN	(	1379	7
RPAREN	)	1379	8
LBRACE	{	1379	9
RETURN	return	1380	0
ID	long_func	1380	6	0x5565260241d0
LPAREN	(	1380	15
RPAREN	)	1380	16
SEMICOLON	;	1380	17
RBRACE	}	1381	0
