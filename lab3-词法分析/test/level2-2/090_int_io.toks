CONST	const	0	0
INT	int	0	5
ID	ascii_0	0	8	0x55fbb7f331a8
ASSIGN	=	0	15
DECIMAL	48	0	16	48
SEMICOLON	;	0	18
INT	int	2	0
ID	my_getint	2	3	0x55fbb7f331d0
LPAREN	(	2	12
RPAREN	)	2	13
LBRACE	{	3	0
INT	int	4	0
ID	sum	4	3	0x55fbb7f331f8
ASSIGN	=	4	6
DECIMAL	0	4	7	0
COMMA	,	4	8
ID	c	4	9	0x55fbb7f33220
SEMICOLON	;	4	10
WHILE	while	6	0
LPAREN	(	6	5
DECIMAL	1	6	6	1
RPAREN	)	6	7
LBRACE	{	6	8
ID	c	7	0	0x55fbb7f33220
ASSIGN	=	7	1
ID	getch	7	2	0x55fbb7f33248
LPAREN	(	7	7
RPAREN	)	7	8
SUB	-	7	9
ID	ascii_0	7	10	0x55fbb7f331a8
SEMICOLON	;	7	17
IF	if	8	0
LPAREN	(	8	2
ID	c	8	3	0x55fbb7f33220
LESS	<	8	4
DECIMAL	0	8	5	0
OR	||	8	6
ID	c	8	8	0x55fbb7f33220
GREATER	>	8	9
DECIMAL	9	8	10	9
RPAREN	)	8	11
LBRACE	{	8	12
CONTINUE	continue	9	0
SEMICOLON	;	9	8
RBRACE	}	10	0
ELSE	else	10	1
LBRACE	{	10	5
BREAK	break	11	0
SEMICOLON	;	11	5
RBRACE	}	12	0
RBRACE	}	13	0
ID	sum	14	0	0x55fbb7f331f8
ASSIGN	=	14	3
ID	c	14	4	0x55fbb7f33220
SEMICOLON	;	14	5
WHILE	while	16	0
LPAREN	(	16	5
DECIMAL	1	16	6	1
RPAREN	)	16	7
LBRACE	{	16	8
ID	c	17	0	0x55fbb7f33220
ASSIGN	=	17	1
ID	getch	17	2	0x55fbb7f33248
LPAREN	(	17	7
RPAREN	)	17	8
SUB	-	17	9
ID	ascii_0	17	10	0x55fbb7f331a8
SEMICOLON	;	17	17
IF	if	18	0
LPAREN	(	18	2
ID	c	18	3	0x55fbb7f33220
GEQUAL	>=	18	4
DECIMAL	0	18	6	0
AND	&&	18	7
ID	c	18	9	0x55fbb7f33220
LEQUAL	<=	18	10
DECIMAL	9	18	12	9
RPAREN	)	18	13
LBRACE	{	18	14
ID	sum	19	0	0x55fbb7f331f8
ASSIGN	=	19	3
ID	sum	19	4	0x55fbb7f331f8
MUL	*	19	7
DECIMAL	10	19	8	10
ADD	+	19	10
ID	c	19	11	0x55fbb7f33220
SEMICOLON	;	19	12
RBRACE	}	20	0
ELSE	else	20	1
LBRACE	{	20	5
BREAK	break	21	0
SEMICOLON	;	21	5
RBRACE	}	22	0
RBRACE	}	23	0
RETURN	return	25	0
ID	sum	25	6	0x55fbb7f331f8
SEMICOLON	;	25	9
RBRACE	}	26	0
VOID	void	28	0
ID	my_putint	28	4	0x55fbb7f33270
LPAREN	(	28	13
INT	int	28	14
ID	a	28	17	0x55fbb7f33298
RPAREN	)	28	18
LBRACE	{	29	0
INT	int	30	0
ID	b	30	3	0x55fbb7f332c0
LBRACKET	[	30	4
DECIMAL	16	30	5	16
RBRACKET	]	30	7
COMMA	,	30	8
ID	i	30	9	0x55fbb7f332e8
ASSIGN	=	30	10
DECIMAL	0	30	11	0
SEMICOLON	;	30	12
WHILE	while	31	0
LPAREN	(	31	5
ID	a	31	6	0x55fbb7f33298
GREATER	>	31	7
DECIMAL	0	31	8	0
RPAREN	)	31	9
LBRACE	{	31	10
ID	b	32	0	0x55fbb7f332c0
LBRACKET	[	32	1
ID	i	32	2	0x55fbb7f332e8
RBRACKET	]	32	3
ASSIGN	=	32	4
ID	a	32	5	0x55fbb7f33298
MOD	%	32	6
DECIMAL	10	32	7	10
ADD	+	32	9
ID	ascii_0	32	10	0x55fbb7f331a8
SEMICOLON	;	32	17
ID	a	33	0	0x55fbb7f33298
ASSIGN	=	33	1
ID	a	33	2	0x55fbb7f33298
DIV	/	33	3
DECIMAL	10	33	4	10
SEMICOLON	;	33	6
ID	i	34	0	0x55fbb7f332e8
ASSIGN	=	34	1
ID	i	34	2	0x55fbb7f332e8
ADD	+	34	3
DECIMAL	1	34	4	1
SEMICOLON	;	34	5
RBRACE	}	35	0
WHILE	while	36	0
LPAREN	(	36	5
ID	i	36	6	0x55fbb7f332e8
GREATER	>	36	7
DECIMAL	0	36	8	0
RPAREN	)	36	9
LBRACE	{	36	10
ID	i	37	0	0x55fbb7f332e8
ASSIGN	=	37	1
ID	i	37	2	0x55fbb7f332e8
SUB	-	37	3
DECIMAL	1	37	4	1
SEMICOLON	;	37	5
ID	putch	38	0	0x55fbb7f33310
LPAREN	(	38	5
ID	b	38	6	0x55fbb7f332c0
LBRACKET	[	38	7
ID	i	38	8	0x55fbb7f332e8
RBRACKET	]	38	9
RPAREN	)	38	10
SEMICOLON	;	38	11
RBRACE	}	39	0
RBRACE	}	40	0
INT	int	42	0
ID	main	42	3	0x55fbb7f33338
LPAREN	(	42	7
RPAREN	)	42	8
LBRACE	{	43	0
INT	int	44	0
ID	n	44	3	0x55fbb7f33360
ASSIGN	=	44	4
ID	my_getint	44	5	0x55fbb7f331d0
LPAREN	(	44	14
RPAREN	)	44	15
SEMICOLON	;	44	16
WHILE	while	45	0
LPAREN	(	45	5
ID	n	45	6	0x55fbb7f33360
GREATER	>	45	7
DECIMAL	0	45	8	0
RPAREN	)	45	9
LBRACE	{	45	10
INT	int	46	0
ID	m	46	3	0x55fbb7f33388
ASSIGN	=	46	4
ID	my_getint	46	5	0x55fbb7f331d0
LPAREN	(	46	14
RPAREN	)	46	15
SEMICOLON	;	46	16
ID	my_putint	47	0	0x55fbb7f33270
LPAREN	(	47	9
ID	m	47	10	0x55fbb7f33388
RPAREN	)	47	11
SEMICOLON	;	47	12
ID	putch	47	13	0x55fbb7f33310
LPAREN	(	47	18
DECIMAL	10	47	19	10
RPAREN	)	47	21
SEMICOLON	;	47	22
ID	n	48	0	0x55fbb7f33360
ASSIGN	=	48	1
ID	n	48	2	0x55fbb7f33360
SUB	-	48	3
DECIMAL	1	48	4	1
SEMICOLON	;	48	5
RBRACE	}	49	0
RETURN	return	50	0
DECIMAL	0	50	6	0
SEMICOLON	;	50	7
RBRACE	}	51	0
