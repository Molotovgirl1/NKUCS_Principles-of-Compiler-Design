INT	int	0	0
ID	main	0	3	0x555d0d2c31a8
LPAREN	(	0	7
RPAREN	)	0	8
LBRACE	{	1	0
INT	int	2	0
ID	i	2	3	0x555d0d2c31d0
SEMICOLON	;	2	4
INT	int	3	0
ID	j	3	3	0x555d0d2c31f8
SEMICOLON	;	3	4
INT	int	4	0
ID	k	4	3	0x555d0d2c3220
SEMICOLON	;	4	4
INT	int	5	0
ID	t	5	3	0x555d0d2c3248
SEMICOLON	;	5	4
ID	i	6	0	0x555d0d2c31d0
ASSIGN	=	6	1
DECIMAL	0	6	2	0
SEMICOLON	;	6	3
ID	j	6	4	0x555d0d2c31f8
ASSIGN	=	6	5
DECIMAL	0	6	6	0
SEMICOLON	;	6	7
ID	k	6	8	0x555d0d2c3220
ASSIGN	=	6	9
DECIMAL	0	6	10	0
SEMICOLON	;	6	11
WHILE	while	7	0
LPAREN	(	7	5
ID	i	7	6	0x555d0d2c31d0
LESS	<	7	7
DECIMAL	21	7	8	21
RPAREN	)	7	10
LBRACE	{	8	0
WHILE	while	9	0
LPAREN	(	9	5
ID	j	9	6	0x555d0d2c31f8
LESS	<	9	7
DECIMAL	101	9	8	101
SUB	-	9	11
ID	i	9	12	0x555d0d2c31d0
RPAREN	)	9	13
LBRACE	{	10	0
ID	k	11	0	0x555d0d2c3220
ASSIGN	=	11	1
DECIMAL	100	11	2	100
SUB	-	11	5
ID	i	11	6	0x555d0d2c31d0
SUB	-	11	7
ID	j	11	8	0x555d0d2c31f8
SEMICOLON	;	11	9
IF	if	12	0
LPAREN	(	12	2
DECIMAL	5	12	3	5
MUL	*	12	4
ID	i	12	5	0x555d0d2c31d0
ADD	+	12	6
DECIMAL	1	12	7	1
MUL	*	12	8
ID	j	12	9	0x555d0d2c31f8
ADD	+	12	10
ID	k	12	11	0x555d0d2c3220
DIV	/	12	12
DECIMAL	2	12	13	2
EQUAL	==	12	14
DECIMAL	100	12	16	100
RPAREN	)	12	19
LBRACE	{	13	0
ID	putint	14	0	0x555d0d2c3270
LPAREN	(	14	6
ID	i	14	7	0x555d0d2c31d0
RPAREN	)	14	8
SEMICOLON	;	14	9
ID	putint	15	0	0x555d0d2c3270
LPAREN	(	15	6
ID	j	15	7	0x555d0d2c31f8
RPAREN	)	15	8
SEMICOLON	;	15	9
ID	putint	16	0	0x555d0d2c3270
LPAREN	(	16	6
ID	k	16	7	0x555d0d2c3220
RPAREN	)	16	8
SEMICOLON	;	16	9
ID	t	17	0	0x555d0d2c3248
ASSIGN	=	17	1
DECIMAL	10	17	2	10
SEMICOLON	;	17	4
ID	putch	18	0	0x555d0d2c3298
LPAREN	(	18	5
ID	t	18	6	0x555d0d2c3248
RPAREN	)	18	7
SEMICOLON	;	18	8
RBRACE	}	19	0
ID	j	20	0	0x555d0d2c31f8
ASSIGN	=	20	1
ID	j	20	2	0x555d0d2c31f8
ADD	+	20	3
DECIMAL	1	20	4	1
SEMICOLON	;	20	5
RBRACE	}	21	0
ID	i	22	0	0x555d0d2c31d0
ASSIGN	=	22	1
ID	i	22	2	0x555d0d2c31d0
ADD	+	22	3
DECIMAL	1	22	4	1
SEMICOLON	;	22	5
RBRACE	}	23	0
RETURN	return	25	0
DECIMAL	0	25	6	0
SEMICOLON	;	25	7
RBRACE	}	26	0
