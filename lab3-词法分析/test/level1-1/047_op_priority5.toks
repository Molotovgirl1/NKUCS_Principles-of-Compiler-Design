INT	int	0	0
ID	a	0	3	0x56347ac851a8
ASSIGN	=	0	4
DECIMAL	1	0	5	1
SEMICOLON	;	0	6
INT	int	1	0
ID	b	1	3	0x56347ac851d0
ASSIGN	=	1	4
DECIMAL	0	1	5	0
SEMICOLON	;	1	6
INT	int	2	0
ID	c	2	3	0x56347ac851f8
ASSIGN	=	2	4
DECIMAL	1	2	5	1
SEMICOLON	;	2	6
INT	int	3	0
ID	d	3	3	0x56347ac85220
ASSIGN	=	3	4
DECIMAL	2	3	5	2
SEMICOLON	;	3	6
INT	int	4	0
ID	e	4	3	0x56347ac85248
ASSIGN	=	4	4
DECIMAL	4	4	5	4
SEMICOLON	;	4	6
INT	int	5	0
ID	main	5	3	0x56347ac85270
LPAREN	(	5	7
RPAREN	)	5	8
LBRACE	{	6	0
INT	int	7	0
ID	flag	7	3	0x56347ac85298
ASSIGN	=	7	7
DECIMAL	0	7	8	0
SEMICOLON	;	7	9
IF	if	8	0
LPAREN	(	8	2
ID	a	8	3	0x56347ac851a8
MUL	*	8	4
ID	b	8	5	0x56347ac851d0
DIV	/	8	6
ID	c	8	7	0x56347ac851f8
EQUAL	==	8	8
ID	e	8	10	0x56347ac85248
ADD	+	8	11
ID	d	8	12	0x56347ac85220
AND	&&	8	13
ID	a	8	15	0x56347ac851a8
MUL	*	8	16
LPAREN	(	8	17
ID	a	8	18	0x56347ac851a8
ADD	+	8	19
ID	b	8	20	0x56347ac851d0
RPAREN	)	8	21
ADD	+	8	22
ID	c	8	23	0x56347ac851f8
LEQUAL	<=	8	24
ID	d	8	26	0x56347ac85220
ADD	+	8	27
ID	e	8	28	0x56347ac85248
OR	||	8	29
ID	a	8	31	0x56347ac851a8
SUB	-	8	32
LPAREN	(	8	33
ID	b	8	34	0x56347ac851d0
MUL	*	8	35
ID	c	8	36	0x56347ac851f8
RPAREN	)	8	37
EQUAL	==	8	38
ID	d	8	40	0x56347ac85220
SUB	-	8	41
ID	a	8	42	0x56347ac851a8
DIV	/	8	43
ID	c	8	44	0x56347ac851f8
RPAREN	)	8	45
LBRACE	{	9	0
ID	flag	10	0	0x56347ac85298
ASSIGN	=	10	4
DECIMAL	1	10	5	1
SEMICOLON	;	10	6
RBRACE	}	11	0
ID	putint	12	0	0x56347ac852c0
LPAREN	(	12	6
ID	flag	12	7	0x56347ac85298
RPAREN	)	12	11
SEMICOLON	;	12	12
RETURN	return	13	0
ID	flag	13	6	0x56347ac85298
SEMICOLON	;	13	10
RBRACE	}	14	0
