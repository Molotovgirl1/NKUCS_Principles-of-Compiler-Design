INT	int	0	0
ID	a	0	3	0x5633f703a1a8
COMMA	,	0	4
ID	b	0	5	0x5633f703a1d0
COMMA	,	0	6
ID	d	0	7	0x5633f703a1f8
SEMICOLON	;	0	8
INT	int	2	0
ID	set_a	2	3	0x5633f703a220
LPAREN	(	2	8
INT	int	2	9
ID	val	2	12	0x5633f703a248
RPAREN	)	2	15
LBRACE	{	2	16
ID	a	2	17	0x5633f703a1a8
ASSIGN	=	2	18
ID	val	2	19	0x5633f703a248
SEMICOLON	;	2	22
RETURN	return	2	23
ID	a	2	29	0x5633f703a1a8
SEMICOLON	;	2	30
RBRACE	}	2	31
INT	int	3	0
ID	set_b	3	3	0x5633f703a270
LPAREN	(	3	8
INT	int	3	9
ID	val	3	12	0x5633f703a248
RPAREN	)	3	15
LBRACE	{	3	16
ID	b	3	17	0x5633f703a1d0
ASSIGN	=	3	18
ID	val	3	19	0x5633f703a248
SEMICOLON	;	3	22
RETURN	return	3	23
ID	b	3	29	0x5633f703a1d0
SEMICOLON	;	3	30
RBRACE	}	3	31
INT	int	4	0
ID	set_d	4	3	0x5633f703a298
LPAREN	(	4	8
INT	int	4	9
ID	val	4	12	0x5633f703a248
RPAREN	)	4	15
LBRACE	{	4	16
ID	d	4	17	0x5633f703a1f8
ASSIGN	=	4	18
ID	val	4	19	0x5633f703a248
SEMICOLON	;	4	22
RETURN	return	4	23
ID	d	4	29	0x5633f703a1f8
SEMICOLON	;	4	30
RBRACE	}	4	31
INT	int	6	0
ID	main	6	3	0x5633f703a2c0
LPAREN	(	6	7
RPAREN	)	6	8
LBRACE	{	7	0
ID	a	8	0	0x5633f703a1a8
ASSIGN	=	8	1
DECIMAL	2	8	2	2
SEMICOLON	;	8	3
ID	b	8	4	0x5633f703a1d0
ASSIGN	=	8	5
DECIMAL	3	8	6	3
SEMICOLON	;	8	7
IF	if	9	0
LPAREN	(	9	2
ID	set_a	9	3	0x5633f703a220
LPAREN	(	9	8
DECIMAL	0	9	9	0
RPAREN	)	9	10
AND	&&	9	11
ID	set_b	9	13	0x5633f703a270
LPAREN	(	9	18
DECIMAL	1	9	19	1
RPAREN	)	9	20
RPAREN	)	9	21
LBRACE	{	9	22
RBRACE	}	9	23
ID	putint	10	0	0x5633f703a2e8
LPAREN	(	10	6
ID	a	10	7	0x5633f703a1a8
RPAREN	)	10	8
SEMICOLON	;	10	9
ID	putch	10	10	0x5633f703a310
LPAREN	(	10	15
DECIMAL	32	10	16	32
RPAREN	)	10	18
SEMICOLON	;	10	19
ID	putint	11	0	0x5633f703a2e8
LPAREN	(	11	6
ID	b	11	7	0x5633f703a1d0
RPAREN	)	11	8
SEMICOLON	;	11	9
ID	putch	11	10	0x5633f703a310
LPAREN	(	11	15
DECIMAL	32	11	16	32
RPAREN	)	11	18
SEMICOLON	;	11	19
ID	a	13	0	0x5633f703a1a8
ASSIGN	=	13	1
DECIMAL	2	13	2	2
SEMICOLON	;	13	3
ID	b	13	4	0x5633f703a1d0
ASSIGN	=	13	5
DECIMAL	3	13	6	3
SEMICOLON	;	13	7
IF	if	14	0
LPAREN	(	14	2
ID	set_a	14	3	0x5633f703a220
LPAREN	(	14	8
DECIMAL	0	14	9	0
RPAREN	)	14	10
AND	&&	14	11
ID	set_b	14	13	0x5633f703a270
LPAREN	(	14	18
DECIMAL	1	14	19	1
RPAREN	)	14	20
RPAREN	)	14	21
SEMICOLON	;	14	22
ID	putint	15	0	0x5633f703a2e8
LPAREN	(	15	6
ID	a	15	7	0x5633f703a1a8
RPAREN	)	15	8
SEMICOLON	;	15	9
ID	putch	15	10	0x5633f703a310
LPAREN	(	15	15
DECIMAL	32	15	16	32
RPAREN	)	15	18
SEMICOLON	;	15	19
ID	putint	16	0	0x5633f703a2e8
LPAREN	(	16	6
ID	b	16	7	0x5633f703a1d0
RPAREN	)	16	8
SEMICOLON	;	16	9
ID	putch	16	10	0x5633f703a310
LPAREN	(	16	15
DECIMAL	10	16	16	10
RPAREN	)	16	18
SEMICOLON	;	16	19
CONST	const	18	0
INT	int	18	5
ID	c	18	8	0x5633f703a338
ASSIGN	=	18	9
DECIMAL	1	18	10	1
SEMICOLON	;	18	11
ID	d	19	0	0x5633f703a1f8
ASSIGN	=	19	1
DECIMAL	2	19	2	2
SEMICOLON	;	19	3
IF	if	20	0
LPAREN	(	20	2
ID	c	20	3	0x5633f703a338
GEQUAL	>=	20	4
DECIMAL	1	20	6	1
AND	&&	20	7
ID	set_d	20	9	0x5633f703a298
LPAREN	(	20	14
DECIMAL	3	20	15	3
RPAREN	)	20	16
RPAREN	)	20	17
SEMICOLON	;	20	18
ID	putint	21	0	0x5633f703a2e8
LPAREN	(	21	6
ID	d	21	7	0x5633f703a1f8
RPAREN	)	21	8
SEMICOLON	;	21	9
ID	putch	21	10	0x5633f703a310
LPAREN	(	21	15
DECIMAL	32	21	16	32
RPAREN	)	21	18
SEMICOLON	;	21	19
IF	if	22	0
LPAREN	(	22	2
ID	c	22	3	0x5633f703a338
LEQUAL	<=	22	4
DECIMAL	1	22	6	1
OR	||	22	7
ID	set_d	22	9	0x5633f703a298
LPAREN	(	22	14
DECIMAL	4	22	15	4
RPAREN	)	22	16
RPAREN	)	22	17
LBRACE	{	22	18
RBRACE	}	22	19
ID	putint	23	0	0x5633f703a2e8
LPAREN	(	23	6
ID	d	23	7	0x5633f703a1f8
RPAREN	)	23	8
SEMICOLON	;	23	9
ID	putch	23	10	0x5633f703a310
LPAREN	(	23	15
DECIMAL	10	23	16	10
RPAREN	)	23	18
SEMICOLON	;	23	19
IF	if	25	0
LPAREN	(	25	2
DECIMAL	16	25	3	16
GEQUAL	>=	25	5
LPAREN	(	25	7
DECIMAL	3	25	8	3
SUB	-	25	9
LPAREN	(	25	10
DECIMAL	2	25	11	2
ADD	+	25	12
DECIMAL	1	25	13	1
RPAREN	)	25	14
RPAREN	)	25	15
RPAREN	)	25	16
LBRACE	{	25	17
ID	putch	25	18	0x5633f703a310
LPAREN	(	25	23
DECIMAL	65	25	24	65
RPAREN	)	25	26
SEMICOLON	;	25	27
RBRACE	}	25	28
IF	if	26	0
LPAREN	(	26	2
LPAREN	(	26	3
DECIMAL	25	26	4	25
SUB	-	26	6
DECIMAL	7	26	7	7
RPAREN	)	26	8
NEQUAL	!=	26	9
LPAREN	(	26	11
DECIMAL	36	26	12	36
SUB	-	26	14
DECIMAL	6	26	15	6
MUL	*	26	16
DECIMAL	3	26	17	3
RPAREN	)	26	18
RPAREN	)	26	19
ID	putch	26	20	0x5633f703a310
LPAREN	(	26	25
DECIMAL	66	26	26	66
RPAREN	)	26	28
SEMICOLON	;	26	29
IF	if	27	0
LPAREN	(	27	2
DECIMAL	1	27	3	1
LESS	<	27	4
DECIMAL	8	27	5	8
NEQUAL	!=	27	6
DECIMAL	7	27	8	7
MOD	%	27	9
DECIMAL	2	27	10	2
RPAREN	)	27	11
LBRACE	{	27	12
ID	putch	27	13	0x5633f703a310
LPAREN	(	27	18
DECIMAL	67	27	19	67
RPAREN	)	27	21
SEMICOLON	;	27	22
RBRACE	}	27	23
IF	if	28	0
LPAREN	(	28	2
DECIMAL	3	28	3	3
GREATER	>	28	4
DECIMAL	4	28	5	4
EQUAL	==	28	6
DECIMAL	0	28	8	0
RPAREN	)	28	9
LBRACE	{	28	10
ID	putch	28	11	0x5633f703a310
LPAREN	(	28	16
DECIMAL	68	28	17	68
RPAREN	)	28	19
SEMICOLON	;	28	20
RBRACE	}	28	21
IF	if	29	0
LPAREN	(	29	2
DECIMAL	1	29	3	1
EQUAL	==	29	4
HEXADECIMAL	0x66	29	6	102
LEQUAL	<=	29	10
OCTAL	077	29	12	63
RPAREN	)	29	15
ID	putch	29	16	0x5633f703a310
LPAREN	(	29	21
DECIMAL	69	29	22	69
RPAREN	)	29	24
SEMICOLON	;	29	25
IF	if	30	0
LPAREN	(	30	2
DECIMAL	5	30	3	5
SUB	-	30	4
DECIMAL	6	30	5	6
EQUAL	==	30	6
SUB	-	30	8
NOT	!	30	9
DECIMAL	0	30	10	0
RPAREN	)	30	11
ID	putch	30	12	0x5633f703a310
LPAREN	(	30	17
DECIMAL	70	30	18	70
RPAREN	)	30	20
SEMICOLON	;	30	21
ID	putch	31	0	0x5633f703a310
LPAREN	(	31	5
DECIMAL	10	31	6	10
RPAREN	)	31	8
SEMICOLON	;	31	9
INT	int	33	0
ID	i0	33	3	0x5633f703a360
ASSIGN	=	33	5
DECIMAL	0	33	6	0
COMMA	,	33	7
ID	i1	33	8	0x5633f703a388
ASSIGN	=	33	10
DECIMAL	1	33	11	1
COMMA	,	33	12
ID	i2	33	13	0x5633f703a3b0
ASSIGN	=	33	15
DECIMAL	2	33	16	2
COMMA	,	33	17
ID	i3	33	18	0x5633f703a3d8
ASSIGN	=	33	20
DECIMAL	3	33	21	3
COMMA	,	33	22
ID	i4	33	23	0x5633f703a400
ASSIGN	=	33	25
DECIMAL	4	33	26	4
SEMICOLON	;	33	27
WHILE	while	34	0
LPAREN	(	34	5
ID	i0	34	6	0x5633f703a360
AND	&&	34	8
ID	i1	34	10	0x5633f703a388
RPAREN	)	34	12
ID	putch	34	13	0x5633f703a310
LPAREN	(	34	18
DECIMAL	32	34	19	32
RPAREN	)	34	21
SEMICOLON	;	34	22
IF	if	35	0
LPAREN	(	35	2
ID	i0	35	3	0x5633f703a360
OR	||	35	5
ID	i1	35	7	0x5633f703a388
RPAREN	)	35	9
ID	putch	35	10	0x5633f703a310
LPAREN	(	35	15
DECIMAL	67	35	16	67
RPAREN	)	35	18
SEMICOLON	;	35	19
IF	if	36	0
LPAREN	(	36	2
ID	i0	36	3	0x5633f703a360
GEQUAL	>=	36	5
ID	i1	36	7	0x5633f703a388
OR	||	36	9
ID	i1	36	11	0x5633f703a388
LEQUAL	<=	36	13
ID	i0	36	15	0x5633f703a360
RPAREN	)	36	17
ID	putch	36	18	0x5633f703a310
LPAREN	(	36	23
DECIMAL	72	36	24	72
RPAREN	)	36	26
SEMICOLON	;	36	27
IF	if	37	0
LPAREN	(	37	2
ID	i2	37	3	0x5633f703a3b0
GEQUAL	>=	37	5
ID	i1	37	7	0x5633f703a388
AND	&&	37	9
ID	i4	37	11	0x5633f703a400
NEQUAL	!=	37	13
ID	i3	37	15	0x5633f703a3d8
RPAREN	)	37	17
LBRACE	{	37	18
ID	putch	37	19	0x5633f703a310
LPAREN	(	37	24
DECIMAL	73	37	25	73
RPAREN	)	37	27
SEMICOLON	;	37	28
RBRACE	}	37	29
IF	if	38	0
LPAREN	(	38	2
ID	i0	38	3	0x5633f703a360
EQUAL	==	38	5
NOT	!	38	7
ID	i1	38	8	0x5633f703a388
AND	&&	38	10
ID	i3	38	12	0x5633f703a3d8
LESS	<	38	14
ID	i3	38	15	0x5633f703a3d8
OR	||	38	17
ID	i4	38	19	0x5633f703a400
GEQUAL	>=	38	21
ID	i4	38	23	0x5633f703a400
RPAREN	)	38	25
LBRACE	{	38	26
ID	putch	38	27	0x5633f703a310
LPAREN	(	38	32
DECIMAL	74	38	33	74
RPAREN	)	38	35
SEMICOLON	;	38	36
RBRACE	}	38	37
IF	if	39	0
LPAREN	(	39	2
ID	i0	39	3	0x5633f703a360
EQUAL	==	39	5
NOT	!	39	7
ID	i1	39	8	0x5633f703a388
OR	||	39	10
ID	i3	39	12	0x5633f703a3d8
LESS	<	39	14
ID	i3	39	15	0x5633f703a3d8
AND	&&	39	17
ID	i4	39	19	0x5633f703a400
GEQUAL	>=	39	21
ID	i4	39	23	0x5633f703a400
RPAREN	)	39	25
ID	putch	39	26	0x5633f703a310
LPAREN	(	39	31
DECIMAL	75	39	32	75
RPAREN	)	39	34
SEMICOLON	;	39	35
ID	putch	40	0	0x5633f703a310
LPAREN	(	40	5
DECIMAL	10	40	6	10
RPAREN	)	40	8
SEMICOLON	;	40	9
RETURN	return	42	0
DECIMAL	0	42	6	0
SEMICOLON	;	42	7
RBRACE	}	43	0
