INT	int	0	0
ID	deepWhileBr	0	3	0x56483a08c1a8
LPAREN	(	0	14
INT	int	0	15
ID	a	0	18	0x56483a08c1d0
COMMA	,	0	19
INT	int	0	20
ID	b	0	23	0x56483a08c1f8
RPAREN	)	0	24
LBRACE	{	0	25
INT	int	1	0
ID	c	1	3	0x56483a08c220
SEMICOLON	;	1	4
ID	c	2	0	0x56483a08c220
ASSIGN	=	2	1
ID	a	2	2	0x56483a08c1d0
ADD	+	2	3
ID	b	2	4	0x56483a08c1f8
SEMICOLON	;	2	5
WHILE	while	3	0
LPAREN	(	3	5
ID	c	3	6	0x56483a08c220
LESS	<	3	7
DECIMAL	75	3	8	75
RPAREN	)	3	10
LBRACE	{	3	11
INT	int	4	0
ID	d	4	3	0x56483a08c248
SEMICOLON	;	4	4
ID	d	5	0	0x56483a08c248
ASSIGN	=	5	1
DECIMAL	42	5	2	42
SEMICOLON	;	5	4
IF	if	6	0
LPAREN	(	6	2
ID	c	6	3	0x56483a08c220
LESS	<	6	4
DECIMAL	100	6	5	100
RPAREN	)	6	8
LBRACE	{	6	9
ID	c	7	0	0x56483a08c220
ASSIGN	=	7	1
ID	c	7	2	0x56483a08c220
ADD	+	7	3
ID	d	7	4	0x56483a08c248
SEMICOLON	;	7	5
IF	if	8	0
LPAREN	(	8	2
ID	c	8	3	0x56483a08c220
GREATER	>	8	4
DECIMAL	99	8	5	99
RPAREN	)	8	7
LBRACE	{	8	8
INT	int	9	0
ID	e	9	3	0x56483a08c270
SEMICOLON	;	9	4
ID	e	10	0	0x56483a08c270
ASSIGN	=	10	1
ID	d	10	2	0x56483a08c248
MUL	*	10	3
DECIMAL	2	10	4	2
SEMICOLON	;	10	5
IF	if	11	0
LPAREN	(	11	2
DECIMAL	1	11	3	1
EQUAL	==	11	4
DECIMAL	1	11	6	1
RPAREN	)	11	7
LBRACE	{	11	8
ID	c	12	0	0x56483a08c220
ASSIGN	=	12	1
ID	e	12	2	0x56483a08c270
MUL	*	12	3
DECIMAL	2	12	4	2
SEMICOLON	;	12	5
RBRACE	}	13	0
RBRACE	}	14	0
RBRACE	}	15	0
RBRACE	}	16	0
RETURN	return	17	0
LPAREN	(	17	6
ID	c	17	7	0x56483a08c220
RPAREN	)	17	8
SEMICOLON	;	17	9
RBRACE	}	18	0
INT	int	20	0
ID	main	20	3	0x56483a08c298
LPAREN	(	20	7
RPAREN	)	20	8
LBRACE	{	20	9
INT	int	21	0
ID	p	21	3	0x56483a08c2c0
SEMICOLON	;	21	4
ID	p	22	0	0x56483a08c2c0
ASSIGN	=	22	1
DECIMAL	2	22	2	2
SEMICOLON	;	22	3
RETURN	return	23	0
ID	deepWhileBr	23	6	0x56483a08c1a8
LPAREN	(	23	17
ID	p	23	18	0x56483a08c2c0
COMMA	,	23	19
ID	p	23	20	0x56483a08c2c0
RPAREN	)	23	21
SEMICOLON	;	23	22
RBRACE	}	24	0
