INT	int	0	0
ID	ifWhile	0	3	0x55bb0d1591a8
LPAREN	(	0	10
RPAREN	)	0	11
LBRACE	{	0	12
INT	int	1	0
ID	a	1	3	0x55bb0d1591d0
SEMICOLON	;	1	4
ID	a	2	0	0x55bb0d1591d0
ASSIGN	=	2	1
DECIMAL	0	2	2	0
SEMICOLON	;	2	3
INT	int	3	0
ID	b	3	3	0x55bb0d1591f8
SEMICOLON	;	3	4
ID	b	4	0	0x55bb0d1591f8
ASSIGN	=	4	1
DECIMAL	3	4	2	3
SEMICOLON	;	4	3
IF	if	5	0
LPAREN	(	5	2
ID	a	5	3	0x55bb0d1591d0
EQUAL	==	5	4
DECIMAL	5	5	6	5
RPAREN	)	5	7
LBRACE	{	5	8
WHILE	while	6	0
LPAREN	(	6	5
ID	b	6	6	0x55bb0d1591f8
EQUAL	==	6	7
DECIMAL	2	6	9	2
RPAREN	)	6	10
LBRACE	{	6	11
ID	b	7	0	0x55bb0d1591f8
ASSIGN	=	7	1
ID	b	7	2	0x55bb0d1591f8
ADD	+	7	3
DECIMAL	2	7	4	2
SEMICOLON	;	7	5
RBRACE	}	8	0
ID	b	9	0	0x55bb0d1591f8
ASSIGN	=	9	1
ID	b	9	2	0x55bb0d1591f8
ADD	+	9	3
DECIMAL	25	9	4	25
SEMICOLON	;	9	6
RBRACE	}	10	0
ELSE	else	11	0
WHILE	while	12	0
LPAREN	(	12	5
ID	a	12	6	0x55bb0d1591d0
LESS	<	12	7
DECIMAL	5	12	8	5
RPAREN	)	12	9
LBRACE	{	12	10
ID	b	13	0	0x55bb0d1591f8
ASSIGN	=	13	1
ID	b	13	2	0x55bb0d1591f8
MUL	*	13	3
DECIMAL	2	13	4	2
SEMICOLON	;	13	5
ID	a	14	0	0x55bb0d1591d0
ASSIGN	=	14	1
ID	a	14	2	0x55bb0d1591d0
ADD	+	14	3
DECIMAL	1	14	4	1
SEMICOLON	;	14	5
RBRACE	}	15	0
RETURN	return	16	0
LPAREN	(	16	6
ID	b	16	7	0x55bb0d1591f8
RPAREN	)	16	8
SEMICOLON	;	16	9
RBRACE	}	17	0
INT	int	20	0
ID	main	20	3	0x55bb0d159220
LPAREN	(	20	7
RPAREN	)	20	8
LBRACE	{	20	9
RETURN	return	21	0
LPAREN	(	21	6
ID	ifWhile	21	7	0x55bb0d1591a8
LPAREN	(	21	14
RPAREN	)	21	15
RPAREN	)	21	16
SEMICOLON	;	21	17
RBRACE	}	22	0
