CONST	const	0	0
INT	int	0	5
ID	MAX_WIDTH	0	8	0x561852ae51a8
ASSIGN	=	0	17
DECIMAL	1024	0	18	1024
COMMA	,	0	22
ID	MAX_HEIGHT	0	23	0x561852ae51d0
ASSIGN	=	0	33
DECIMAL	1024	0	34	1024
SEMICOLON	;	0	38
INT	int	1	0
ID	image	1	3	0x561852ae51f8
LBRACKET	[	1	8
ID	MAX_WIDTH	1	9	0x561852ae51a8
MUL	*	1	18
ID	MAX_HEIGHT	1	19	0x561852ae51d0
RBRACKET	]	1	29
COMMA	,	1	30
ID	width	1	31	0x561852ae5220
COMMA	,	1	36
ID	height	1	37	0x561852ae5248
SEMICOLON	;	1	43
CONST	const	3	0
FLOAT	float	3	5
ID	PI	3	10	0x561852ae5270
ASSIGN	=	3	12
FLOAT	3.14159265359	3	13	3.141593
COMMA	,	3	26
ID	TWO_PI	3	27	0x561852ae5298
ASSIGN	=	3	33
FLOAT	6.28318530718	3	34	6.283185
COMMA	,	3	47
ID	EPSILON	3	48	0x561852ae52c0
ASSIGN	=	3	55
FLOAT	1e-6	3	56	0.000001
SEMICOLON	;	3	60
FLOAT	float	5	0
ID	my_fabs	5	5	0x561852ae52e8
LPAREN	(	5	12
FLOAT	float	5	13
ID	x	5	18	0x561852ae5310
RPAREN	)	5	19
LBRACE	{	5	20
IF	if	6	0
LPAREN	(	6	2
ID	x	6	3	0x561852ae5310
GREATER	>	6	4
DECIMAL	0	6	5	0
RPAREN	)	6	6
RETURN	return	6	7
ID	x	6	13	0x561852ae5310
SEMICOLON	;	6	14
RETURN	return	7	0
SUB	-	7	6
ID	x	7	7	0x561852ae5310
SEMICOLON	;	7	8
RBRACE	}	8	0
FLOAT	float	10	0
ID	p	10	5	0x561852ae5338
LPAREN	(	10	6
FLOAT	float	10	7
ID	x	10	12	0x561852ae5310
RPAREN	)	10	13
LBRACE	{	10	14
RETURN	return	10	15
DECIMAL	3	10	21	3
MUL	*	10	22
ID	x	10	23	0x561852ae5310
SUB	-	10	24
DECIMAL	4	10	25	4
MUL	*	10	26
ID	x	10	27	0x561852ae5310
MUL	*	10	28
ID	x	10	29	0x561852ae5310
MUL	*	10	30
ID	x	10	31	0x561852ae5310
SEMICOLON	;	10	32
RBRACE	}	10	33
FLOAT	float	12	0
ID	my_sin_impl	12	5	0x561852ae5360
LPAREN	(	12	16
FLOAT	float	12	17
ID	x	12	22	0x561852ae5310
RPAREN	)	12	23
LBRACE	{	12	24
IF	if	13	0
LPAREN	(	13	2
ID	my_fabs	13	3	0x561852ae52e8
LPAREN	(	13	10
ID	x	13	11	0x561852ae5310
RPAREN	)	13	12
LEQUAL	<=	13	13
ID	EPSILON	13	15	0x561852ae52c0
RPAREN	)	13	22
RETURN	return	13	23
ID	x	13	29	0x561852ae5310
SEMICOLON	;	13	30
RETURN	return	14	0
ID	p	14	6	0x561852ae5338
LPAREN	(	14	7
ID	my_sin_impl	14	8	0x561852ae5360
LPAREN	(	14	19
ID	x	14	20	0x561852ae5310
DIV	/	14	21
FLOAT	3.0	14	22	3.000000
RPAREN	)	14	25
RPAREN	)	14	26
SEMICOLON	;	14	27
RBRACE	}	15	0
FLOAT	float	17	0
ID	my_sin	17	5	0x561852ae5388
LPAREN	(	17	11
FLOAT	float	17	12
ID	x	17	17	0x561852ae5310
RPAREN	)	17	18
LBRACE	{	17	19
IF	if	18	0
LPAREN	(	18	2
ID	x	18	3	0x561852ae5310
GREATER	>	18	4
ID	TWO_PI	18	5	0x561852ae5298
OR	||	18	11
ID	x	18	13	0x561852ae5310
LESS	<	18	14
SUB	-	18	15
ID	TWO_PI	18	16	0x561852ae5298
RPAREN	)	18	22
LBRACE	{	18	23
INT	int	19	0
ID	xx	19	3	0x561852ae53b0
ASSIGN	=	19	5
ID	x	19	6	0x561852ae5310
DIV	/	19	7
ID	TWO_PI	19	8	0x561852ae5298
SEMICOLON	;	19	14
ID	x	20	0	0x561852ae5310
ASSIGN	=	20	1
ID	x	20	2	0x561852ae5310
SUB	-	20	3
ID	xx	20	4	0x561852ae53b0
MUL	*	20	6
ID	TWO_PI	20	7	0x561852ae5298
SEMICOLON	;	20	13
RBRACE	}	21	0
IF	if	22	0
LPAREN	(	22	2
ID	x	22	3	0x561852ae5310
GREATER	>	22	4
ID	PI	22	5	0x561852ae5270
RPAREN	)	22	7
ID	x	22	8	0x561852ae5310
ASSIGN	=	22	9
ID	x	22	10	0x561852ae5310
SUB	-	22	11
ID	TWO_PI	22	12	0x561852ae5298
SEMICOLON	;	22	18
IF	if	23	0
LPAREN	(	23	2
ID	x	23	3	0x561852ae5310
LESS	<	23	4
SUB	-	23	5
ID	PI	23	6	0x561852ae5270
RPAREN	)	23	8
ID	x	23	9	0x561852ae5310
ASSIGN	=	23	10
ID	x	23	11	0x561852ae5310
ADD	+	23	12
ID	TWO_PI	23	13	0x561852ae5298
SEMICOLON	;	23	19
RETURN	return	24	0
ID	my_sin_impl	24	6	0x561852ae5360
LPAREN	(	24	17
ID	x	24	18	0x561852ae5310
RPAREN	)	24	19
SEMICOLON	;	24	20
RBRACE	}	25	0
FLOAT	float	27	0
ID	my_cos	27	5	0x561852ae53d8
LPAREN	(	27	11
FLOAT	float	27	12
ID	x	27	17	0x561852ae5310
RPAREN	)	27	18
LBRACE	{	27	19
RETURN	return	27	20
ID	my_sin	27	26	0x561852ae5388
LPAREN	(	27	32
ID	x	27	33	0x561852ae5310
ADD	+	27	34
ID	PI	27	35	0x561852ae5270
DIV	/	27	37
DECIMAL	2	27	38	2
RPAREN	)	27	39
SEMICOLON	;	27	40
RBRACE	}	27	41
INT	int	29	0
ID	read_image	29	3	0x561852ae5400
LPAREN	(	29	13
RPAREN	)	29	14
LBRACE	{	29	15
IF	if	30	0
LPAREN	(	30	2
ID	getch	30	3	0x561852ae5428
LPAREN	(	30	8
RPAREN	)	30	9
NEQUAL	!=	30	10
DECIMAL	80	30	12	80
OR	||	30	14
ID	getch	30	16	0x561852ae5428
LPAREN	(	30	21
RPAREN	)	30	22
NEQUAL	!=	30	23
DECIMAL	50	30	25	50
RPAREN	)	30	27
RETURN	return	30	28
SUB	-	30	34
DECIMAL	1	30	35	1
SEMICOLON	;	30	36
ID	width	31	0	0x561852ae5220
ASSIGN	=	31	5
ID	getint	31	6	0x561852ae5450
LPAREN	(	31	12
RPAREN	)	31	13
SEMICOLON	;	31	14
ID	height	32	0	0x561852ae5248
ASSIGN	=	32	6
ID	getint	32	7	0x561852ae5450
LPAREN	(	32	13
RPAREN	)	32	14
SEMICOLON	;	32	15
IF	if	33	0
LPAREN	(	33	2
ID	width	33	3	0x561852ae5220
GREATER	>	33	8
ID	MAX_WIDTH	33	9	0x561852ae51a8
OR	||	33	18
ID	height	33	20	0x561852ae5248
GREATER	>	33	26
ID	MAX_HEIGHT	33	27	0x561852ae51d0
OR	||	33	37
ID	getint	33	39	0x561852ae5450
LPAREN	(	33	45
RPAREN	)	33	46
NEQUAL	!=	33	47
DECIMAL	255	33	49	255
RPAREN	)	33	52
RETURN	return	33	53
SUB	-	33	59
DECIMAL	1	33	60	1
SEMICOLON	;	33	61
INT	int	34	0
ID	y	34	3	0x561852ae5478
ASSIGN	=	34	4
DECIMAL	0	34	5	0
SEMICOLON	;	34	6
WHILE	while	35	0
LPAREN	(	35	5
ID	y	35	6	0x561852ae5478
LESS	<	35	7
ID	height	35	8	0x561852ae5248
RPAREN	)	35	14
LBRACE	{	35	15
INT	int	36	0
ID	x	36	3	0x561852ae5310
ASSIGN	=	36	4
DECIMAL	0	36	5	0
SEMICOLON	;	36	6
WHILE	while	37	0
LPAREN	(	37	5
ID	x	37	6	0x561852ae5310
LESS	<	37	7
ID	width	37	8	0x561852ae5220
RPAREN	)	37	13
LBRACE	{	37	14
ID	image	38	0	0x561852ae51f8
LBRACKET	[	38	5
ID	y	38	6	0x561852ae5478
MUL	*	38	7
ID	width	38	8	0x561852ae5220
ADD	+	38	13
ID	x	38	14	0x561852ae5310
RBRACKET	]	38	15
ASSIGN	=	38	16
ID	getint	38	17	0x561852ae5450
LPAREN	(	38	23
RPAREN	)	38	24
SEMICOLON	;	38	25
ID	x	39	0	0x561852ae5310
ASSIGN	=	39	1
ID	x	39	2	0x561852ae5310
ADD	+	39	3
DECIMAL	1	39	4	1
SEMICOLON	;	39	5
RBRACE	}	40	0
ID	y	41	0	0x561852ae5478
ASSIGN	=	41	1
ID	y	41	2	0x561852ae5478
ADD	+	41	3
DECIMAL	1	41	4	1
SEMICOLON	;	41	5
RBRACE	}	42	0
RETURN	return	43	0
DECIMAL	0	43	6	0
SEMICOLON	;	43	7
RBRACE	}	44	0
INT	int	46	0
ID	rotate	46	3	0x561852ae54a0
LPAREN	(	46	9
INT	int	46	10
ID	x	46	13	0x561852ae5310
COMMA	,	46	14
INT	int	46	15
ID	y	46	18	0x561852ae5478
COMMA	,	46	19
FLOAT	float	46	20
ID	rad	46	25	0x561852ae54c8
RPAREN	)	46	28
LBRACE	{	46	29
FLOAT	float	47	0
ID	sinma	47	5	0x561852ae54f0
ASSIGN	=	47	10
ID	my_sin	47	11	0x561852ae5388
LPAREN	(	47	17
ID	rad	47	18	0x561852ae54c8
RPAREN	)	47	21
COMMA	,	47	22
ID	cosma	47	23	0x561852ae5518
ASSIGN	=	47	28
ID	my_cos	47	29	0x561852ae53d8
LPAREN	(	47	35
ID	rad	47	36	0x561852ae54c8
RPAREN	)	47	39
SEMICOLON	;	47	40
INT	int	48	0
ID	hwidth	48	3	0x561852ae5540
ASSIGN	=	48	9
ID	width	48	10	0x561852ae5220
DIV	/	48	15
DECIMAL	2	48	16	2
COMMA	,	48	17
ID	hheight	48	18	0x561852ae5568
ASSIGN	=	48	25
ID	height	48	26	0x561852ae5248
DIV	/	48	32
DECIMAL	2	48	33	2
SEMICOLON	;	48	34
INT	int	49	0
ID	xt	49	3	0x561852ae5590
ASSIGN	=	49	5
ID	x	49	6	0x561852ae5310
SUB	-	49	7
ID	hwidth	49	8	0x561852ae5540
COMMA	,	49	14
ID	yt	49	15	0x561852ae55b8
ASSIGN	=	49	17
ID	y	49	18	0x561852ae5478
SUB	-	49	19
ID	hheight	49	20	0x561852ae5568
SEMICOLON	;	49	27
INT	int	50	0
ID	src_x	50	3	0x561852ae55e0
ASSIGN	=	50	8
ID	xt	50	9	0x561852ae5590
MUL	*	50	11
ID	cosma	50	12	0x561852ae5518
SUB	-	50	17
ID	yt	50	18	0x561852ae55b8
MUL	*	50	20
ID	sinma	50	21	0x561852ae54f0
ADD	+	50	26
ID	hwidth	50	27	0x561852ae5540
COMMA	,	50	33
ID	src_y	51	0	0x561852ae5608
ASSIGN	=	51	5
ID	xt	51	6	0x561852ae5590
MUL	*	51	8
ID	sinma	51	9	0x561852ae54f0
ADD	+	51	14
ID	yt	51	15	0x561852ae55b8
MUL	*	51	17
ID	cosma	51	18	0x561852ae5518
ADD	+	51	23
ID	hheight	51	24	0x561852ae5568
SEMICOLON	;	51	31
IF	if	52	0
LPAREN	(	52	2
ID	src_x	52	3	0x561852ae55e0
LESS	<	52	8
DECIMAL	0	52	9	0
OR	||	52	10
ID	src_x	52	12	0x561852ae55e0
GEQUAL	>=	52	17
ID	width	52	19	0x561852ae5220
OR	||	52	24
ID	src_y	52	26	0x561852ae5608
LESS	<	52	31
DECIMAL	0	52	32	0
OR	||	52	33
ID	src_y	52	35	0x561852ae5608
GEQUAL	>=	52	40
ID	height	52	42	0x561852ae5248
RPAREN	)	52	48
RETURN	return	52	49
DECIMAL	0	52	55	0
SEMICOLON	;	52	56
RETURN	return	53	0
ID	image	53	6	0x561852ae51f8
LBRACKET	[	53	11
ID	src_y	53	12	0x561852ae5608
MUL	*	53	17
ID	width	53	18	0x561852ae5220
ADD	+	53	23
ID	src_x	53	24	0x561852ae55e0
RBRACKET	]	53	29
SEMICOLON	;	53	30
RBRACE	}	54	0
VOID	void	56	0
ID	write_pgm	56	4	0x561852ae5630
LPAREN	(	56	13
FLOAT	float	56	14
ID	rad	56	19	0x561852ae54c8
RPAREN	)	56	22
LBRACE	{	56	23
ID	putch	57	0	0x561852ae5658
LPAREN	(	57	5
DECIMAL	80	57	6	80
RPAREN	)	57	8
SEMICOLON	;	57	9
ID	putch	57	10	0x561852ae5658
LPAREN	(	57	15
DECIMAL	50	57	16	50
RPAREN	)	57	18
SEMICOLON	;	57	19
ID	putch	57	20	0x561852ae5658
LPAREN	(	57	25
DECIMAL	10	57	26	10
RPAREN	)	57	28
SEMICOLON	;	57	29
ID	putint	58	0	0x561852ae5680
LPAREN	(	58	6
ID	width	58	7	0x561852ae5220
RPAREN	)	58	12
SEMICOLON	;	58	13
ID	putch	58	14	0x561852ae5658
LPAREN	(	58	19
DECIMAL	32	58	20	32
RPAREN	)	58	22
SEMICOLON	;	58	23
ID	putint	58	24	0x561852ae5680
LPAREN	(	58	30
ID	height	58	31	0x561852ae5248
RPAREN	)	58	37
SEMICOLON	;	58	38
ID	putch	58	39	0x561852ae5658
LPAREN	(	58	44
DECIMAL	32	58	45	32
RPAREN	)	58	47
SEMICOLON	;	58	48
ID	putint	59	0	0x561852ae5680
LPAREN	(	59	6
DECIMAL	255	59	7	255
RPAREN	)	59	10
SEMICOLON	;	59	11
ID	putch	59	12	0x561852ae5658
LPAREN	(	59	17
DECIMAL	10	59	18	10
RPAREN	)	59	20
SEMICOLON	;	59	21
INT	int	60	0
ID	y	60	3	0x561852ae5478
ASSIGN	=	60	4
DECIMAL	0	60	5	0
SEMICOLON	;	60	6
WHILE	while	61	0
LPAREN	(	61	5
ID	y	61	6	0x561852ae5478
LESS	<	61	7
ID	height	61	8	0x561852ae5248
RPAREN	)	61	14
LBRACE	{	61	15
INT	int	62	0
ID	x	62	3	0x561852ae5310
ASSIGN	=	62	4
DECIMAL	0	62	5	0
SEMICOLON	;	62	6
WHILE	while	63	0
LPAREN	(	63	5
ID	x	63	6	0x561852ae5310
LESS	<	63	7
ID	width	63	8	0x561852ae5220
RPAREN	)	63	13
LBRACE	{	63	14
ID	putint	64	0	0x561852ae5680
LPAREN	(	64	6
ID	rotate	64	7	0x561852ae54a0
LPAREN	(	64	13
ID	x	64	14	0x561852ae5310
COMMA	,	64	15
ID	y	64	16	0x561852ae5478
COMMA	,	64	17
ID	rad	64	18	0x561852ae54c8
RPAREN	)	64	21
RPAREN	)	64	22
SEMICOLON	;	64	23
ID	putch	65	0	0x561852ae5658
LPAREN	(	65	5
DECIMAL	32	65	6	32
RPAREN	)	65	8
SEMICOLON	;	65	9
ID	x	66	0	0x561852ae5310
ASSIGN	=	66	1
ID	x	66	2	0x561852ae5310
ADD	+	66	3
DECIMAL	1	66	4	1
SEMICOLON	;	66	5
RBRACE	}	67	0
ID	putch	68	0	0x561852ae5658
LPAREN	(	68	5
DECIMAL	10	68	6	10
RPAREN	)	68	8
SEMICOLON	;	68	9
ID	y	69	0	0x561852ae5478
ASSIGN	=	69	1
ID	y	69	2	0x561852ae5478
ADD	+	69	3
DECIMAL	1	69	4	1
SEMICOLON	;	69	5
RBRACE	}	70	0
RBRACE	}	71	0
INT	int	73	0
ID	main	73	3	0x561852ae56a8
LPAREN	(	73	7
RPAREN	)	73	8
LBRACE	{	73	9
FLOAT	float	74	0
ID	rad	74	5	0x561852ae54c8
ASSIGN	=	74	8
ID	getfloat	74	9	0x561852ae56d0
LPAREN	(	74	17
RPAREN	)	74	18
SEMICOLON	;	74	19
ID	getch	75	0	0x561852ae5428
LPAREN	(	75	5
RPAREN	)	75	6
SEMICOLON	;	75	7
IF	if	76	0
LPAREN	(	76	2
ID	read_image	76	3	0x561852ae5400
LPAREN	(	76	13
RPAREN	)	76	14
LESS	<	76	15
DECIMAL	0	76	16	0
RPAREN	)	76	17
RETURN	return	76	18
SUB	-	76	24
DECIMAL	1	76	25	1
SEMICOLON	;	76	26
ID	write_pgm	77	0	0x561852ae5630
LPAREN	(	77	9
ID	rad	77	10	0x561852ae54c8
RPAREN	)	77	13
SEMICOLON	;	77	14
RETURN	return	78	0
DECIMAL	0	78	6	0
SEMICOLON	;	78	7
RBRACE	}	79	0
