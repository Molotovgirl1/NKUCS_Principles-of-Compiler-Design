CONST	const	1	0
FLOAT	float	1	5
ID	RADIUS	1	10	0x55ae2908d1a8
ASSIGN	=	1	16
FLOAT	5.5	1	17	5.500000
COMMA	,	1	20
ID	PI	1	21	0x55ae2908d1d0
ASSIGN	=	1	23
FLOAT	03.141592653589793	1	24	3.141593
COMMA	,	1	42
ID	EPS	1	43	0x55ae2908d1f8
ASSIGN	=	1	46
FLOAT	1e-6	1	47	0.000001
SEMICOLON	;	1	51
CONST	const	4	0
FLOAT	float	4	5
ID	PI_HEX	4	10	0x55ae2908d220
ASSIGN	=	4	16
HEXADECIMAL	0x1	4	17	1
FLOAT	.921	4	20	0.921000
ID	fb6p	4	24	0x55ae2908d248
ADD	+	4	28
DECIMAL	1	4	29	1
COMMA	,	4	30
ID	HEX2	4	31	0x55ae2908d270
ASSIGN	=	4	35
DECIMAL	0	4	36	0
ID	x	4	37	0x55ae2908d298
.ID	AP	4	38	0x55ae2908d2c0
SUB	-	4	40
DECIMAL	3	4	41	3
SEMICOLON	;	4	42
CONST	const	7	0
FLOAT	float	7	5
ID	FACT	7	10	0x55ae2908d2e8
ASSIGN	=	7	14
SUB	-	7	15
FLOAT	.33E+5	7	16	33000.000000
COMMA	,	7	22
ID	EVAL1	7	23	0x55ae2908d310
ASSIGN	=	7	28
ID	PI	7	29	0x55ae2908d1d0
MUL	*	7	31
ID	RADIUS	7	32	0x55ae2908d1a8
MUL	*	7	38
ID	RADIUS	7	39	0x55ae2908d1a8
COMMA	,	7	45
ID	EVAL2	7	46	0x55ae2908d338
ASSIGN	=	7	51
DECIMAL	2	7	52	2
MUL	*	7	53
ID	PI_HEX	7	54	0x55ae2908d220
MUL	*	7	60
ID	RADIUS	7	61	0x55ae2908d1a8
COMMA	,	7	67
ID	EVAL3	7	68	0x55ae2908d360
ASSIGN	=	7	73
ID	PI	7	74	0x55ae2908d1d0
MUL	*	7	76
DECIMAL	2	7	77	2
MUL	*	7	78
ID	RADIUS	7	79	0x55ae2908d1a8
SEMICOLON	;	7	85
CONST	const	10	0
FLOAT	float	10	5
ID	CONV1	10	10	0x55ae2908d388
ASSIGN	=	10	15
DECIMAL	233	10	16	233
COMMA	,	10	19
ID	CONV2	10	20	0x55ae2908d3b0
ASSIGN	=	10	25
HEXADECIMAL	0xfff	10	26	4095
SEMICOLON	;	10	31
CONST	const	11	0
INT	int	11	5
ID	MAX	11	8	0x55ae2908d3d8
ASSIGN	=	11	11
FLOAT	1e9	11	12	1000000000.000000
COMMA	,	11	15
ID	TWO	11	16	0x55ae2908d400
ASSIGN	=	11	19
FLOAT	2.9	11	20	2.900000
COMMA	,	11	23
ID	THREE	11	24	0x55ae2908d428
ASSIGN	=	11	29
FLOAT	3.2	11	30	3.200000
COMMA	,	11	33
ID	FIVE	11	34	0x55ae2908d450
ASSIGN	=	11	38
ID	TWO	11	39	0x55ae2908d400
ADD	+	11	42
ID	THREE	11	43	0x55ae2908d428
SEMICOLON	;	11	48
FLOAT	float	14	0
ID	float_abs	14	5	0x55ae2908d478
LPAREN	(	14	14
FLOAT	float	14	15
ID	x	14	20	0x55ae2908d298
RPAREN	)	14	21
LBRACE	{	14	22
IF	if	15	0
LPAREN	(	15	2
ID	x	15	3	0x55ae2908d298
LESS	<	15	4
DECIMAL	0	15	5	0
RPAREN	)	15	6
RETURN	return	15	7
SUB	-	15	13
ID	x	15	14	0x55ae2908d298
SEMICOLON	;	15	15
RETURN	return	16	0
ID	x	16	6	0x55ae2908d298
SEMICOLON	;	16	7
RBRACE	}	17	0
FLOAT	float	20	0
ID	circle_area	20	5	0x55ae2908d4a0
LPAREN	(	20	16
INT	int	20	17
ID	radius	20	20	0x55ae2908d4c8
RPAREN	)	20	26
LBRACE	{	20	27
RETURN	return	21	0
LPAREN	(	21	6
ID	PI	21	7	0x55ae2908d1d0
MUL	*	21	9
ID	radius	21	10	0x55ae2908d4c8
MUL	*	21	16
ID	radius	21	17	0x55ae2908d4c8
ADD	+	21	23
LPAREN	(	21	24
ID	radius	21	25	0x55ae2908d4c8
MUL	*	21	31
ID	radius	21	32	0x55ae2908d4c8
RPAREN	)	21	38
MUL	*	21	39
ID	PI	21	40	0x55ae2908d1d0
RPAREN	)	21	42
DIV	/	21	43
DECIMAL	2	21	44	2
SEMICOLON	;	21	45
RBRACE	}	22	0
INT	int	25	0
ID	float_eq	25	3	0x55ae2908d4f0
LPAREN	(	25	11
FLOAT	float	25	12
ID	a	25	17	0x55ae2908d518
COMMA	,	25	18
FLOAT	float	25	19
ID	b	25	24	0x55ae2908d540
RPAREN	)	25	25
LBRACE	{	25	26
IF	if	26	0
LPAREN	(	26	2
ID	float_abs	26	3	0x55ae2908d478
LPAREN	(	26	12
ID	a	26	13	0x55ae2908d518
SUB	-	26	14
ID	b	26	15	0x55ae2908d540
RPAREN	)	26	16
LESS	<	26	17
ID	EPS	26	18	0x55ae2908d1f8
RPAREN	)	26	21
LBRACE	{	26	22
RETURN	return	27	0
DECIMAL	1	27	6	1
MUL	*	27	7
FLOAT	2.	27	8	2.000000
DIV	/	27	10
DECIMAL	2	27	11	2
SEMICOLON	;	27	12
RBRACE	}	28	0
ELSE	else	28	1
LBRACE	{	28	5
RETURN	return	29	0
DECIMAL	0	29	6	0
SEMICOLON	;	29	7
RBRACE	}	30	0
RBRACE	}	31	0
VOID	void	33	0
ID	error	33	4	0x55ae2908d568
LPAREN	(	33	9
RPAREN	)	33	10
LBRACE	{	33	11
ID	putch	34	0	0x55ae2908d590
LPAREN	(	34	5
DECIMAL	101	34	6	101
RPAREN	)	34	9
SEMICOLON	;	34	10
ID	putch	35	0	0x55ae2908d590
LPAREN	(	35	5
DECIMAL	114	35	6	114
RPAREN	)	35	9
SEMICOLON	;	35	10
ID	putch	36	0	0x55ae2908d590
LPAREN	(	36	5
DECIMAL	114	36	6	114
RPAREN	)	36	9
SEMICOLON	;	36	10
ID	putch	37	0	0x55ae2908d590
LPAREN	(	37	5
DECIMAL	111	37	6	111
RPAREN	)	37	9
SEMICOLON	;	37	10
ID	putch	38	0	0x55ae2908d590
LPAREN	(	38	5
DECIMAL	114	38	6	114
RPAREN	)	38	9
SEMICOLON	;	38	10
ID	putch	39	0	0x55ae2908d590
LPAREN	(	39	5
DECIMAL	10	39	6	10
RPAREN	)	39	8
SEMICOLON	;	39	9
RBRACE	}	40	0
VOID	void	42	0
ID	ok	42	4	0x55ae2908d5b8
LPAREN	(	42	6
RPAREN	)	42	7
LBRACE	{	42	8
ID	putch	43	0	0x55ae2908d590
LPAREN	(	43	5
DECIMAL	111	43	6	111
RPAREN	)	43	9
SEMICOLON	;	43	10
ID	putch	44	0	0x55ae2908d590
LPAREN	(	44	5
DECIMAL	107	44	6	107
RPAREN	)	44	9
SEMICOLON	;	44	10
ID	putch	45	0	0x55ae2908d590
LPAREN	(	45	5
DECIMAL	10	45	6	10
RPAREN	)	45	8
SEMICOLON	;	45	9
RBRACE	}	46	0
VOID	void	48	0
ID	assert	48	4	0x55ae2908d5e0
LPAREN	(	48	10
INT	int	48	11
ID	cond	48	14	0x55ae2908d608
RPAREN	)	48	18
LBRACE	{	48	19
IF	if	49	0
LPAREN	(	49	2
NOT	!	49	3
ID	cond	49	4	0x55ae2908d608
RPAREN	)	49	8
LBRACE	{	49	9
ID	error	50	0	0x55ae2908d568
LPAREN	(	50	5
RPAREN	)	50	6
SEMICOLON	;	50	7
RBRACE	}	51	0
ELSE	else	51	1
LBRACE	{	51	5
ID	ok	52	0	0x55ae2908d5b8
LPAREN	(	52	2
RPAREN	)	52	3
SEMICOLON	;	52	4
RBRACE	}	53	0
RBRACE	}	54	0
INT	int	56	0
ID	main	56	3	0x55ae2908d630
LPAREN	(	56	7
RPAREN	)	56	8
LBRACE	{	56	9
ID	assert	57	0	0x55ae2908d5e0
LPAREN	(	57	6
NOT	!	57	7
ID	float_eq	57	8	0x55ae2908d4f0
LPAREN	(	57	16
ID	HEX2	57	17	0x55ae2908d270
COMMA	,	57	21
ID	FACT	57	22	0x55ae2908d2e8
RPAREN	)	57	26
RPAREN	)	57	27
SEMICOLON	;	57	28
ID	assert	58	0	0x55ae2908d5e0
LPAREN	(	58	6
NOT	!	58	7
ID	float_eq	58	8	0x55ae2908d4f0
LPAREN	(	58	16
ID	EVAL1	58	17	0x55ae2908d310
COMMA	,	58	22
ID	EVAL2	58	23	0x55ae2908d338
RPAREN	)	58	28
RPAREN	)	58	29
SEMICOLON	;	58	30
ID	assert	59	0	0x55ae2908d5e0
LPAREN	(	59	6
ID	float_eq	59	7	0x55ae2908d4f0
LPAREN	(	59	15
ID	EVAL2	59	16	0x55ae2908d338
COMMA	,	59	21
ID	EVAL3	59	22	0x55ae2908d360
RPAREN	)	59	27
RPAREN	)	59	28
SEMICOLON	;	59	29
ID	assert	60	0	0x55ae2908d5e0
LPAREN	(	60	6
ID	float_eq	60	7	0x55ae2908d4f0
LPAREN	(	60	15
ID	circle_area	60	16	0x55ae2908d4a0
LPAREN	(	60	27
ID	RADIUS	60	28	0x55ae2908d1a8
RPAREN	)	60	34
COMMA	,	60	35
ID	circle_area	61	0	0x55ae2908d4a0
LPAREN	(	61	11
ID	FIVE	61	12	0x55ae2908d450
RPAREN	)	61	16
RPAREN	)	61	17
RPAREN	)	61	18
SEMICOLON	;	61	19
ID	assert	62	0	0x55ae2908d5e0
LPAREN	(	62	6
NOT	!	62	7
ID	float_eq	62	8	0x55ae2908d4f0
LPAREN	(	62	16
ID	CONV1	62	17	0x55ae2908d388
COMMA	,	62	22
ID	CONV2	62	23	0x55ae2908d3b0
RPAREN	)	62	28
RPAREN	)	62	29
SEMICOLON	;	62	30
IF	if	65	0
LPAREN	(	65	2
FLOAT	1.5	65	3	1.500000
RPAREN	)	65	6
ID	ok	65	7	0x55ae2908d5b8
LPAREN	(	65	9
RPAREN	)	65	10
SEMICOLON	;	65	11
IF	if	66	0
LPAREN	(	66	2
NOT	!	66	3
NOT	!	66	4
FLOAT	3.3	66	5	3.300000
RPAREN	)	66	8
ID	ok	66	9	0x55ae2908d5b8
LPAREN	(	66	11
RPAREN	)	66	12
SEMICOLON	;	66	13
IF	if	67	0
LPAREN	(	67	2
FLOAT	.0	67	3	0.000000
AND	&&	67	5
DECIMAL	3	67	7	3
RPAREN	)	67	8
ID	error	67	9	0x55ae2908d568
LPAREN	(	67	14
RPAREN	)	67	15
SEMICOLON	;	67	16
IF	if	68	0
LPAREN	(	68	2
DECIMAL	0	68	3	0
OR	||	68	4
FLOAT	0.3	68	6	0.300000
RPAREN	)	68	9
ID	ok	68	10	0x55ae2908d5b8
LPAREN	(	68	12
RPAREN	)	68	13
SEMICOLON	;	68	14
INT	int	71	0
ID	i	71	3	0x55ae2908d658
ASSIGN	=	71	4
DECIMAL	1	71	5	1
COMMA	,	71	6
ID	p	71	7	0x55ae2908d680
ASSIGN	=	71	8
DECIMAL	0	71	9	0
SEMICOLON	;	71	10
FLOAT	float	72	0
ID	arr	72	5	0x55ae2908d6a8
LBRACKET	[	72	8
DECIMAL	10	72	9	10
RBRACKET	]	72	11
ASSIGN	=	72	12
LBRACE	{	72	13
FLOAT	1.	72	14	1.000000
COMMA	,	72	16
DECIMAL	2	72	17	2
RBRACE	}	72	18
SEMICOLON	;	72	19
INT	int	73	0
ID	len	73	3	0x55ae2908d6d0
ASSIGN	=	73	6
ID	getfarray	73	7	0x55ae2908d6f8
LPAREN	(	73	16
ID	arr	73	17	0x55ae2908d6a8
RPAREN	)	73	20
SEMICOLON	;	73	21
WHILE	while	74	0
LPAREN	(	74	5
ID	i	74	6	0x55ae2908d658
LESS	<	74	7
ID	MAX	74	8	0x55ae2908d3d8
RPAREN	)	74	11
LBRACE	{	74	12
FLOAT	float	75	0
ID	input	75	5	0x55ae2908d720
ASSIGN	=	75	10
ID	getfloat	75	11	0x55ae2908d748
LPAREN	(	75	19
RPAREN	)	75	20
SEMICOLON	;	75	21
FLOAT	float	76	0
ID	area	76	5	0x55ae2908d770
ASSIGN	=	76	9
ID	PI	76	10	0x55ae2908d1d0
MUL	*	76	12
ID	input	76	13	0x55ae2908d720
MUL	*	76	18
ID	input	76	19	0x55ae2908d720
COMMA	,	76	24
ID	area_trunc	76	25	0x55ae2908d798
ASSIGN	=	76	35
ID	circle_area	76	36	0x55ae2908d4a0
LPAREN	(	76	47
ID	input	76	48	0x55ae2908d720
RPAREN	)	76	53
SEMICOLON	;	76	54
ID	arr	77	0	0x55ae2908d6a8
LBRACKET	[	77	3
ID	p	77	4	0x55ae2908d680
RBRACKET	]	77	5
ASSIGN	=	77	6
ID	arr	77	7	0x55ae2908d6a8
LBRACKET	[	77	10
ID	p	77	11	0x55ae2908d680
RBRACKET	]	77	12
ADD	+	77	13
ID	input	77	14	0x55ae2908d720
SEMICOLON	;	77	19
ID	putfloat	79	0	0x55ae2908d7c0
LPAREN	(	79	8
ID	area	79	9	0x55ae2908d770
RPAREN	)	79	13
SEMICOLON	;	79	14
ID	putch	80	0	0x55ae2908d590
LPAREN	(	80	5
DECIMAL	32	80	6	32
RPAREN	)	80	8
SEMICOLON	;	80	9
ID	putint	81	0	0x55ae2908d7e8
LPAREN	(	81	6
ID	area_trunc	81	7	0x55ae2908d798
RPAREN	)	81	17
SEMICOLON	;	81	18
ID	putch	82	0	0x55ae2908d590
LPAREN	(	82	5
DECIMAL	10	82	6	10
RPAREN	)	82	8
SEMICOLON	;	82	9
ID	i	84	0	0x55ae2908d658
ASSIGN	=	84	1
ID	i	84	2	0x55ae2908d658
MUL	*	84	3
SUB	-	84	4
SUB	-	84	5
FLOAT	1e1	84	6	10.000000
SEMICOLON	;	84	9
ID	p	85	0	0x55ae2908d680
ASSIGN	=	85	1
ID	p	85	2	0x55ae2908d680
ADD	+	85	3
DECIMAL	1	85	4	1
SEMICOLON	;	85	5
RBRACE	}	86	0
ID	putfarray	87	0	0x55ae2908d810
LPAREN	(	87	9
ID	len	87	10	0x55ae2908d6d0
COMMA	,	87	13
ID	arr	87	14	0x55ae2908d6a8
RPAREN	)	87	17
SEMICOLON	;	87	18
RETURN	return	88	0
DECIMAL	0	88	6	0
SEMICOLON	;	88	7
RBRACE	}	89	0
