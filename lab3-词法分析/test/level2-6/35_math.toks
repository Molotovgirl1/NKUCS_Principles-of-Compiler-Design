CONST	const	2	0
FLOAT	float	2	5
ID	e	2	10	0x55cc34fa81a8
ASSIGN	=	2	11
FLOAT	2.718281828459045	2	12	2.718282
SEMICOLON	;	2	29
FLOAT	float	4	0
ID	my_fabs	4	5	0x55cc34fa81d0
LPAREN	(	4	12
FLOAT	float	4	13
ID	x	4	18	0x55cc34fa81f8
RPAREN	)	4	19
LBRACE	{	4	20
IF	if	5	0
LPAREN	(	5	2
ID	x	5	3	0x55cc34fa81f8
GREATER	>	5	4
DECIMAL	0	5	5	0
RPAREN	)	5	6
RETURN	return	5	7
ID	x	5	13	0x55cc34fa81f8
SEMICOLON	;	5	14
RETURN	return	6	0
SUB	-	6	6
ID	x	6	7	0x55cc34fa81f8
SEMICOLON	;	6	8
RBRACE	}	7	0
FLOAT	float	9	0
ID	my_pow	9	5	0x55cc34fa8220
LPAREN	(	9	11
FLOAT	float	9	12
ID	a	9	17	0x55cc34fa8248
COMMA	,	9	18
INT	int	9	19
ID	n	9	22	0x55cc34fa8270
RPAREN	)	9	23
LBRACE	{	9	24
IF	if	10	0
LPAREN	(	10	2
ID	n	10	3	0x55cc34fa8270
LESS	<	10	4
DECIMAL	0	10	5	0
RPAREN	)	10	6
RETURN	return	10	7
DECIMAL	1	10	13	1
DIV	/	10	14
ID	my_pow	10	15	0x55cc34fa8220
LPAREN	(	10	21
ID	a	10	22	0x55cc34fa8248
COMMA	,	10	23
SUB	-	10	24
ID	n	10	25	0x55cc34fa8270
RPAREN	)	10	26
SEMICOLON	;	10	27
FLOAT	float	11	0
ID	res	11	5	0x55cc34fa8298
ASSIGN	=	11	8
FLOAT	1.0	11	9	1.000000
SEMICOLON	;	11	12
WHILE	while	12	0
LPAREN	(	12	5
ID	n	12	6	0x55cc34fa8270
RPAREN	)	12	7
LBRACE	{	12	8
IF	if	13	0
LPAREN	(	13	2
ID	n	13	3	0x55cc34fa8270
MOD	%	13	4
DECIMAL	2	13	5	2
RPAREN	)	13	6
ID	res	13	7	0x55cc34fa8298
ASSIGN	=	13	10
ID	res	13	11	0x55cc34fa8298
MUL	*	13	14
ID	a	13	15	0x55cc34fa8248
SEMICOLON	;	13	16
ID	a	14	0	0x55cc34fa8248
ASSIGN	=	14	1
ID	a	14	2	0x55cc34fa8248
MUL	*	14	3
ID	a	14	4	0x55cc34fa8248
SEMICOLON	;	14	5
ID	n	15	0	0x55cc34fa8270
ASSIGN	=	15	1
ID	n	15	2	0x55cc34fa8270
DIV	/	15	3
DECIMAL	2	15	4	2
SEMICOLON	;	15	5
RBRACE	}	16	0
RETURN	return	17	0
ID	res	17	6	0x55cc34fa8298
SEMICOLON	;	17	9
RBRACE	}	18	0
FLOAT	float	20	0
ID	my_sqrt	20	5	0x55cc34fa82c0
LPAREN	(	20	12
FLOAT	float	20	13
ID	x	20	18	0x55cc34fa81f8
RPAREN	)	20	19
LBRACE	{	20	20
IF	if	21	0
LPAREN	(	21	2
ID	x	21	3	0x55cc34fa81f8
GREATER	>	21	4
DECIMAL	100	21	5	100
RPAREN	)	21	8
RETURN	return	21	9
FLOAT	10.0	21	15	10.000000
MUL	*	21	19
ID	my_sqrt	21	20	0x55cc34fa82c0
LPAREN	(	21	27
ID	x	21	28	0x55cc34fa81f8
DIV	/	21	29
DECIMAL	100	21	30	100
RPAREN	)	21	33
SEMICOLON	;	21	34
FLOAT	float	22	0
ID	t	22	5	0x55cc34fa82e8
ASSIGN	=	22	6
ID	x	22	7	0x55cc34fa81f8
DIV	/	22	8
DECIMAL	8	22	9	8
ADD	+	22	10
FLOAT	0.5	22	11	0.500000
ADD	+	22	14
DECIMAL	2	22	15	2
MUL	*	22	16
ID	x	22	17	0x55cc34fa81f8
DIV	/	22	18
LPAREN	(	22	19
DECIMAL	4	22	20	4
ADD	+	22	21
ID	x	22	22	0x55cc34fa81f8
RPAREN	)	22	23
SEMICOLON	;	22	24
INT	int	23	0
ID	c	23	3	0x55cc34fa8310
ASSIGN	=	23	4
DECIMAL	10	23	5	10
SEMICOLON	;	23	7
WHILE	while	24	0
LPAREN	(	24	5
ID	c	24	6	0x55cc34fa8310
RPAREN	)	24	7
LBRACE	{	24	8
ID	t	25	0	0x55cc34fa82e8
ASSIGN	=	25	1
LPAREN	(	25	2
ID	t	25	3	0x55cc34fa82e8
ADD	+	25	4
ID	x	25	5	0x55cc34fa81f8
DIV	/	25	6
ID	t	25	7	0x55cc34fa82e8
RPAREN	)	25	8
DIV	/	25	9
DECIMAL	2	25	10	2
SEMICOLON	;	25	11
ID	c	26	0	0x55cc34fa8310
ASSIGN	=	26	1
ID	c	26	2	0x55cc34fa8310
SUB	-	26	3
DECIMAL	1	26	4	1
SEMICOLON	;	26	5
RBRACE	}	27	0
RETURN	return	28	0
ID	t	28	6	0x55cc34fa82e8
SEMICOLON	;	28	7
RBRACE	}	29	0
FLOAT	float	31	0
ID	F1	31	5	0x55cc34fa8338
LPAREN	(	31	7
FLOAT	float	31	8
ID	x	31	13	0x55cc34fa81f8
RPAREN	)	31	14
LBRACE	{	31	15
RETURN	return	31	16
DECIMAL	1	31	22	1
DIV	/	31	23
ID	x	31	24	0x55cc34fa81f8
SEMICOLON	;	31	25
RBRACE	}	31	26
FLOAT	float	33	0
ID	F2	33	5	0x55cc34fa8360
LPAREN	(	33	7
FLOAT	float	33	8
ID	x	33	13	0x55cc34fa81f8
RPAREN	)	33	14
LBRACE	{	33	15
RETURN	return	33	16
DECIMAL	1	33	22	1
DIV	/	33	23
ID	my_sqrt	33	24	0x55cc34fa82c0
LPAREN	(	33	31
DECIMAL	1	33	32	1
SUB	-	33	33
ID	x	33	34	0x55cc34fa81f8
MUL	*	33	35
ID	x	33	36	0x55cc34fa81f8
RPAREN	)	33	37
SEMICOLON	;	33	38
RBRACE	}	33	39
FLOAT	float	35	0
ID	simpson	35	5	0x55cc34fa8388
LPAREN	(	35	12
FLOAT	float	35	13
ID	a	35	18	0x55cc34fa8248
COMMA	,	35	19
FLOAT	float	35	20
ID	b	35	25	0x55cc34fa83b0
COMMA	,	35	26
INT	int	35	27
ID	flag	35	30	0x55cc34fa83d8
RPAREN	)	35	34
LBRACE	{	35	35
FLOAT	float	36	0
ID	c	36	5	0x55cc34fa8310
ASSIGN	=	36	6
ID	a	36	7	0x55cc34fa8248
ADD	+	36	8
LPAREN	(	36	9
ID	b	36	10	0x55cc34fa83b0
SUB	-	36	11
ID	a	36	12	0x55cc34fa8248
RPAREN	)	36	13
DIV	/	36	14
DECIMAL	2	36	15	2
SEMICOLON	;	36	16
IF	if	37	0
LPAREN	(	37	2
ID	flag	37	3	0x55cc34fa83d8
EQUAL	==	37	7
DECIMAL	1	37	9	1
RPAREN	)	37	10
RETURN	return	37	11
LPAREN	(	37	17
ID	F1	37	18	0x55cc34fa8338
LPAREN	(	37	20
ID	a	37	21	0x55cc34fa8248
RPAREN	)	37	22
ADD	+	37	23
DECIMAL	4	37	24	4
MUL	*	37	25
ID	F1	37	26	0x55cc34fa8338
LPAREN	(	37	28
ID	c	37	29	0x55cc34fa8310
RPAREN	)	37	30
ADD	+	37	31
ID	F1	37	32	0x55cc34fa8338
LPAREN	(	37	34
ID	b	37	35	0x55cc34fa83b0
RPAREN	)	37	36
RPAREN	)	37	37
MUL	*	37	38
LPAREN	(	37	39
ID	b	37	40	0x55cc34fa83b0
SUB	-	37	41
ID	a	37	42	0x55cc34fa8248
RPAREN	)	37	43
DIV	/	37	44
DECIMAL	6	37	45	6
SEMICOLON	;	37	46
IF	if	38	0
LPAREN	(	38	2
ID	flag	38	3	0x55cc34fa83d8
EQUAL	==	38	7
DECIMAL	2	38	9	2
RPAREN	)	38	10
RETURN	return	38	11
LPAREN	(	38	17
ID	F2	38	18	0x55cc34fa8360
LPAREN	(	38	20
ID	a	38	21	0x55cc34fa8248
RPAREN	)	38	22
ADD	+	38	23
DECIMAL	4	38	24	4
MUL	*	38	25
ID	F2	38	26	0x55cc34fa8360
LPAREN	(	38	28
ID	c	38	29	0x55cc34fa8310
RPAREN	)	38	30
ADD	+	38	31
ID	F2	38	32	0x55cc34fa8360
LPAREN	(	38	34
ID	b	38	35	0x55cc34fa83b0
RPAREN	)	38	36
RPAREN	)	38	37
MUL	*	38	38
LPAREN	(	38	39
ID	b	38	40	0x55cc34fa83b0
SUB	-	38	41
ID	a	38	42	0x55cc34fa8248
RPAREN	)	38	43
DIV	/	38	44
DECIMAL	6	38	45	6
SEMICOLON	;	38	46
RETURN	return	39	0
DECIMAL	0	39	6	0
SEMICOLON	;	39	7
RBRACE	}	40	0
FLOAT	float	42	0
ID	asr5	42	5	0x55cc34fa8400
LPAREN	(	42	9
FLOAT	float	42	10
ID	a	42	15	0x55cc34fa8248
COMMA	,	42	16
FLOAT	float	42	17
ID	b	42	22	0x55cc34fa83b0
COMMA	,	42	23
FLOAT	float	42	24
ID	eps	42	29	0x55cc34fa8428
COMMA	,	42	32
FLOAT	float	42	33
ID	A	42	38	0x55cc34fa8450
COMMA	,	42	39
INT	int	42	40
ID	flag	42	43	0x55cc34fa83d8
RPAREN	)	42	47
LBRACE	{	42	48
FLOAT	float	43	0
ID	c	43	5	0x55cc34fa8310
ASSIGN	=	43	6
ID	a	43	7	0x55cc34fa8248
ADD	+	43	8
LPAREN	(	43	9
ID	b	43	10	0x55cc34fa83b0
SUB	-	43	11
ID	a	43	12	0x55cc34fa8248
RPAREN	)	43	13
DIV	/	43	14
DECIMAL	2	43	15	2
SEMICOLON	;	43	16
FLOAT	float	44	0
ID	L	44	5	0x55cc34fa8478
ASSIGN	=	44	6
ID	simpson	44	7	0x55cc34fa8388
LPAREN	(	44	14
ID	a	44	15	0x55cc34fa8248
COMMA	,	44	16
ID	c	44	17	0x55cc34fa8310
COMMA	,	44	18
ID	flag	44	19	0x55cc34fa83d8
RPAREN	)	44	23
COMMA	,	44	24
ID	R	44	25	0x55cc34fa84a0
ASSIGN	=	44	26
ID	simpson	44	27	0x55cc34fa8388
LPAREN	(	44	34
ID	c	44	35	0x55cc34fa8310
COMMA	,	44	36
ID	b	44	37	0x55cc34fa83b0
COMMA	,	44	38
ID	flag	44	39	0x55cc34fa83d8
RPAREN	)	44	43
SEMICOLON	;	44	44
IF	if	45	0
LPAREN	(	45	2
ID	my_fabs	45	3	0x55cc34fa81d0
LPAREN	(	45	10
ID	L	45	11	0x55cc34fa8478
ADD	+	45	12
ID	R	45	13	0x55cc34fa84a0
SUB	-	45	14
ID	A	45	15	0x55cc34fa8450
RPAREN	)	45	16
LEQUAL	<=	45	17
DECIMAL	15	45	19	15
MUL	*	45	21
ID	eps	45	22	0x55cc34fa8428
RPAREN	)	45	25
RETURN	return	45	26
ID	L	45	32	0x55cc34fa8478
ADD	+	45	33
ID	R	45	34	0x55cc34fa84a0
ADD	+	45	35
LPAREN	(	45	36
ID	L	45	37	0x55cc34fa8478
ADD	+	45	38
ID	R	45	39	0x55cc34fa84a0
SUB	-	45	40
ID	A	45	41	0x55cc34fa8450
RPAREN	)	45	42
DIV	/	45	43
FLOAT	15.0	45	44	15.000000
SEMICOLON	;	45	48
RETURN	return	46	0
ID	asr5	46	6	0x55cc34fa8400
LPAREN	(	46	10
ID	a	46	11	0x55cc34fa8248
COMMA	,	46	12
ID	c	46	13	0x55cc34fa8310
COMMA	,	46	14
ID	eps	46	15	0x55cc34fa8428
DIV	/	46	18
DECIMAL	2	46	19	2
COMMA	,	46	20
ID	L	46	21	0x55cc34fa8478
COMMA	,	46	22
ID	flag	46	23	0x55cc34fa83d8
RPAREN	)	46	27
ADD	+	46	28
ID	asr5	46	29	0x55cc34fa8400
LPAREN	(	46	33
ID	c	46	34	0x55cc34fa8310
COMMA	,	46	35
ID	b	46	36	0x55cc34fa83b0
COMMA	,	46	37
ID	eps	46	38	0x55cc34fa8428
DIV	/	46	41
DECIMAL	2	46	42	2
COMMA	,	46	43
ID	R	46	44	0x55cc34fa84a0
COMMA	,	46	45
ID	flag	46	46	0x55cc34fa83d8
RPAREN	)	46	50
SEMICOLON	;	46	51
RBRACE	}	47	0
FLOAT	float	49	0
ID	asr4	49	5	0x55cc34fa84c8
LPAREN	(	49	9
FLOAT	float	49	10
ID	a	49	15	0x55cc34fa8248
COMMA	,	49	16
FLOAT	float	49	17
ID	b	49	22	0x55cc34fa83b0
COMMA	,	49	23
FLOAT	float	49	24
ID	eps	49	29	0x55cc34fa8428
COMMA	,	49	32
INT	int	49	33
ID	flag	49	36	0x55cc34fa83d8
RPAREN	)	49	40
LBRACE	{	49	41
RETURN	return	50	0
ID	asr5	50	6	0x55cc34fa8400
LPAREN	(	50	10
ID	a	50	11	0x55cc34fa8248
COMMA	,	50	12
ID	b	50	13	0x55cc34fa83b0
COMMA	,	50	14
ID	eps	50	15	0x55cc34fa8428
COMMA	,	50	18
ID	simpson	50	19	0x55cc34fa8388
LPAREN	(	50	26
ID	a	50	27	0x55cc34fa8248
COMMA	,	50	28
ID	b	50	29	0x55cc34fa83b0
COMMA	,	50	30
ID	flag	50	31	0x55cc34fa83d8
RPAREN	)	50	35
COMMA	,	50	36
ID	flag	50	37	0x55cc34fa83d8
RPAREN	)	50	41
SEMICOLON	;	50	42
RBRACE	}	51	0
FLOAT	float	53	0
ID	eee	53	5	0x55cc34fa84f0
LPAREN	(	53	8
FLOAT	float	53	9
ID	x	53	14	0x55cc34fa81f8
RPAREN	)	53	15
LBRACE	{	53	16
IF	if	54	0
LPAREN	(	54	2
ID	x	54	3	0x55cc34fa81f8
GREATER	>	54	4
FLOAT	1e-3	54	5	0.001000
RPAREN	)	54	9
LBRACE	{	54	10
FLOAT	float	55	0
ID	ee	55	5	0x55cc34fa8518
ASSIGN	=	55	7
ID	eee	55	8	0x55cc34fa84f0
LPAREN	(	55	11
ID	x	55	12	0x55cc34fa81f8
DIV	/	55	13
DECIMAL	2	55	14	2
RPAREN	)	55	15
SEMICOLON	;	55	16
RETURN	return	56	0
ID	ee	56	6	0x55cc34fa8518
MUL	*	56	8
ID	ee	56	9	0x55cc34fa8518
SEMICOLON	;	56	11
RBRACE	}	57	0
RETURN	return	58	0
DECIMAL	1	58	6	1
ADD	+	58	7
ID	x	58	8	0x55cc34fa81f8
ADD	+	58	9
ID	x	58	10	0x55cc34fa81f8
MUL	*	58	11
ID	x	58	12	0x55cc34fa81f8
DIV	/	58	13
DECIMAL	2	58	14	2
ADD	+	58	15
ID	my_pow	58	16	0x55cc34fa8220
LPAREN	(	58	22
ID	x	58	23	0x55cc34fa81f8
COMMA	,	58	24
DECIMAL	3	58	25	3
RPAREN	)	58	26
DIV	/	58	27
DECIMAL	6	58	28	6
ADD	+	58	29
ID	my_pow	58	30	0x55cc34fa8220
LPAREN	(	58	36
ID	x	58	37	0x55cc34fa81f8
COMMA	,	58	38
DECIMAL	4	58	39	4
RPAREN	)	58	40
DIV	/	58	41
DECIMAL	24	58	42	24
ADD	+	58	44
ID	my_pow	59	0	0x55cc34fa8220
LPAREN	(	59	6
ID	x	59	7	0x55cc34fa81f8
COMMA	,	59	8
DECIMAL	5	59	9	5
RPAREN	)	59	10
DIV	/	59	11
DECIMAL	120	59	12	120
SEMICOLON	;	59	15
RBRACE	}	60	0
FLOAT	float	62	0
ID	my_exp	62	5	0x55cc34fa8540
LPAREN	(	62	11
FLOAT	float	62	12
ID	x	62	17	0x55cc34fa81f8
RPAREN	)	62	18
LBRACE	{	62	19
IF	if	63	0
LPAREN	(	63	2
ID	x	63	3	0x55cc34fa81f8
LESS	<	63	4
DECIMAL	0	63	5	0
RPAREN	)	63	6
RETURN	return	63	7
DECIMAL	1	63	13	1
DIV	/	63	14
ID	my_exp	63	15	0x55cc34fa8540
LPAREN	(	63	21
SUB	-	63	22
ID	x	63	23	0x55cc34fa81f8
RPAREN	)	63	24
SEMICOLON	;	63	25
INT	int	64	0
ID	n	64	3	0x55cc34fa8270
ASSIGN	=	64	4
ID	x	64	5	0x55cc34fa81f8
SEMICOLON	;	64	6
ID	x	65	0	0x55cc34fa81f8
ASSIGN	=	65	1
ID	x	65	2	0x55cc34fa81f8
SUB	-	65	3
ID	n	65	4	0x55cc34fa8270
SEMICOLON	;	65	5
FLOAT	float	66	0
ID	e1	66	5	0x55cc34fa8568
ASSIGN	=	66	7
ID	my_pow	66	8	0x55cc34fa8220
LPAREN	(	66	14
ID	e	66	15	0x55cc34fa81a8
COMMA	,	66	16
ID	n	66	17	0x55cc34fa8270
RPAREN	)	66	18
SEMICOLON	;	66	19
FLOAT	float	67	0
ID	e2	67	5	0x55cc34fa8590
ASSIGN	=	67	7
ID	eee	67	8	0x55cc34fa84f0
LPAREN	(	67	11
ID	x	67	12	0x55cc34fa81f8
RPAREN	)	67	13
SEMICOLON	;	67	14
RETURN	return	68	0
ID	e1	68	6	0x55cc34fa8568
MUL	*	68	8
ID	e2	68	9	0x55cc34fa8590
SEMICOLON	;	68	11
RBRACE	}	69	0
FLOAT	float	71	0
ID	my_ln	71	5	0x55cc34fa85b8
LPAREN	(	71	10
FLOAT	float	71	11
ID	x	71	16	0x55cc34fa81f8
RPAREN	)	71	17
LBRACE	{	71	18
RETURN	return	71	19
ID	asr4	71	25	0x55cc34fa84c8
LPAREN	(	71	29
DECIMAL	1	71	30	1
COMMA	,	71	31
ID	x	71	32	0x55cc34fa81f8
COMMA	,	71	33
FLOAT	1e-8	71	34	0.000000
COMMA	,	71	38
DECIMAL	1	71	39	1
RPAREN	)	71	40
SEMICOLON	;	71	41
RBRACE	}	71	42
FLOAT	float	73	0
ID	my_log	73	5	0x55cc34fa85e0
LPAREN	(	73	11
FLOAT	float	73	12
ID	a	73	17	0x55cc34fa8248
COMMA	,	73	18
FLOAT	float	73	19
ID	N	73	24	0x55cc34fa8608
RPAREN	)	73	25
LBRACE	{	73	26
RETURN	return	73	27
ID	my_ln	73	33	0x55cc34fa85b8
LPAREN	(	73	38
ID	N	73	39	0x55cc34fa8608
RPAREN	)	73	40
DIV	/	73	41
ID	my_ln	73	42	0x55cc34fa85b8
LPAREN	(	73	47
ID	a	73	48	0x55cc34fa8248
RPAREN	)	73	49
SEMICOLON	;	73	50
RBRACE	}	73	51
FLOAT	float	75	0
ID	my_powf	75	5	0x55cc34fa8630
LPAREN	(	75	12
FLOAT	float	75	13
ID	a	75	18	0x55cc34fa8248
COMMA	,	75	19
FLOAT	float	75	20
ID	x	75	25	0x55cc34fa81f8
RPAREN	)	75	26
LBRACE	{	75	27
RETURN	return	75	28
ID	my_exp	75	34	0x55cc34fa8540
LPAREN	(	75	40
ID	x	75	41	0x55cc34fa81f8
MUL	*	75	42
ID	my_ln	75	43	0x55cc34fa85b8
LPAREN	(	75	48
ID	a	75	49	0x55cc34fa8248
RPAREN	)	75	50
RPAREN	)	75	51
SEMICOLON	;	75	52
RBRACE	}	75	53
INT	int	77	0
ID	main	77	3	0x55cc34fa8658
LPAREN	(	77	7
RPAREN	)	77	8
LBRACE	{	77	9
INT	int	78	0
ID	num	78	3	0x55cc34fa8680
ASSIGN	=	78	6
ID	getint	78	7	0x55cc34fa86a8
LPAREN	(	78	13
RPAREN	)	78	14
SEMICOLON	;	78	15
WHILE	while	79	0
LPAREN	(	79	5
ID	num	79	6	0x55cc34fa8680
RPAREN	)	79	9
LBRACE	{	79	10
FLOAT	float	80	0
ID	x	80	5	0x55cc34fa81f8
ASSIGN	=	80	6
ID	getfloat	80	7	0x55cc34fa86d0
LPAREN	(	80	15
RPAREN	)	80	16
COMMA	,	80	17
ID	y	80	18	0x55cc34fa86f8
ASSIGN	=	80	19
ID	getfloat	80	20	0x55cc34fa86d0
LPAREN	(	80	28
RPAREN	)	80	29
SEMICOLON	;	80	30
ID	putfloat	81	0	0x55cc34fa8720
LPAREN	(	81	8
ID	my_fabs	81	9	0x55cc34fa81d0
LPAREN	(	81	16
ID	x	81	17	0x55cc34fa81f8
RPAREN	)	81	18
RPAREN	)	81	19
SEMICOLON	;	81	20
ID	putch	82	0	0x55cc34fa8748
LPAREN	(	82	5
DECIMAL	32	82	6	32
RPAREN	)	82	8
SEMICOLON	;	82	9
ID	putfloat	83	0	0x55cc34fa8720
LPAREN	(	83	8
ID	my_pow	83	9	0x55cc34fa8220
LPAREN	(	83	15
ID	x	83	16	0x55cc34fa81f8
COMMA	,	83	17
DECIMAL	2	83	18	2
RPAREN	)	83	19
RPAREN	)	83	20
SEMICOLON	;	83	21
ID	putch	84	0	0x55cc34fa8748
LPAREN	(	84	5
DECIMAL	32	84	6	32
RPAREN	)	84	8
SEMICOLON	;	84	9
ID	putfloat	85	0	0x55cc34fa8720
LPAREN	(	85	8
ID	my_sqrt	85	9	0x55cc34fa82c0
LPAREN	(	85	16
ID	x	85	17	0x55cc34fa81f8
RPAREN	)	85	18
RPAREN	)	85	19
SEMICOLON	;	85	20
ID	putch	86	0	0x55cc34fa8748
LPAREN	(	86	5
DECIMAL	32	86	6	32
RPAREN	)	86	8
SEMICOLON	;	86	9
ID	putfloat	87	0	0x55cc34fa8720
LPAREN	(	87	8
ID	my_exp	87	9	0x55cc34fa8540
LPAREN	(	87	15
ID	x	87	16	0x55cc34fa81f8
RPAREN	)	87	17
RPAREN	)	87	18
SEMICOLON	;	87	19
ID	putch	88	0	0x55cc34fa8748
LPAREN	(	88	5
DECIMAL	32	88	6	32
RPAREN	)	88	8
SEMICOLON	;	88	9
IF	if	89	0
LPAREN	(	89	2
ID	x	89	3	0x55cc34fa81f8
GREATER	>	89	4
DECIMAL	0	89	5	0
RPAREN	)	89	6
LBRACE	{	89	7
ID	putfloat	90	0	0x55cc34fa8720
LPAREN	(	90	8
ID	my_ln	90	9	0x55cc34fa85b8
LPAREN	(	90	14
ID	x	90	15	0x55cc34fa81f8
RPAREN	)	90	16
RPAREN	)	90	17
SEMICOLON	;	90	18
RBRACE	}	91	0
ELSE	else	91	1
LBRACE	{	91	5
ID	putch	92	0	0x55cc34fa8748
LPAREN	(	92	5
DECIMAL	45	92	6	45
RPAREN	)	92	8
SEMICOLON	;	92	9
RBRACE	}	93	0
ID	putch	94	0	0x55cc34fa8748
LPAREN	(	94	5
DECIMAL	32	94	6	32
RPAREN	)	94	8
SEMICOLON	;	94	9
IF	if	95	0
LPAREN	(	95	2
ID	x	95	3	0x55cc34fa81f8
GREATER	>	95	4
DECIMAL	0	95	5	0
AND	&&	95	6
ID	y	95	8	0x55cc34fa86f8
GREATER	>	95	9
DECIMAL	0	95	10	0
RPAREN	)	95	11
LBRACE	{	95	12
ID	putfloat	96	0	0x55cc34fa8720
LPAREN	(	96	8
ID	my_log	96	9	0x55cc34fa85e0
LPAREN	(	96	15
ID	x	96	16	0x55cc34fa81f8
COMMA	,	96	17
ID	y	96	18	0x55cc34fa86f8
RPAREN	)	96	19
RPAREN	)	96	20
SEMICOLON	;	96	21
RBRACE	}	97	0
ELSE	else	97	1
LBRACE	{	97	5
ID	putch	98	0	0x55cc34fa8748
LPAREN	(	98	5
DECIMAL	45	98	6	45
RPAREN	)	98	8
SEMICOLON	;	98	9
RBRACE	}	99	0
ID	putch	100	0	0x55cc34fa8748
LPAREN	(	100	5
DECIMAL	32	100	6	32
RPAREN	)	100	8
SEMICOLON	;	100	9
IF	if	101	0
LPAREN	(	101	2
ID	x	101	3	0x55cc34fa81f8
GREATER	>	101	4
DECIMAL	0	101	5	0
RPAREN	)	101	6
LBRACE	{	101	7
ID	putfloat	102	0	0x55cc34fa8720
LPAREN	(	102	8
ID	my_powf	102	9	0x55cc34fa8630
LPAREN	(	102	16
ID	x	102	17	0x55cc34fa81f8
COMMA	,	102	18
ID	y	102	19	0x55cc34fa86f8
RPAREN	)	102	20
RPAREN	)	102	21
SEMICOLON	;	102	22
RBRACE	}	103	0
ELSE	else	103	1
LBRACE	{	103	5
ID	putch	104	0	0x55cc34fa8748
LPAREN	(	104	5
DECIMAL	45	104	6	45
RPAREN	)	104	8
SEMICOLON	;	104	9
RBRACE	}	105	0
ID	putch	106	0	0x55cc34fa8748
LPAREN	(	106	5
DECIMAL	10	106	6	10
RPAREN	)	106	8
SEMICOLON	;	106	9
ID	num	107	0	0x55cc34fa8680
ASSIGN	=	107	3
ID	num	107	4	0x55cc34fa8680
SUB	-	107	7
DECIMAL	1	107	8	1
SEMICOLON	;	107	9
RBRACE	}	108	0
RETURN	return	109	0
DECIMAL	0	109	6	0
SEMICOLON	;	109	7
RBRACE	}	110	0
