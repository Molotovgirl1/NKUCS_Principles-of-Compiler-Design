CONST	const	3	0
INT	int	3	5
ID	MAX_DIM_X	3	8	0x55b04af2f1a8
ASSIGN	=	3	17
DECIMAL	8	3	18	8
COMMA	,	3	19
ID	MAX_DIM_Y	3	20	0x55b04af2f1d0
ASSIGN	=	3	29
DECIMAL	8	3	30	8
SEMICOLON	;	3	31
FLOAT	float	4	0
ID	test_block	4	5	0x55b04af2f1f8
LBRACKET	[	4	15
ID	MAX_DIM_X	4	16	0x55b04af2f1a8
RBRACKET	]	4	25
LBRACKET	[	4	26
ID	MAX_DIM_Y	4	27	0x55b04af2f1d0
RBRACKET	]	4	36
SEMICOLON	;	4	37
FLOAT	float	5	0
ID	test_dct	5	5	0x55b04af2f220
LBRACKET	[	5	13
ID	MAX_DIM_X	5	14	0x55b04af2f1a8
RBRACKET	]	5	23
LBRACKET	[	5	24
ID	MAX_DIM_Y	5	25	0x55b04af2f1d0
RBRACKET	]	5	34
SEMICOLON	;	5	35
FLOAT	float	6	0
ID	test_idct	6	5	0x55b04af2f248
LBRACKET	[	6	14
ID	MAX_DIM_X	6	15	0x55b04af2f1a8
RBRACKET	]	6	24
LBRACKET	[	6	25
ID	MAX_DIM_Y	6	26	0x55b04af2f1d0
RBRACKET	]	6	35
SEMICOLON	;	6	36
CONST	const	8	0
FLOAT	float	8	5
ID	PI	8	10	0x55b04af2f270
ASSIGN	=	8	12
FLOAT	3.14159265359	8	13	3.141593
COMMA	,	8	26
ID	TWO_PI	8	27	0x55b04af2f298
ASSIGN	=	8	33
FLOAT	6.28318530718	8	34	6.283185
COMMA	,	8	47
ID	EPSILON	8	48	0x55b04af2f2c0
ASSIGN	=	8	55
FLOAT	1e-6	8	56	0.000001
SEMICOLON	;	8	60
FLOAT	float	10	0
ID	my_fabs	10	5	0x55b04af2f2e8
LPAREN	(	10	12
FLOAT	float	10	13
ID	x	10	18	0x55b04af2f310
RPAREN	)	10	19
LBRACE	{	10	20
IF	if	11	0
LPAREN	(	11	2
ID	x	11	3	0x55b04af2f310
GREATER	>	11	4
DECIMAL	0	11	5	0
RPAREN	)	11	6
RETURN	return	11	7
ID	x	11	13	0x55b04af2f310
SEMICOLON	;	11	14
RETURN	return	12	0
SUB	-	12	6
ID	x	12	7	0x55b04af2f310
SEMICOLON	;	12	8
RBRACE	}	13	0
FLOAT	float	15	0
ID	p	15	5	0x55b04af2f338
LPAREN	(	15	6
FLOAT	float	15	7
ID	x	15	12	0x55b04af2f310
RPAREN	)	15	13
LBRACE	{	15	14
RETURN	return	15	15
DECIMAL	3	15	21	3
MUL	*	15	22
ID	x	15	23	0x55b04af2f310
SUB	-	15	24
DECIMAL	4	15	25	4
MUL	*	15	26
ID	x	15	27	0x55b04af2f310
MUL	*	15	28
ID	x	15	29	0x55b04af2f310
MUL	*	15	30
ID	x	15	31	0x55b04af2f310
SEMICOLON	;	15	32
RBRACE	}	15	33
FLOAT	float	17	0
ID	my_sin_impl	17	5	0x55b04af2f360
LPAREN	(	17	16
FLOAT	float	17	17
ID	x	17	22	0x55b04af2f310
RPAREN	)	17	23
LBRACE	{	17	24
IF	if	18	0
LPAREN	(	18	2
ID	my_fabs	18	3	0x55b04af2f2e8
LPAREN	(	18	10
ID	x	18	11	0x55b04af2f310
RPAREN	)	18	12
LEQUAL	<=	18	13
ID	EPSILON	18	15	0x55b04af2f2c0
RPAREN	)	18	22
RETURN	return	18	23
ID	x	18	29	0x55b04af2f310
SEMICOLON	;	18	30
RETURN	return	19	0
ID	p	19	6	0x55b04af2f338
LPAREN	(	19	7
ID	my_sin_impl	19	8	0x55b04af2f360
LPAREN	(	19	19
ID	x	19	20	0x55b04af2f310
DIV	/	19	21
FLOAT	3.0	19	22	3.000000
RPAREN	)	19	25
RPAREN	)	19	26
SEMICOLON	;	19	27
RBRACE	}	20	0
FLOAT	float	22	0
ID	my_sin	22	5	0x55b04af2f388
LPAREN	(	22	11
FLOAT	float	22	12
ID	x	22	17	0x55b04af2f310
RPAREN	)	22	18
LBRACE	{	22	19
IF	if	23	0
LPAREN	(	23	2
ID	x	23	3	0x55b04af2f310
GREATER	>	23	4
ID	TWO_PI	23	5	0x55b04af2f298
OR	||	23	11
ID	x	23	13	0x55b04af2f310
LESS	<	23	14
SUB	-	23	15
ID	TWO_PI	23	16	0x55b04af2f298
RPAREN	)	23	22
LBRACE	{	23	23
INT	int	24	0
ID	xx	24	3	0x55b04af2f3b0
ASSIGN	=	24	5
ID	x	24	6	0x55b04af2f310
DIV	/	24	7
ID	TWO_PI	24	8	0x55b04af2f298
SEMICOLON	;	24	14
ID	x	25	0	0x55b04af2f310
ASSIGN	=	25	1
ID	x	25	2	0x55b04af2f310
SUB	-	25	3
ID	xx	25	4	0x55b04af2f3b0
MUL	*	25	6
ID	TWO_PI	25	7	0x55b04af2f298
SEMICOLON	;	25	13
RBRACE	}	26	0
IF	if	27	0
LPAREN	(	27	2
ID	x	27	3	0x55b04af2f310
GREATER	>	27	4
ID	PI	27	5	0x55b04af2f270
RPAREN	)	27	7
ID	x	27	8	0x55b04af2f310
ASSIGN	=	27	9
ID	x	27	10	0x55b04af2f310
SUB	-	27	11
ID	TWO_PI	27	12	0x55b04af2f298
SEMICOLON	;	27	18
IF	if	28	0
LPAREN	(	28	2
ID	x	28	3	0x55b04af2f310
LESS	<	28	4
SUB	-	28	5
ID	PI	28	6	0x55b04af2f270
RPAREN	)	28	8
ID	x	28	9	0x55b04af2f310
ASSIGN	=	28	10
ID	x	28	11	0x55b04af2f310
ADD	+	28	12
ID	TWO_PI	28	13	0x55b04af2f298
SEMICOLON	;	28	19
RETURN	return	29	0
ID	my_sin_impl	29	6	0x55b04af2f360
LPAREN	(	29	17
ID	x	29	18	0x55b04af2f310
RPAREN	)	29	19
SEMICOLON	;	29	20
RBRACE	}	30	0
FLOAT	float	32	0
ID	my_cos	32	5	0x55b04af2f3d8
LPAREN	(	32	11
FLOAT	float	32	12
ID	x	32	17	0x55b04af2f310
RPAREN	)	32	18
LBRACE	{	32	19
RETURN	return	32	20
ID	my_sin	32	26	0x55b04af2f388
LPAREN	(	32	32
ID	x	32	33	0x55b04af2f310
ADD	+	32	34
ID	PI	32	35	0x55b04af2f270
DIV	/	32	37
DECIMAL	2	32	38	2
RPAREN	)	32	39
SEMICOLON	;	32	40
RBRACE	}	32	41
VOID	void	34	0
ID	write_mat	34	4	0x55b04af2f400
LPAREN	(	34	13
FLOAT	float	34	14
ID	mat	34	19	0x55b04af2f428
LBRACKET	[	34	22
RBRACKET	]	34	23
LBRACKET	[	34	24
ID	MAX_DIM_Y	34	25	0x55b04af2f1d0
RBRACKET	]	34	34
COMMA	,	34	35
INT	int	34	36
ID	n	34	39	0x55b04af2f450
COMMA	,	34	40
INT	int	34	41
ID	m	34	44	0x55b04af2f478
RPAREN	)	34	45
LBRACE	{	34	46
INT	int	35	0
ID	i	35	3	0x55b04af2f4a0
ASSIGN	=	35	4
DECIMAL	0	35	5	0
SEMICOLON	;	35	6
WHILE	while	36	0
LPAREN	(	36	5
ID	i	36	6	0x55b04af2f4a0
LESS	<	36	7
ID	n	36	8	0x55b04af2f450
RPAREN	)	36	9
LBRACE	{	36	10
ID	putfloat	37	0	0x55b04af2f4c8
LPAREN	(	37	8
ID	mat	37	9	0x55b04af2f428
LBRACKET	[	37	12
ID	i	37	13	0x55b04af2f4a0
RBRACKET	]	37	14
LBRACKET	[	37	15
DECIMAL	0	37	16	0
RBRACKET	]	37	17
RPAREN	)	37	18
SEMICOLON	;	37	19
INT	int	38	0
ID	j	38	3	0x55b04af2f4f0
ASSIGN	=	38	4
DECIMAL	1	38	5	1
SEMICOLON	;	38	6
WHILE	while	39	0
LPAREN	(	39	5
ID	j	39	6	0x55b04af2f4f0
LESS	<	39	7
ID	m	39	8	0x55b04af2f478
RPAREN	)	39	9
LBRACE	{	39	10
ID	putch	40	0	0x55b04af2f518
LPAREN	(	40	5
DECIMAL	32	40	6	32
RPAREN	)	40	8
SEMICOLON	;	40	9
ID	putfloat	41	0	0x55b04af2f4c8
LPAREN	(	41	8
ID	mat	41	9	0x55b04af2f428
LBRACKET	[	41	12
ID	i	41	13	0x55b04af2f4a0
RBRACKET	]	41	14
LBRACKET	[	41	15
ID	j	41	16	0x55b04af2f4f0
RBRACKET	]	41	17
RPAREN	)	41	18
SEMICOLON	;	41	19
ID	j	42	0	0x55b04af2f4f0
ASSIGN	=	42	1
ID	j	42	2	0x55b04af2f4f0
ADD	+	42	3
DECIMAL	1	42	4	1
SEMICOLON	;	42	5
RBRACE	}	43	0
ID	putch	44	0	0x55b04af2f518
LPAREN	(	44	5
DECIMAL	10	44	6	10
RPAREN	)	44	8
SEMICOLON	;	44	9
ID	i	45	0	0x55b04af2f4a0
ASSIGN	=	45	1
ID	i	45	2	0x55b04af2f4a0
ADD	+	45	3
DECIMAL	1	45	4	1
SEMICOLON	;	45	5
RBRACE	}	46	0
ID	putch	47	0	0x55b04af2f518
LPAREN	(	47	5
DECIMAL	10	47	6	10
RPAREN	)	47	8
SEMICOLON	;	47	9
RBRACE	}	48	0
VOID	void	50	0
ID	dct	50	4	0x55b04af2f540
LPAREN	(	50	7
FLOAT	float	50	8
ID	dct_mat	50	13	0x55b04af2f568
LBRACKET	[	50	20
RBRACKET	]	50	21
LBRACKET	[	50	22
ID	MAX_DIM_Y	50	23	0x55b04af2f1d0
RBRACKET	]	50	32
COMMA	,	50	33
FLOAT	float	50	34
ID	mat	50	39	0x55b04af2f428
LBRACKET	[	50	42
RBRACKET	]	50	43
LBRACKET	[	50	44
ID	MAX_DIM_Y	50	45	0x55b04af2f1d0
RBRACKET	]	50	54
COMMA	,	50	55
INT	int	50	56
ID	n	50	59	0x55b04af2f450
COMMA	,	50	60
INT	int	50	61
ID	m	50	64	0x55b04af2f478
RPAREN	)	50	65
LBRACE	{	50	66
INT	int	51	0
ID	u	51	3	0x55b04af2f590
ASSIGN	=	51	4
DECIMAL	0	51	5	0
SEMICOLON	;	51	6
WHILE	while	52	0
LPAREN	(	52	5
ID	u	52	6	0x55b04af2f590
LESS	<	52	7
ID	n	52	8	0x55b04af2f450
RPAREN	)	52	9
LBRACE	{	52	10
INT	int	53	0
ID	v	53	3	0x55b04af2f5b8
ASSIGN	=	53	4
DECIMAL	0	53	5	0
SEMICOLON	;	53	6
WHILE	while	54	0
LPAREN	(	54	5
ID	v	54	6	0x55b04af2f5b8
LESS	<	54	7
ID	m	54	8	0x55b04af2f478
RPAREN	)	54	9
LBRACE	{	54	10
ID	dct_mat	55	0	0x55b04af2f568
LBRACKET	[	55	7
ID	u	55	8	0x55b04af2f590
RBRACKET	]	55	9
LBRACKET	[	55	10
ID	v	55	11	0x55b04af2f5b8
RBRACKET	]	55	12
ASSIGN	=	55	13
DECIMAL	0	55	14	0
SEMICOLON	;	55	15
INT	int	56	0
ID	i	56	3	0x55b04af2f4a0
ASSIGN	=	56	4
DECIMAL	0	56	5	0
SEMICOLON	;	56	6
WHILE	while	57	0
LPAREN	(	57	5
ID	i	57	6	0x55b04af2f4a0
LESS	<	57	7
ID	n	57	8	0x55b04af2f450
RPAREN	)	57	9
LBRACE	{	57	10
INT	int	58	0
ID	j	58	3	0x55b04af2f4f0
ASSIGN	=	58	4
DECIMAL	0	58	5	0
SEMICOLON	;	58	6
WHILE	while	59	0
LPAREN	(	59	5
ID	j	59	6	0x55b04af2f4f0
LESS	<	59	7
ID	m	59	8	0x55b04af2f478
RPAREN	)	59	9
LBRACE	{	59	10
ID	dct_mat	60	0	0x55b04af2f568
LBRACKET	[	60	7
ID	u	60	8	0x55b04af2f590
RBRACKET	]	60	9
LBRACKET	[	60	10
ID	v	60	11	0x55b04af2f5b8
RBRACKET	]	60	12
ASSIGN	=	60	13
ID	dct_mat	61	0	0x55b04af2f568
LBRACKET	[	61	7
ID	u	61	8	0x55b04af2f590
RBRACKET	]	61	9
LBRACKET	[	61	10
ID	v	61	11	0x55b04af2f5b8
RBRACKET	]	61	12
ADD	+	61	13
ID	mat	61	14	0x55b04af2f428
LBRACKET	[	61	17
ID	i	61	18	0x55b04af2f4a0
RBRACKET	]	61	19
LBRACKET	[	61	20
ID	j	61	21	0x55b04af2f4f0
RBRACKET	]	61	22
MUL	*	61	23
ID	my_cos	61	24	0x55b04af2f3d8
LPAREN	(	61	30
ID	PI	61	31	0x55b04af2f270
DIV	/	61	33
ID	n	61	34	0x55b04af2f450
MUL	*	61	35
LPAREN	(	61	36
ID	i	61	37	0x55b04af2f4a0
ADD	+	61	38
FLOAT	1.	61	39	1.000000
DIV	/	61	41
FLOAT	2.	61	42	2.000000
RPAREN	)	61	44
MUL	*	61	45
ID	u	61	46	0x55b04af2f590
RPAREN	)	61	47
MUL	*	61	48
ID	my_cos	62	0	0x55b04af2f3d8
LPAREN	(	62	6
ID	PI	62	7	0x55b04af2f270
DIV	/	62	9
ID	m	62	10	0x55b04af2f478
MUL	*	62	11
LPAREN	(	62	12
ID	j	62	13	0x55b04af2f4f0
ADD	+	62	14
FLOAT	1.	62	15	1.000000
DIV	/	62	17
FLOAT	2.	62	18	2.000000
RPAREN	)	62	20
MUL	*	62	21
ID	v	62	22	0x55b04af2f5b8
RPAREN	)	62	23
SEMICOLON	;	62	24
ID	j	63	0	0x55b04af2f4f0
ASSIGN	=	63	1
ID	j	63	2	0x55b04af2f4f0
ADD	+	63	3
DECIMAL	1	63	4	1
SEMICOLON	;	63	5
RBRACE	}	64	0
ID	i	65	0	0x55b04af2f4a0
ASSIGN	=	65	1
ID	i	65	2	0x55b04af2f4a0
ADD	+	65	3
DECIMAL	1	65	4	1
SEMICOLON	;	65	5
RBRACE	}	66	0
ID	v	67	0	0x55b04af2f5b8
ASSIGN	=	67	1
ID	v	67	2	0x55b04af2f5b8
ADD	+	67	3
DECIMAL	1	67	4	1
SEMICOLON	;	67	5
RBRACE	}	68	0
ID	u	69	0	0x55b04af2f590
ASSIGN	=	69	1
ID	u	69	2	0x55b04af2f590
ADD	+	69	3
DECIMAL	1	69	4	1
SEMICOLON	;	69	5
RBRACE	}	70	0
RBRACE	}	71	0
VOID	void	73	0
ID	idct	73	4	0x55b04af2f5e0
LPAREN	(	73	8
FLOAT	float	73	9
ID	mat	73	14	0x55b04af2f428
LBRACKET	[	73	17
RBRACKET	]	73	18
LBRACKET	[	73	19
ID	MAX_DIM_Y	73	20	0x55b04af2f1d0
RBRACKET	]	73	29
COMMA	,	73	30
FLOAT	float	73	31
ID	dct_mat	73	36	0x55b04af2f568
LBRACKET	[	73	43
RBRACKET	]	73	44
LBRACKET	[	73	45
ID	MAX_DIM_Y	73	46	0x55b04af2f1d0
RBRACKET	]	73	55
COMMA	,	73	56
INT	int	73	57
ID	n	73	60	0x55b04af2f450
COMMA	,	73	61
INT	int	73	62
ID	m	73	65	0x55b04af2f478
RPAREN	)	73	66
LBRACE	{	73	67
INT	int	74	0
ID	u	74	3	0x55b04af2f590
ASSIGN	=	74	4
DECIMAL	0	74	5	0
SEMICOLON	;	74	6
WHILE	while	75	0
LPAREN	(	75	5
ID	u	75	6	0x55b04af2f590
LESS	<	75	7
ID	n	75	8	0x55b04af2f450
RPAREN	)	75	9
LBRACE	{	75	10
INT	int	76	0
ID	v	76	3	0x55b04af2f5b8
ASSIGN	=	76	4
DECIMAL	0	76	5	0
SEMICOLON	;	76	6
WHILE	while	77	0
LPAREN	(	77	5
ID	v	77	6	0x55b04af2f5b8
LESS	<	77	7
ID	m	77	8	0x55b04af2f478
RPAREN	)	77	9
LBRACE	{	77	10
ID	mat	78	0	0x55b04af2f428
LBRACKET	[	78	3
ID	u	78	4	0x55b04af2f590
RBRACKET	]	78	5
LBRACKET	[	78	6
ID	v	78	7	0x55b04af2f5b8
RBRACKET	]	78	8
ASSIGN	=	78	9
DECIMAL	1	78	10	1
DIV	/	78	11
FLOAT	4.	78	12	4.000000
MUL	*	78	14
ID	dct_mat	78	15	0x55b04af2f568
LBRACKET	[	78	22
DECIMAL	0	78	23	0
RBRACKET	]	78	24
LBRACKET	[	78	25
DECIMAL	0	78	26	0
RBRACKET	]	78	27
SEMICOLON	;	78	28
INT	int	79	0
ID	i	79	3	0x55b04af2f4a0
COMMA	,	79	4
ID	j	79	5	0x55b04af2f4f0
SEMICOLON	;	79	6
ID	i	81	0	0x55b04af2f4a0
ASSIGN	=	81	1
DECIMAL	1	81	2	1
SEMICOLON	;	81	3
WHILE	while	82	0
LPAREN	(	82	5
ID	i	82	6	0x55b04af2f4a0
LESS	<	82	7
ID	n	82	8	0x55b04af2f450
RPAREN	)	82	9
LBRACE	{	82	10
ID	mat	83	0	0x55b04af2f428
LBRACKET	[	83	3
ID	u	83	4	0x55b04af2f590
RBRACKET	]	83	5
LBRACKET	[	83	6
ID	v	83	7	0x55b04af2f5b8
RBRACKET	]	83	8
ASSIGN	=	83	9
ID	mat	83	10	0x55b04af2f428
LBRACKET	[	83	13
ID	u	83	14	0x55b04af2f590
RBRACKET	]	83	15
LBRACKET	[	83	16
ID	v	83	17	0x55b04af2f5b8
RBRACKET	]	83	18
ADD	+	83	19
DECIMAL	1	83	20	1
DIV	/	83	21
FLOAT	2.	83	22	2.000000
MUL	*	83	24
ID	dct_mat	83	25	0x55b04af2f568
LBRACKET	[	83	32
ID	i	83	33	0x55b04af2f4a0
RBRACKET	]	83	34
LBRACKET	[	83	35
DECIMAL	0	83	36	0
RBRACKET	]	83	37
SEMICOLON	;	83	38
ID	i	84	0	0x55b04af2f4a0
ASSIGN	=	84	1
ID	i	84	2	0x55b04af2f4a0
ADD	+	84	3
DECIMAL	1	84	4	1
SEMICOLON	;	84	5
RBRACE	}	85	0
ID	j	86	0	0x55b04af2f4f0
ASSIGN	=	86	1
DECIMAL	1	86	2	1
SEMICOLON	;	86	3
WHILE	while	87	0
LPAREN	(	87	5
ID	j	87	6	0x55b04af2f4f0
LESS	<	87	7
ID	m	87	8	0x55b04af2f478
RPAREN	)	87	9
LBRACE	{	87	10
ID	mat	88	0	0x55b04af2f428
LBRACKET	[	88	3
ID	u	88	4	0x55b04af2f590
RBRACKET	]	88	5
LBRACKET	[	88	6
ID	v	88	7	0x55b04af2f5b8
RBRACKET	]	88	8
ASSIGN	=	88	9
ID	mat	88	10	0x55b04af2f428
LBRACKET	[	88	13
ID	u	88	14	0x55b04af2f590
RBRACKET	]	88	15
LBRACKET	[	88	16
ID	v	88	17	0x55b04af2f5b8
RBRACKET	]	88	18
ADD	+	88	19
DECIMAL	1	88	20	1
DIV	/	88	21
FLOAT	2.	88	22	2.000000
MUL	*	88	24
ID	dct_mat	88	25	0x55b04af2f568
LBRACKET	[	88	32
DECIMAL	0	88	33	0
RBRACKET	]	88	34
LBRACKET	[	88	35
ID	j	88	36	0x55b04af2f4f0
RBRACKET	]	88	37
SEMICOLON	;	88	38
ID	j	89	0	0x55b04af2f4f0
ASSIGN	=	89	1
ID	j	89	2	0x55b04af2f4f0
ADD	+	89	3
DECIMAL	1	89	4	1
SEMICOLON	;	89	5
RBRACE	}	90	0
ID	i	92	0	0x55b04af2f4a0
ASSIGN	=	92	1
DECIMAL	1	92	2	1
SEMICOLON	;	92	3
WHILE	while	93	0
LPAREN	(	93	5
ID	i	93	6	0x55b04af2f4a0
LESS	<	93	7
ID	n	93	8	0x55b04af2f450
RPAREN	)	93	9
LBRACE	{	93	10
ID	j	94	0	0x55b04af2f4f0
ASSIGN	=	94	1
DECIMAL	1	94	2	1
SEMICOLON	;	94	3
WHILE	while	95	0
LPAREN	(	95	5
ID	j	95	6	0x55b04af2f4f0
LESS	<	95	7
ID	m	95	8	0x55b04af2f478
RPAREN	)	95	9
LBRACE	{	95	10
ID	mat	96	0	0x55b04af2f428
LBRACKET	[	96	3
ID	u	96	4	0x55b04af2f590
RBRACKET	]	96	5
LBRACKET	[	96	6
ID	v	96	7	0x55b04af2f5b8
RBRACKET	]	96	8
ASSIGN	=	96	9
ID	mat	96	10	0x55b04af2f428
LBRACKET	[	96	13
ID	u	96	14	0x55b04af2f590
RBRACKET	]	96	15
LBRACKET	[	96	16
ID	v	96	17	0x55b04af2f5b8
RBRACKET	]	96	18
ADD	+	96	19
ID	dct_mat	96	20	0x55b04af2f568
LBRACKET	[	96	27
ID	i	96	28	0x55b04af2f4a0
RBRACKET	]	96	29
LBRACKET	[	96	30
ID	j	96	31	0x55b04af2f4f0
RBRACKET	]	96	32
MUL	*	96	33
ID	my_cos	97	0	0x55b04af2f3d8
LPAREN	(	97	6
ID	PI	97	7	0x55b04af2f270
DIV	/	97	9
ID	n	97	10	0x55b04af2f450
MUL	*	97	11
LPAREN	(	97	12
ID	u	97	13	0x55b04af2f590
ADD	+	97	14
FLOAT	1.	97	15	1.000000
DIV	/	97	17
FLOAT	2.	97	18	2.000000
RPAREN	)	97	20
MUL	*	97	21
ID	i	97	22	0x55b04af2f4a0
RPAREN	)	97	23
MUL	*	97	24
ID	my_cos	98	0	0x55b04af2f3d8
LPAREN	(	98	6
ID	PI	98	7	0x55b04af2f270
DIV	/	98	9
ID	m	98	10	0x55b04af2f478
MUL	*	98	11
LPAREN	(	98	12
ID	v	98	13	0x55b04af2f5b8
ADD	+	98	14
FLOAT	1.	98	15	1.000000
DIV	/	98	17
FLOAT	2.	98	18	2.000000
RPAREN	)	98	20
MUL	*	98	21
ID	j	98	22	0x55b04af2f4f0
RPAREN	)	98	23
SEMICOLON	;	98	24
ID	j	99	0	0x55b04af2f4f0
ASSIGN	=	99	1
ID	j	99	2	0x55b04af2f4f0
ADD	+	99	3
DECIMAL	1	99	4	1
SEMICOLON	;	99	5
RBRACE	}	100	0
ID	i	101	0	0x55b04af2f4a0
ASSIGN	=	101	1
ID	i	101	2	0x55b04af2f4a0
ADD	+	101	3
DECIMAL	1	101	4	1
SEMICOLON	;	101	5
RBRACE	}	102	0
ID	mat	103	0	0x55b04af2f428
LBRACKET	[	103	3
ID	u	103	4	0x55b04af2f590
RBRACKET	]	103	5
LBRACKET	[	103	6
ID	v	103	7	0x55b04af2f5b8
RBRACKET	]	103	8
ASSIGN	=	103	9
ID	mat	103	10	0x55b04af2f428
LBRACKET	[	103	13
ID	u	103	14	0x55b04af2f590
RBRACKET	]	103	15
LBRACKET	[	103	16
ID	v	103	17	0x55b04af2f5b8
RBRACKET	]	103	18
MUL	*	103	19
FLOAT	2.	103	20	2.000000
DIV	/	103	22
ID	n	103	23	0x55b04af2f450
MUL	*	103	24
FLOAT	2.	103	25	2.000000
DIV	/	103	27
ID	m	103	28	0x55b04af2f478
SEMICOLON	;	103	29
ID	v	104	0	0x55b04af2f5b8
ASSIGN	=	104	1
ID	v	104	2	0x55b04af2f5b8
ADD	+	104	3
DECIMAL	1	104	4	1
SEMICOLON	;	104	5
RBRACE	}	105	0
ID	u	106	0	0x55b04af2f590
ASSIGN	=	106	1
ID	u	106	2	0x55b04af2f590
ADD	+	106	3
DECIMAL	1	106	4	1
SEMICOLON	;	106	5
RBRACE	}	107	0
RBRACE	}	108	0
INT	int	110	0
ID	main	110	3	0x55b04af2f608
LPAREN	(	110	7
RPAREN	)	110	8
LBRACE	{	110	9
INT	int	111	0
ID	dim_x	111	3	0x55b04af2f630
ASSIGN	=	111	8
ID	getint	111	9	0x55b04af2f658
LPAREN	(	111	15
RPAREN	)	111	16
COMMA	,	111	17
ID	dim_y	111	18	0x55b04af2f680
ASSIGN	=	111	23
ID	getint	111	24	0x55b04af2f658
LPAREN	(	111	30
RPAREN	)	111	31
SEMICOLON	;	111	32
INT	int	113	0
ID	i	113	3	0x55b04af2f4a0
ASSIGN	=	113	4
DECIMAL	0	113	5	0
SEMICOLON	;	113	6
WHILE	while	114	0
LPAREN	(	114	5
ID	i	114	6	0x55b04af2f4a0
LESS	<	114	7
ID	dim_x	114	8	0x55b04af2f630
RPAREN	)	114	13
LBRACE	{	114	14
INT	int	115	0
ID	j	115	3	0x55b04af2f4f0
ASSIGN	=	115	4
DECIMAL	0	115	5	0
SEMICOLON	;	115	6
WHILE	while	116	0
LPAREN	(	116	5
ID	j	116	6	0x55b04af2f4f0
LESS	<	116	7
ID	dim_y	116	8	0x55b04af2f680
RPAREN	)	116	13
LBRACE	{	116	14
ID	test_block	117	0	0x55b04af2f1f8
LBRACKET	[	117	10
ID	i	117	11	0x55b04af2f4a0
RBRACKET	]	117	12
LBRACKET	[	117	13
ID	j	117	14	0x55b04af2f4f0
RBRACKET	]	117	15
ASSIGN	=	117	16
ID	getfloat	117	17	0x55b04af2f6a8
LPAREN	(	117	25
RPAREN	)	117	26
SEMICOLON	;	117	27
ID	j	118	0	0x55b04af2f4f0
ASSIGN	=	118	1
ID	j	118	2	0x55b04af2f4f0
ADD	+	118	3
DECIMAL	1	118	4	1
SEMICOLON	;	118	5
RBRACE	}	119	0
ID	i	120	0	0x55b04af2f4a0
ASSIGN	=	120	1
ID	i	120	2	0x55b04af2f4a0
ADD	+	120	3
DECIMAL	1	120	4	1
SEMICOLON	;	120	5
RBRACE	}	121	0
ID	dct	123	0	0x55b04af2f540
LPAREN	(	123	3
ID	test_dct	123	4	0x55b04af2f220
COMMA	,	123	12
ID	test_block	123	13	0x55b04af2f1f8
COMMA	,	123	23
ID	dim_x	123	24	0x55b04af2f630
COMMA	,	123	29
ID	dim_y	123	30	0x55b04af2f680
RPAREN	)	123	35
SEMICOLON	;	123	36
ID	write_mat	124	0	0x55b04af2f400
LPAREN	(	124	9
ID	test_dct	124	10	0x55b04af2f220
COMMA	,	124	18
ID	dim_x	124	19	0x55b04af2f630
COMMA	,	124	24
ID	dim_y	124	25	0x55b04af2f680
RPAREN	)	124	30
SEMICOLON	;	124	31
ID	idct	126	0	0x55b04af2f5e0
LPAREN	(	126	4
ID	test_idct	126	5	0x55b04af2f248
COMMA	,	126	14
ID	test_dct	126	15	0x55b04af2f220
COMMA	,	126	23
ID	dim_x	126	24	0x55b04af2f630
COMMA	,	126	29
ID	dim_y	126	30	0x55b04af2f680
RPAREN	)	126	35
SEMICOLON	;	126	36
ID	write_mat	127	0	0x55b04af2f400
LPAREN	(	127	9
ID	test_idct	127	10	0x55b04af2f248
COMMA	,	127	19
ID	dim_x	127	20	0x55b04af2f630
COMMA	,	127	25
ID	dim_y	127	26	0x55b04af2f680
RPAREN	)	127	31
SEMICOLON	;	127	32
RETURN	return	129	0
DECIMAL	0	129	6	0
SEMICOLON	;	129	7
RBRACE	}	130	0
