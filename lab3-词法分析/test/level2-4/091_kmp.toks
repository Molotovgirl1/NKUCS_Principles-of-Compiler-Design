VOID	void	1	0
ID	get_next	1	4	0x55fa4da141a8
LPAREN	(	1	12
INT	int	1	13
ID	str	1	16	0x55fa4da141d0
LBRACKET	[	1	19
RBRACKET	]	1	20
COMMA	,	1	21
INT	int	1	22
ID	next	1	25	0x55fa4da141f8
LBRACKET	[	1	29
RBRACKET	]	1	30
RPAREN	)	1	31
LBRACE	{	2	0
ID	next	3	0	0x55fa4da141f8
LBRACKET	[	3	4
DECIMAL	0	3	5	0
RBRACKET	]	3	6
ASSIGN	=	3	7
SUB	-	3	8
DECIMAL	1	3	9	1
SEMICOLON	;	3	10
INT	int	4	0
ID	i	4	3	0x55fa4da14220
ASSIGN	=	4	4
DECIMAL	0	4	5	0
COMMA	,	4	6
ID	j	4	7	0x55fa4da14248
ASSIGN	=	4	8
SUB	-	4	9
DECIMAL	1	4	10	1
SEMICOLON	;	4	11
WHILE	while	5	0
LPAREN	(	5	5
ID	str	5	6	0x55fa4da141d0
LBRACKET	[	5	9
ID	i	5	10	0x55fa4da14220
RBRACKET	]	5	11
RPAREN	)	5	12
LBRACE	{	5	13
IF	if	6	0
LPAREN	(	6	2
ID	j	6	3	0x55fa4da14248
EQUAL	==	6	4
SUB	-	6	6
DECIMAL	1	6	7	1
OR	||	6	8
ID	str	6	10	0x55fa4da141d0
LBRACKET	[	6	13
ID	i	6	14	0x55fa4da14220
RBRACKET	]	6	15
EQUAL	==	6	16
ID	str	6	18	0x55fa4da141d0
LBRACKET	[	6	21
ID	j	6	22	0x55fa4da14248
RBRACKET	]	6	23
RPAREN	)	6	24
LBRACE	{	6	25
ID	j	7	0	0x55fa4da14248
ASSIGN	=	7	1
ID	j	7	2	0x55fa4da14248
ADD	+	7	3
DECIMAL	1	7	4	1
SEMICOLON	;	7	5
ID	i	8	0	0x55fa4da14220
ASSIGN	=	8	1
ID	i	8	2	0x55fa4da14220
ADD	+	8	3
DECIMAL	1	8	4	1
SEMICOLON	;	8	5
ID	next	9	0	0x55fa4da141f8
LBRACKET	[	9	4
ID	i	9	5	0x55fa4da14220
RBRACKET	]	9	6
ASSIGN	=	9	7
ID	j	9	8	0x55fa4da14248
SEMICOLON	;	9	9
RBRACE	}	10	0
ELSE	else	11	0
ID	j	12	0	0x55fa4da14248
ASSIGN	=	12	1
ID	next	12	2	0x55fa4da141f8
LBRACKET	[	12	6
ID	j	12	7	0x55fa4da14248
RBRACKET	]	12	8
SEMICOLON	;	12	9
RBRACE	}	13	0
RBRACE	}	14	0
INT	int	16	0
ID	KMP	16	3	0x55fa4da14270
LPAREN	(	16	6
INT	int	16	7
ID	dst	16	10	0x55fa4da14298
LBRACKET	[	16	13
RBRACKET	]	16	14
COMMA	,	16	15
INT	int	16	16
ID	src	16	19	0x55fa4da142c0
LBRACKET	[	16	22
RBRACKET	]	16	23
RPAREN	)	16	24
LBRACE	{	17	0
INT	int	18	0
ID	next	18	3	0x55fa4da141f8
LBRACKET	[	18	7
DECIMAL	4096	18	8	4096
RBRACKET	]	18	12
SEMICOLON	;	18	13
ID	get_next	19	0	0x55fa4da141a8
LPAREN	(	19	8
ID	dst	19	9	0x55fa4da14298
COMMA	,	19	12
ID	next	19	13	0x55fa4da141f8
RPAREN	)	19	17
SEMICOLON	;	19	18
INT	int	21	0
ID	i	21	3	0x55fa4da14220
ASSIGN	=	21	4
DECIMAL	0	21	5	0
COMMA	,	21	6
ID	j	21	7	0x55fa4da14248
ASSIGN	=	21	8
DECIMAL	0	21	9	0
SEMICOLON	;	21	10
WHILE	while	22	0
LPAREN	(	22	5
ID	src	22	6	0x55fa4da142c0
LBRACKET	[	22	9
ID	j	22	10	0x55fa4da14248
RBRACKET	]	22	11
RPAREN	)	22	12
LBRACE	{	22	13
IF	if	23	0
LPAREN	(	23	2
ID	dst	23	3	0x55fa4da14298
LBRACKET	[	23	6
ID	i	23	7	0x55fa4da14220
RBRACKET	]	23	8
EQUAL	==	23	9
ID	src	23	11	0x55fa4da142c0
LBRACKET	[	23	14
ID	j	23	15	0x55fa4da14248
RBRACKET	]	23	16
RPAREN	)	23	17
LBRACE	{	23	18
ID	i	24	0	0x55fa4da14220
ASSIGN	=	24	1
ID	i	24	2	0x55fa4da14220
ADD	+	24	3
DECIMAL	1	24	4	1
SEMICOLON	;	24	5
ID	j	25	0	0x55fa4da14248
ASSIGN	=	25	1
ID	j	25	2	0x55fa4da14248
ADD	+	25	3
DECIMAL	1	25	4	1
SEMICOLON	;	25	5
IF	if	26	0
LPAREN	(	26	2
NOT	!	26	3
ID	dst	26	4	0x55fa4da14298
LBRACKET	[	26	7
ID	i	26	8	0x55fa4da14220
RBRACKET	]	26	9
RPAREN	)	26	10
LBRACE	{	26	11
RETURN	return	27	0
ID	j	27	6	0x55fa4da14248
SEMICOLON	;	27	7
RBRACE	}	28	0
RBRACE	}	29	0
ELSE	else	29	1
LBRACE	{	29	5
ID	i	30	0	0x55fa4da14220
ASSIGN	=	30	1
ID	next	30	2	0x55fa4da141f8
LBRACKET	[	30	6
ID	i	30	7	0x55fa4da14220
RBRACKET	]	30	8
SEMICOLON	;	30	9
IF	if	31	0
LPAREN	(	31	2
ID	i	31	3	0x55fa4da14220
EQUAL	==	31	4
SUB	-	31	6
DECIMAL	1	31	7	1
RPAREN	)	31	8
LBRACE	{	31	9
ID	i	32	0	0x55fa4da14220
ASSIGN	=	32	1
ID	i	32	2	0x55fa4da14220
ADD	+	32	3
DECIMAL	1	32	4	1
SEMICOLON	;	32	5
ID	j	33	0	0x55fa4da14248
ASSIGN	=	33	1
ID	j	33	2	0x55fa4da14248
ADD	+	33	3
DECIMAL	1	33	4	1
SEMICOLON	;	33	5
RBRACE	}	34	0
RBRACE	}	35	0
RBRACE	}	36	0
RETURN	return	37	0
SUB	-	37	6
DECIMAL	1	37	7	1
SEMICOLON	;	37	8
RBRACE	}	38	0
INT	int	40	0
ID	read_str	40	3	0x55fa4da142e8
LPAREN	(	40	11
INT	int	40	12
ID	buf	40	15	0x55fa4da14310
LBRACKET	[	40	18
RBRACKET	]	40	19
RPAREN	)	40	20
LBRACE	{	41	0
INT	int	42	0
ID	i	42	3	0x55fa4da14220
ASSIGN	=	42	4
DECIMAL	0	42	5	0
SEMICOLON	;	42	6
WHILE	while	43	0
LPAREN	(	43	5
DECIMAL	1	43	6	1
RPAREN	)	43	7
LBRACE	{	43	8
ID	buf	44	0	0x55fa4da14310
LBRACKET	[	44	3
ID	i	44	4	0x55fa4da14220
RBRACKET	]	44	5
ASSIGN	=	44	6
ID	getch	44	7	0x55fa4da14338
LPAREN	(	44	12
RPAREN	)	44	13
SEMICOLON	;	44	14
IF	if	45	0
LPAREN	(	45	2
ID	buf	45	3	0x55fa4da14310
LBRACKET	[	45	6
ID	i	45	7	0x55fa4da14220
RBRACKET	]	45	8
EQUAL	==	45	9
DECIMAL	10	45	11	10
RPAREN	)	45	13
BREAK	break	46	0
SEMICOLON	;	46	5
ID	i	47	0	0x55fa4da14220
ASSIGN	=	47	1
ID	i	47	2	0x55fa4da14220
ADD	+	47	3
DECIMAL	1	47	4	1
SEMICOLON	;	47	5
RBRACE	}	48	0
ID	buf	49	0	0x55fa4da14310
LBRACKET	[	49	3
ID	i	49	4	0x55fa4da14220
RBRACKET	]	49	5
ASSIGN	=	49	6
DECIMAL	0	49	7	0
SEMICOLON	;	49	8
RETURN	return	50	0
ID	i	50	6	0x55fa4da14220
SEMICOLON	;	50	7
RBRACE	}	51	0
INT	int	53	0
ID	main	53	3	0x55fa4da14360
LPAREN	(	53	7
RPAREN	)	53	8
LBRACE	{	54	0
INT	int	55	0
ID	dst	55	3	0x55fa4da14298
LBRACKET	[	55	6
DECIMAL	4096	55	7	4096
RBRACKET	]	55	11
COMMA	,	55	12
ID	src	55	13	0x55fa4da142c0
LBRACKET	[	55	16
DECIMAL	4096	55	17	4096
RBRACKET	]	55	21
SEMICOLON	;	55	22
ID	read_str	56	0	0x55fa4da142e8
LPAREN	(	56	8
ID	dst	56	9	0x55fa4da14298
RPAREN	)	56	12
SEMICOLON	;	56	13
ID	read_str	57	0	0x55fa4da142e8
LPAREN	(	57	8
ID	src	57	9	0x55fa4da142c0
RPAREN	)	57	12
SEMICOLON	;	57	13
ID	putint	58	0	0x55fa4da14388
LPAREN	(	58	6
ID	KMP	58	7	0x55fa4da14270
LPAREN	(	58	10
ID	dst	58	11	0x55fa4da14298
COMMA	,	58	14
ID	src	58	15	0x55fa4da142c0
RPAREN	)	58	18
RPAREN	)	58	19
SEMICOLON	;	58	20
ID	putch	59	0	0x55fa4da143b0
LPAREN	(	59	5
DECIMAL	10	59	6	10
RPAREN	)	59	8
SEMICOLON	;	59	9
RETURN	return	60	0
DECIMAL	0	60	6	0
SEMICOLON	;	60	7
RBRACE	}	61	0
