INT	int	1	0
ID	main	1	3	0x55b01fcd61a8
LPAREN	(	1	7
RPAREN	)	1	8
LBRACE	{	2	0
INT	int	4	0
ID	i	4	3	0x55b01fcd61d0
SEMICOLON	;	4	4
INT	int	5	0
ID	sum	5	3	0x55b01fcd61f8
SEMICOLON	;	5	6
INT	int	6	0
ID	a	6	3	0x55b01fcd6220
LBRACKET	[	6	4
DECIMAL	10	6	5	10
RBRACKET	]	6	7
SEMICOLON	;	6	8
ID	sum	7	0	0x55b01fcd61f8
ASSIGN	=	7	3
DECIMAL	0	7	4	0
SEMICOLON	;	7	5
ID	i	10	0	0x55b01fcd61d0
ASSIGN	=	10	1
DECIMAL	0	10	2	0
SEMICOLON	;	10	3
WHILE	while	11	0
LPAREN	(	11	5
ID	i	11	6	0x55b01fcd61d0
LESS	<	11	7
DECIMAL	10	11	8	10
RPAREN	)	11	10
LBRACE	{	12	0
ID	a	13	0	0x55b01fcd6220
LBRACKET	[	13	1
ID	i	13	2	0x55b01fcd61d0
RBRACKET	]	13	3
ASSIGN	=	13	4
ID	i	13	5	0x55b01fcd61d0
ADD	+	13	6
DECIMAL	1	13	7	1
SEMICOLON	;	13	8
ID	i	14	0	0x55b01fcd61d0
ASSIGN	=	14	1
ID	i	14	2	0x55b01fcd61d0
ADD	+	14	3
DECIMAL	1	14	4	1
SEMICOLON	;	14	5
RBRACE	}	15	0
INT	int	16	0
ID	x	16	3	0x55b01fcd6248
SEMICOLON	;	16	4
INT	int	17	0
ID	high	17	3	0x55b01fcd6270
SEMICOLON	;	17	7
INT	int	18	0
ID	low	18	3	0x55b01fcd6298
SEMICOLON	;	18	6
INT	int	19	0
ID	mid	19	3	0x55b01fcd62c0
SEMICOLON	;	19	6
INT	int	20	0
ID	n	20	3	0x55b01fcd62e8
SEMICOLON	;	20	4
ID	n	21	0	0x55b01fcd62e8
ASSIGN	=	21	1
DECIMAL	10	21	2	10
SEMICOLON	;	21	4
ID	x	22	0	0x55b01fcd6248
ASSIGN	=	22	1
ID	getint	22	2	0x55b01fcd6310
LPAREN	(	22	8
RPAREN	)	22	9
SEMICOLON	;	22	10
ID	high	23	0	0x55b01fcd6270
ASSIGN	=	23	4
ID	n	23	5	0x55b01fcd62e8
SUB	-	23	6
DECIMAL	1	23	7	1
SEMICOLON	;	23	8
ID	low	24	0	0x55b01fcd6298
ASSIGN	=	24	3
DECIMAL	0	24	4	0
SEMICOLON	;	24	5
ID	mid	25	0	0x55b01fcd62c0
ASSIGN	=	25	3
LPAREN	(	25	4
ID	high	25	5	0x55b01fcd6270
ADD	+	25	9
ID	low	25	10	0x55b01fcd6298
RPAREN	)	25	13
DIV	/	25	14
DECIMAL	2	25	15	2
SEMICOLON	;	25	16
WHILE	while	26	0
LPAREN	(	26	5
ID	a	26	6	0x55b01fcd6220
LBRACKET	[	26	7
ID	mid	26	8	0x55b01fcd62c0
RBRACKET	]	26	11
NEQUAL	!=	26	12
ID	x	26	14	0x55b01fcd6248
AND	&&	26	15
ID	low	26	17	0x55b01fcd6298
LESS	<	26	20
ID	high	26	21	0x55b01fcd6270
RPAREN	)	26	25
LBRACE	{	27	0
ID	mid	28	0	0x55b01fcd62c0
ASSIGN	=	28	3
LPAREN	(	28	4
ID	high	28	5	0x55b01fcd6270
ADD	+	28	9
ID	low	28	10	0x55b01fcd6298
RPAREN	)	28	13
DIV	/	28	14
DECIMAL	2	28	15	2
SEMICOLON	;	28	16
IF	if	29	0
LPAREN	(	29	2
ID	x	29	3	0x55b01fcd6248
LESS	<	29	4
ID	a	29	5	0x55b01fcd6220
LBRACKET	[	29	6
ID	mid	29	7	0x55b01fcd62c0
RBRACKET	]	29	10
RPAREN	)	29	11
ID	high	30	0	0x55b01fcd6270
ASSIGN	=	30	4
ID	mid	30	5	0x55b01fcd62c0
SUB	-	30	8
DECIMAL	1	30	9	1
SEMICOLON	;	30	10
ELSE	else	31	0
LBRACE	{	32	0
ID	low	33	0	0x55b01fcd6298
ASSIGN	=	33	3
ID	mid	33	4	0x55b01fcd62c0
ADD	+	33	7
DECIMAL	1	33	8	1
SEMICOLON	;	33	9
RBRACE	}	34	0
RBRACE	}	36	0
IF	if	38	0
LPAREN	(	38	2
ID	x	38	3	0x55b01fcd6248
EQUAL	==	38	4
ID	a	38	6	0x55b01fcd6220
LBRACKET	[	38	7
ID	mid	38	8	0x55b01fcd62c0
RBRACKET	]	38	11
RPAREN	)	38	12
ID	putint	39	0	0x55b01fcd6338
LPAREN	(	39	6
ID	x	39	7	0x55b01fcd6248
RPAREN	)	39	8
SEMICOLON	;	39	9
ELSE	else	40	0
LBRACE	{	41	0
ID	x	42	0	0x55b01fcd6248
ASSIGN	=	42	1
DECIMAL	0	42	2	0
SEMICOLON	;	42	3
ID	putint	43	0	0x55b01fcd6338
LPAREN	(	43	6
ID	x	43	7	0x55b01fcd6248
RPAREN	)	43	8
SEMICOLON	;	43	9
RBRACE	}	44	0
ID	x	46	0	0x55b01fcd6248
ASSIGN	=	46	1
DECIMAL	10	46	2	10
SEMICOLON	;	46	4
ID	putch	47	0	0x55b01fcd6360
LPAREN	(	47	5
ID	x	47	6	0x55b01fcd6248
RPAREN	)	47	7
SEMICOLON	;	47	8
RETURN	return	49	0
DECIMAL	0	49	6	0
SEMICOLON	;	49	7
RBRACE	}	50	0
