INT	int	0	0
ID	palindrome	0	3	0x55f3462711a8
LPAREN	(	0	13
INT	int	0	14
ID	n	0	17	0x55f3462711d0
RPAREN	)	0	18
LBRACE	{	1	0
INT	int	2	0
ID	a	2	3	0x55f3462711f8
LBRACKET	[	2	4
DECIMAL	4	2	5	4
RBRACKET	]	2	6
SEMICOLON	;	2	7
INT	int	3	0
ID	j	3	3	0x55f346271220
SEMICOLON	;	3	4
INT	int	4	0
ID	flag	4	3	0x55f346271248
SEMICOLON	;	4	7
ID	j	5	0	0x55f346271220
ASSIGN	=	5	1
DECIMAL	0	5	2	0
SEMICOLON	;	5	3
WHILE	while	6	0
LPAREN	(	6	5
ID	j	6	6	0x55f346271220
LESS	<	6	7
DECIMAL	4	6	8	4
RPAREN	)	6	9
LBRACE	{	7	0
ID	a	8	0	0x55f3462711f8
LBRACKET	[	8	1
ID	j	8	2	0x55f346271220
RBRACKET	]	8	3
ASSIGN	=	8	4
ID	n	8	5	0x55f3462711d0
MOD	%	8	6
DECIMAL	10	8	7	10
SEMICOLON	;	8	9
ID	n	9	0	0x55f3462711d0
ASSIGN	=	9	1
ID	n	9	2	0x55f3462711d0
DIV	/	9	3
DECIMAL	10	9	4	10
SEMICOLON	;	9	6
ID	j	10	0	0x55f346271220
ASSIGN	=	10	1
ID	j	10	2	0x55f346271220
ADD	+	10	3
DECIMAL	1	10	4	1
SEMICOLON	;	10	5
RBRACE	}	11	0
IF	if	13	0
LPAREN	(	13	2
ID	a	13	3	0x55f3462711f8
LBRACKET	[	13	4
DECIMAL	0	13	5	0
RBRACKET	]	13	6
EQUAL	==	13	7
ID	a	13	9	0x55f3462711f8
LBRACKET	[	13	10
DECIMAL	3	13	11	3
RBRACKET	]	13	12
AND	&&	13	13
ID	a	13	15	0x55f3462711f8
LBRACKET	[	13	16
DECIMAL	1	13	17	1
RBRACKET	]	13	18
EQUAL	==	13	19
ID	a	13	21	0x55f3462711f8
LBRACKET	[	13	22
DECIMAL	2	13	23	2
RBRACKET	]	13	24
RPAREN	)	13	25
LBRACE	{	14	0
ID	flag	15	0	0x55f346271248
ASSIGN	=	15	4
DECIMAL	1	15	5	1
SEMICOLON	;	15	6
RBRACE	}	16	0
ELSE	else	16	1
LBRACE	{	16	5
ID	flag	17	0	0x55f346271248
ASSIGN	=	17	4
DECIMAL	0	17	5	0
SEMICOLON	;	17	6
RBRACE	}	18	0
RETURN	return	19	0
ID	flag	19	6	0x55f346271248
SEMICOLON	;	19	10
RBRACE	}	20	0
INT	int	22	0
ID	main	22	3	0x55f346271270
LPAREN	(	22	7
RPAREN	)	22	8
LBRACE	{	23	0
INT	int	24	0
ID	test	24	3	0x55f346271298
SEMICOLON	;	24	7
ID	test	25	0	0x55f346271298
ASSIGN	=	25	4
DECIMAL	1221	25	5	1221
SEMICOLON	;	25	9
INT	int	26	0
ID	flag	26	3	0x55f346271248
SEMICOLON	;	26	7
ID	flag	27	0	0x55f346271248
ASSIGN	=	27	4
ID	palindrome	27	5	0x55f3462711a8
LPAREN	(	27	15
ID	test	27	16	0x55f346271298
RPAREN	)	27	20
SEMICOLON	;	27	21
IF	if	28	0
LPAREN	(	28	2
ID	flag	28	3	0x55f346271248
EQUAL	==	28	7
DECIMAL	1	28	9	1
RPAREN	)	28	10
ID	putint	29	0	0x55f3462712c0
LPAREN	(	29	6
ID	test	29	7	0x55f346271298
RPAREN	)	29	11
SEMICOLON	;	29	12
ELSE	else	30	0
LBRACE	{	31	0
ID	flag	32	0	0x55f346271248
ASSIGN	=	32	4
DECIMAL	0	32	5	0
SEMICOLON	;	32	6
ID	putint	33	0	0x55f3462712c0
LPAREN	(	33	6
ID	flag	33	7	0x55f346271248
RPAREN	)	33	11
SEMICOLON	;	33	12
RBRACE	}	34	0
ID	flag	36	0	0x55f346271248
ASSIGN	=	36	4
DECIMAL	10	36	5	10
SEMICOLON	;	36	7
ID	putch	37	0	0x55f3462712e8
LPAREN	(	37	5
ID	flag	37	6	0x55f346271248
RPAREN	)	37	10
SEMICOLON	;	37	11
RETURN	return	39	0
DECIMAL	0	39	6	0
SEMICOLON	;	39	7
RBRACE	}	41	0
