


CONST	const	3	0
INT	int	3	5
ID	TAPE_LEN	3	8	0x5638f1d191a8
ASSIGN	=	3	16
DECIMAL	65536	3	17	65536
COMMA	,	3	22
ID	BUFFER_LEN	3	23	0x5638f1d191d0
ASSIGN	=	3	33
DECIMAL	32768	3	34	32768
SEMICOLON	;	3	39
INT	int	4	0
ID	tape	4	3	0x5638f1d191f8
LBRACKET	[	4	7
ID	TAPE_LEN	4	8	0x5638f1d191a8
RBRACKET	]	4	16
COMMA	,	4	17
ID	program	4	18	0x5638f1d19220
LBRACKET	[	4	25
ID	BUFFER_LEN	4	26	0x5638f1d191d0
RBRACKET	]	4	36
COMMA	,	4	37
ID	ptr	4	38	0x5638f1d19248
ASSIGN	=	4	41
DECIMAL	0	4	42	0
SEMICOLON	;	4	43
VOID	void	7	0
ID	read_program	7	4	0x5638f1d19270
LPAREN	(	7	16
RPAREN	)	7	17
LBRACE	{	7	18
INT	int	8	0
ID	i	8	3	0x5638f1d19298
ASSIGN	=	8	4
DECIMAL	0	8	5	0
COMMA	,	8	6
ID	len	8	7	0x5638f1d192c0
ASSIGN	=	8	10
ID	getint	8	11	0x5638f1d192e8
LPAREN	(	8	17
RPAREN	)	8	18
SEMICOLON	;	8	19
WHILE	while	9	0
LPAREN	(	9	5
ID	i	9	6	0x5638f1d19298
LESS	<	9	7
ID	len	9	8	0x5638f1d192c0
RPAREN	)	9	11
LBRACE	{	9	12
ID	program	10	0	0x5638f1d19220
LBRACKET	[	10	7
ID	i	10	8	0x5638f1d19298
RBRACKET	]	10	9
ASSIGN	=	10	10
ID	getch	10	11	0x5638f1d19310
LPAREN	(	10	16
RPAREN	)	10	17
SEMICOLON	;	10	18
ID	i	11	0	0x5638f1d19298
ASSIGN	=	11	1
ID	i	11	2	0x5638f1d19298
ADD	+	11	3
DECIMAL	1	11	4	1
SEMICOLON	;	11	5
RBRACE	}	12	0
ID	program	13	0	0x5638f1d19220
LBRACKET	[	13	7
ID	i	13	8	0x5638f1d19298
RBRACKET	]	13	9
ASSIGN	=	13	10
DECIMAL	0	13	11	0
SEMICOLON	;	13	12
RBRACE	}	14	0
VOID	void	17	0
ID	interpret	17	4	0x5638f1d19338
LPAREN	(	17	13
INT	int	17	14
ID	input	17	17	0x5638f1d19360
LBRACKET	[	17	22
RBRACKET	]	17	23
RPAREN	)	17	24
LBRACE	{	17	25
INT	int	18	0
ID	cur_char	18	3	0x5638f1d19388
COMMA	,	18	11
ID	loop	18	12	0x5638f1d193b0
COMMA	,	18	16
ID	i	18	17	0x5638f1d19298
ASSIGN	=	18	18
DECIMAL	0	18	19	0
SEMICOLON	;	18	20
WHILE	while	19	0
LPAREN	(	19	5
ID	input	19	6	0x5638f1d19360
LBRACKET	[	19	11
ID	i	19	12	0x5638f1d19298
RBRACKET	]	19	13
RPAREN	)	19	14
LBRACE	{	19	15
ID	cur_char	20	0	0x5638f1d19388
ASSIGN	=	20	8
ID	input	20	9	0x5638f1d19360
LBRACKET	[	20	14
ID	i	20	15	0x5638f1d19298
RBRACKET	]	20	16
SEMICOLON	;	20	17
IF	if	21	0
LPAREN	(	21	2
ID	cur_char	21	3	0x5638f1d19388
EQUAL	==	21	11
DECIMAL	62	21	13	62
RPAREN	)	21	15
LBRACE	{	21	16
ID	ptr	23	0	0x5638f1d19248
ASSIGN	=	23	3
ID	ptr	23	4	0x5638f1d19248
ADD	+	23	7
DECIMAL	1	23	8	1
SEMICOLON	;	23	9
RBRACE	}	24	0
ELSE	else	25	0
IF	if	25	4
LPAREN	(	25	6
ID	cur_char	25	7	0x5638f1d19388
EQUAL	==	25	15
DECIMAL	60	25	17	60
RPAREN	)	25	19
LBRACE	{	25	20
ID	ptr	27	0	0x5638f1d19248
ASSIGN	=	27	3
ID	ptr	27	4	0x5638f1d19248
SUB	-	27	7
DECIMAL	1	27	8	1
SEMICOLON	;	27	9
RBRACE	}	28	0
ELSE	else	29	0
IF	if	29	4
LPAREN	(	29	6
ID	cur_char	29	7	0x5638f1d19388
EQUAL	==	29	15
DECIMAL	43	29	17	43
RPAREN	)	29	19
LBRACE	{	29	20
ID	tape	31	0	0x5638f1d191f8
LBRACKET	[	31	4
ID	ptr	31	5	0x5638f1d19248
RBRACKET	]	31	8
ASSIGN	=	31	9
ID	tape	31	10	0x5638f1d191f8
LBRACKET	[	31	14
ID	ptr	31	15	0x5638f1d19248
RBRACKET	]	31	18
ADD	+	31	19
DECIMAL	1	31	20	1
SEMICOLON	;	31	21
RBRACE	}	32	0
ELSE	else	33	0
IF	if	33	4
LPAREN	(	33	6
ID	cur_char	33	7	0x5638f1d19388
EQUAL	==	33	15
DECIMAL	45	33	17	45
RPAREN	)	33	19
LBRACE	{	33	20
ID	tape	35	0	0x5638f1d191f8
LBRACKET	[	35	4
ID	ptr	35	5	0x5638f1d19248
RBRACKET	]	35	8
ASSIGN	=	35	9
ID	tape	35	10	0x5638f1d191f8
LBRACKET	[	35	14
ID	ptr	35	15	0x5638f1d19248
RBRACKET	]	35	18
SUB	-	35	19
DECIMAL	1	35	20	1
SEMICOLON	;	35	21
RBRACE	}	36	0
ELSE	else	37	0
IF	if	37	4
LPAREN	(	37	6
ID	cur_char	37	7	0x5638f1d19388
EQUAL	==	37	15
DECIMAL	46	37	17	46
RPAREN	)	37	19
LBRACE	{	37	20
ID	putch	39	0	0x5638f1d193d8
LPAREN	(	39	5
ID	tape	39	6	0x5638f1d191f8
LBRACKET	[	39	10
ID	ptr	39	11	0x5638f1d19248
RBRACKET	]	39	14
RPAREN	)	39	15
SEMICOLON	;	39	16
RBRACE	}	40	0
ELSE	else	41	0
IF	if	41	4
LPAREN	(	41	6
ID	cur_char	41	7	0x5638f1d19388
EQUAL	==	41	15
DECIMAL	44	41	17	44
RPAREN	)	41	19
LBRACE	{	41	20
ID	tape	43	0	0x5638f1d191f8
LBRACKET	[	43	4
ID	ptr	43	5	0x5638f1d19248
RBRACKET	]	43	8
ASSIGN	=	43	9
ID	getch	43	10	0x5638f1d19310
LPAREN	(	43	15
RPAREN	)	43	16
SEMICOLON	;	43	17
RBRACE	}	44	0
ELSE	else	45	0
IF	if	45	4
LPAREN	(	45	6
ID	cur_char	45	7	0x5638f1d19388
EQUAL	==	45	15
DECIMAL	93	45	17	93
AND	&&	45	19
ID	tape	45	21	0x5638f1d191f8
LBRACKET	[	45	25
ID	ptr	45	26	0x5638f1d19248
RBRACKET	]	45	29
RPAREN	)	45	30
LBRACE	{	45	31
ID	loop	47	0	0x5638f1d193b0
ASSIGN	=	47	4
DECIMAL	1	47	5	1
SEMICOLON	;	47	6
WHILE	while	48	0
LPAREN	(	48	5
ID	loop	48	6	0x5638f1d193b0
GREATER	>	48	10
DECIMAL	0	48	11	0
RPAREN	)	48	12
LBRACE	{	48	13
ID	i	49	0	0x5638f1d19298
ASSIGN	=	49	1
ID	i	49	2	0x5638f1d19298
SUB	-	49	3
DECIMAL	1	49	4	1
SEMICOLON	;	49	5
ID	cur_char	50	0	0x5638f1d19388
ASSIGN	=	50	8
ID	input	50	9	0x5638f1d19360
LBRACKET	[	50	14
ID	i	50	15	0x5638f1d19298
RBRACKET	]	50	16
SEMICOLON	;	50	17
IF	if	51	0
LPAREN	(	51	2
ID	cur_char	51	3	0x5638f1d19388
EQUAL	==	51	11
DECIMAL	91	51	13	91
RPAREN	)	51	15
LBRACE	{	51	16
ID	loop	53	0	0x5638f1d193b0
ASSIGN	=	53	4
ID	loop	53	5	0x5638f1d193b0
SUB	-	53	9
DECIMAL	1	53	10	1
SEMICOLON	;	53	11
RBRACE	}	54	0
ELSE	else	55	0
IF	if	55	4
LPAREN	(	55	6
ID	cur_char	55	7	0x5638f1d19388
EQUAL	==	55	15
DECIMAL	93	55	17	93
RPAREN	)	55	19
LBRACE	{	55	20
ID	loop	57	0	0x5638f1d193b0
ASSIGN	=	57	4
ID	loop	57	5	0x5638f1d193b0
ADD	+	57	9
DECIMAL	1	57	10	1
SEMICOLON	;	57	11
RBRACE	}	58	0
RBRACE	}	59	0
RBRACE	}	60	0
ID	i	61	0	0x5638f1d19298
ASSIGN	=	61	1
ID	i	61	2	0x5638f1d19298
ADD	+	61	3
DECIMAL	1	61	4	1
SEMICOLON	;	61	5
RBRACE	}	62	0
RBRACE	}	63	0
INT	int	65	0
ID	main	65	3	0x5638f1d19400
LPAREN	(	65	7
RPAREN	)	65	8
LBRACE	{	65	9
ID	read_program	66	0	0x5638f1d19270
LPAREN	(	66	12
RPAREN	)	66	13
SEMICOLON	;	66	14
ID	interpret	67	0	0x5638f1d19338
LPAREN	(	67	9
ID	program	67	10	0x5638f1d19220
RPAREN	)	67	17
SEMICOLON	;	67	18
RETURN	return	68	0
DECIMAL	0	68	6	0
SEMICOLON	;	68	7
RBRACE	}	69	0
