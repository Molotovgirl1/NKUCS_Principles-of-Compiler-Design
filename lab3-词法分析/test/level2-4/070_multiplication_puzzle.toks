INT	int	0	0
ID	a	0	3	0x56249ed381a8
LBRACKET	[	0	4
DECIMAL	6	0	5	6
RBRACKET	]	0	6
ASSIGN	=	0	7
LBRACE	{	0	8
DECIMAL	10	0	9	10
COMMA	,	0	11
DECIMAL	1	0	12	1
COMMA	,	0	13
DECIMAL	50	0	14	50
COMMA	,	0	16
DECIMAL	50	0	17	50
COMMA	,	0	19
DECIMAL	20	0	20	20
COMMA	,	0	22
DECIMAL	5	0	23	5
RBRACE	}	0	24
SEMICOLON	;	0	25
INT	int	1	0
ID	dp	1	3	0x56249ed381d0
LBRACKET	[	1	5
DECIMAL	10	1	6	10
RBRACKET	]	1	8
LBRACKET	[	1	9
DECIMAL	10	1	10	10
RBRACKET	]	1	12
SEMICOLON	;	1	13
INT	int	2	0
ID	main	2	3	0x56249ed381f8
LPAREN	(	2	7
RPAREN	)	2	8
LBRACE	{	3	0
INT	int	4	0
ID	n	4	3	0x56249ed38220
SEMICOLON	;	4	4
ID	n	5	0	0x56249ed38220
ASSIGN	=	5	1
DECIMAL	6	5	2	6
SEMICOLON	;	5	3
INT	int	7	0
ID	k	7	3	0x56249ed38248
COMMA	,	7	4
ID	i	7	5	0x56249ed38270
COMMA	,	7	6
ID	t	7	7	0x56249ed38298
COMMA	,	7	8
ID	j	7	9	0x56249ed382c0
COMMA	,	7	10
ID	aa	7	11	0x56249ed382e8
SEMICOLON	;	7	13
ID	k	8	0	0x56249ed38248
ASSIGN	=	8	1
DECIMAL	3	8	2	3
SEMICOLON	;	8	3
WHILE	while	9	0
LPAREN	(	9	5
ID	k	9	6	0x56249ed38248
LEQUAL	<=	9	7
ID	n	9	9	0x56249ed38220
RPAREN	)	9	10
LBRACE	{	10	0
ID	i	11	0	0x56249ed38270
ASSIGN	=	11	1
DECIMAL	0	11	2	0
SEMICOLON	;	11	3
WHILE	while	12	0
LPAREN	(	12	5
ID	i	12	6	0x56249ed38270
LESS	<	12	7
ID	n	12	8	0x56249ed38220
SUB	-	12	9
ID	k	12	10	0x56249ed38248
ADD	+	12	11
DECIMAL	1	12	12	1
RPAREN	)	12	13
LBRACE	{	13	0
ID	j	14	0	0x56249ed382c0
ASSIGN	=	14	1
ID	i	14	2	0x56249ed38270
ADD	+	14	3
ID	k	14	4	0x56249ed38248
SUB	-	14	5
DECIMAL	1	14	6	1
SEMICOLON	;	14	7
ID	t	15	0	0x56249ed38298
ASSIGN	=	15	1
ID	i	15	2	0x56249ed38270
ADD	+	15	3
DECIMAL	1	15	4	1
SEMICOLON	;	15	5
WHILE	while	16	0
LPAREN	(	16	5
ID	t	16	6	0x56249ed38298
LESS	<	16	7
ID	j	16	8	0x56249ed382c0
RPAREN	)	16	9
LBRACE	{	17	0
ID	aa	18	0	0x56249ed382e8
ASSIGN	=	18	2
ID	dp	18	3	0x56249ed381d0
LBRACKET	[	18	5
ID	i	18	6	0x56249ed38270
RBRACKET	]	18	7
LBRACKET	[	18	8
ID	t	18	9	0x56249ed38298
RBRACKET	]	18	10
ADD	+	18	11
ID	dp	18	12	0x56249ed381d0
LBRACKET	[	18	14
ID	t	18	15	0x56249ed38298
RBRACKET	]	18	16
LBRACKET	[	18	17
ID	j	18	18	0x56249ed382c0
RBRACKET	]	18	19
ADD	+	18	20
ID	a	18	21	0x56249ed381a8
LBRACKET	[	18	22
ID	i	18	23	0x56249ed38270
RBRACKET	]	18	24
MUL	*	18	25
ID	a	18	26	0x56249ed381a8
LBRACKET	[	18	27
ID	t	18	28	0x56249ed38298
RBRACKET	]	18	29
MUL	*	18	30
ID	a	18	31	0x56249ed381a8
LBRACKET	[	18	32
ID	j	18	33	0x56249ed382c0
RBRACKET	]	18	34
SEMICOLON	;	18	35
IF	if	19	0
LPAREN	(	19	2
NOT	!	19	3
ID	dp	19	4	0x56249ed381d0
LBRACKET	[	19	6
ID	i	19	7	0x56249ed38270
RBRACKET	]	19	8
LBRACKET	[	19	9
ID	j	19	10	0x56249ed382c0
RBRACKET	]	19	11
OR	||	19	12
ID	aa	19	14	0x56249ed382e8
LESS	<	19	16
ID	dp	19	17	0x56249ed381d0
LBRACKET	[	19	19
ID	i	19	20	0x56249ed38270
RBRACKET	]	19	21
LBRACKET	[	19	22
ID	j	19	23	0x56249ed382c0
RBRACKET	]	19	24
RPAREN	)	19	25
LBRACE	{	20	0
ID	dp	21	0	0x56249ed381d0
LBRACKET	[	21	2
ID	i	21	3	0x56249ed38270
RBRACKET	]	21	4
LBRACKET	[	21	5
ID	j	21	6	0x56249ed382c0
RBRACKET	]	21	7
ASSIGN	=	21	8
ID	aa	21	9	0x56249ed382e8
SEMICOLON	;	21	11
RBRACE	}	22	0
ID	t	23	0	0x56249ed38298
ASSIGN	=	23	1
ID	t	23	2	0x56249ed38298
ADD	+	23	3
DECIMAL	1	23	4	1
SEMICOLON	;	23	5
RBRACE	}	24	0
ID	i	25	0	0x56249ed38270
ASSIGN	=	25	1
ID	i	25	2	0x56249ed38270
ADD	+	25	3
DECIMAL	1	25	4	1
SEMICOLON	;	25	5
RBRACE	}	26	0
ID	k	27	0	0x56249ed38248
ASSIGN	=	27	1
ID	k	27	2	0x56249ed38248
ADD	+	27	3
DECIMAL	1	27	4	1
SEMICOLON	;	27	5
RBRACE	}	28	0
ID	putint	29	0	0x56249ed38310
LPAREN	(	29	6
ID	dp	29	7	0x56249ed381d0
LBRACKET	[	29	9
DECIMAL	0	29	10	0
RBRACKET	]	29	11
LBRACKET	[	29	12
ID	n	29	13	0x56249ed38220
SUB	-	29	14
DECIMAL	1	29	15	1
RBRACKET	]	29	16
RPAREN	)	29	17
SEMICOLON	;	29	18
RETURN	return	30	0
DECIMAL	0	30	6	0
SEMICOLON	;	30	7
RBRACE	}	31	0
