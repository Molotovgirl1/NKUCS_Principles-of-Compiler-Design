INT	int	0	0
ID	map	0	3	0x55ff416f81a8
LBRACKET	[	0	6
DECIMAL	10	0	7	10
RBRACKET	]	0	9
LBRACKET	[	0	10
DECIMAL	10	0	11	10
RBRACKET	]	0	13
SEMICOLON	;	0	14
INT	int	1	0
ID	indegree	1	3	0x55ff416f81d0
LBRACKET	[	1	11
DECIMAL	10	1	12	10
RBRACKET	]	1	14
SEMICOLON	;	1	15
INT	int	2	0
ID	queue	2	3	0x55ff416f81f8
LBRACKET	[	2	8
DECIMAL	10	2	9	10
RBRACKET	]	2	11
SEMICOLON	;	2	12
VOID	void	3	0
ID	topo	3	4	0x55ff416f8220
LPAREN	(	3	8
INT	int	3	9
ID	n	3	12	0x55ff416f8248
RPAREN	)	3	13
LBRACE	{	4	0
INT	int	5	0
ID	m	5	3	0x55ff416f8270
ASSIGN	=	5	4
DECIMAL	0	5	5	0
SEMICOLON	;	5	6
INT	int	6	0
ID	t	6	3	0x55ff416f8298
ASSIGN	=	6	4
DECIMAL	0	6	5	0
SEMICOLON	;	6	6
INT	int	7	0
ID	i	7	3	0x55ff416f82c0
COMMA	,	7	4
ID	j	7	5	0x55ff416f82e8
SEMICOLON	;	7	6
ID	i	8	0	0x55ff416f82c0
ASSIGN	=	8	1
DECIMAL	1	8	2	1
SEMICOLON	;	8	3
ID	j	9	0	0x55ff416f82e8
ASSIGN	=	9	1
DECIMAL	1	9	2	1
SEMICOLON	;	9	3
WHILE	while	10	0
LPAREN	(	10	5
ID	i	10	6	0x55ff416f82c0
LEQUAL	<=	10	7
ID	n	10	9	0x55ff416f8248
RPAREN	)	10	10
LBRACE	{	11	0
ID	j	12	0	0x55ff416f82e8
ASSIGN	=	12	1
DECIMAL	1	12	2	1
SEMICOLON	;	12	3
WHILE	while	13	0
LPAREN	(	13	5
ID	j	13	6	0x55ff416f82e8
LEQUAL	<=	13	7
ID	n	13	9	0x55ff416f8248
RPAREN	)	13	10
LBRACE	{	14	0
IF	if	15	0
LPAREN	(	15	2
ID	indegree	15	3	0x55ff416f81d0
LBRACKET	[	15	11
ID	j	15	12	0x55ff416f82e8
RBRACKET	]	15	13
EQUAL	==	15	14
DECIMAL	0	15	16	0
RPAREN	)	15	17
LBRACE	{	16	0
ID	m	18	0	0x55ff416f8270
ASSIGN	=	18	1
ID	j	18	2	0x55ff416f82e8
SEMICOLON	;	18	3
BREAK	break	19	0
SEMICOLON	;	19	5
RBRACE	}	20	0
ID	j	21	0	0x55ff416f82e8
ASSIGN	=	21	1
ID	j	21	2	0x55ff416f82e8
ADD	+	21	3
DECIMAL	1	21	4	1
SEMICOLON	;	21	5
RBRACE	}	22	0
ID	queue	23	0	0x55ff416f81f8
LBRACKET	[	23	5
ID	t	23	6	0x55ff416f8298
RBRACKET	]	23	7
ASSIGN	=	23	8
ID	m	23	9	0x55ff416f8270
SEMICOLON	;	23	10
ID	t	24	0	0x55ff416f8298
ASSIGN	=	24	1
ID	t	24	2	0x55ff416f8298
ADD	+	24	3
DECIMAL	1	24	4	1
SEMICOLON	;	24	5
ID	indegree	25	0	0x55ff416f81d0
LBRACKET	[	25	8
ID	m	25	9	0x55ff416f8270
RBRACKET	]	25	10
ASSIGN	=	25	11
SUB	-	25	12
DECIMAL	1	25	13	1
SEMICOLON	;	25	14
ID	j	26	0	0x55ff416f82e8
ASSIGN	=	26	1
DECIMAL	1	26	2	1
SEMICOLON	;	26	3
WHILE	while	27	0
LPAREN	(	27	5
ID	j	27	6	0x55ff416f82e8
LEQUAL	<=	27	7
ID	n	27	9	0x55ff416f8248
RPAREN	)	27	10
LBRACE	{	29	0
IF	if	30	0
LPAREN	(	30	2
ID	map	30	3	0x55ff416f81a8
LBRACKET	[	30	6
ID	m	30	7	0x55ff416f8270
RBRACKET	]	30	8
LBRACKET	[	30	9
ID	j	30	10	0x55ff416f82e8
RBRACKET	]	30	11
RPAREN	)	30	12
LBRACE	{	31	0
ID	indegree	32	0	0x55ff416f81d0
LBRACKET	[	32	8
ID	j	32	9	0x55ff416f82e8
RBRACKET	]	32	10
ASSIGN	=	32	11
ID	indegree	32	12	0x55ff416f81d0
LBRACKET	[	32	20
ID	j	32	21	0x55ff416f82e8
RBRACKET	]	32	22
SUB	-	32	23
DECIMAL	1	32	24	1
SEMICOLON	;	32	25
RBRACE	}	33	0
ID	j	34	0	0x55ff416f82e8
ASSIGN	=	34	1
ID	j	34	2	0x55ff416f82e8
ADD	+	34	3
DECIMAL	1	34	4	1
SEMICOLON	;	34	5
RBRACE	}	35	0
ID	i	36	0	0x55ff416f82c0
ASSIGN	=	36	1
ID	i	36	2	0x55ff416f82c0
ADD	+	36	3
DECIMAL	1	36	4	1
SEMICOLON	;	36	5
RBRACE	}	37	0
ID	i	38	0	0x55ff416f82c0
ASSIGN	=	38	1
DECIMAL	0	38	2	0
SEMICOLON	;	38	3
WHILE	while	39	0
LPAREN	(	39	5
ID	i	39	6	0x55ff416f82c0
LESS	<	39	7
ID	n	39	8	0x55ff416f8248
RPAREN	)	39	9
LBRACE	{	40	0
ID	putint	41	0	0x55ff416f8310
LPAREN	(	41	6
ID	queue	41	7	0x55ff416f81f8
LBRACKET	[	41	12
ID	i	41	13	0x55ff416f82c0
RBRACKET	]	41	14
RPAREN	)	41	15
SEMICOLON	;	41	16
ID	putch	42	0	0x55ff416f8338
LPAREN	(	42	5
DECIMAL	10	42	6	10
RPAREN	)	42	8
SEMICOLON	;	42	9
ID	i	43	0	0x55ff416f82c0
ASSIGN	=	43	1
ID	i	43	2	0x55ff416f82c0
ADD	+	43	3
DECIMAL	1	43	4	1
SEMICOLON	;	43	5
RBRACE	}	44	0
RBRACE	}	46	0
INT	int	47	0
ID	main	47	3	0x55ff416f8360
LPAREN	(	47	7
RPAREN	)	47	8
LBRACE	{	48	0
INT	int	49	0
ID	n	49	3	0x55ff416f8248
COMMA	,	49	4
ID	p	49	5	0x55ff416f8388
SEMICOLON	;	49	6
INT	int	50	0
ID	i	50	3	0x55ff416f82c0
ASSIGN	=	50	4
DECIMAL	1	50	5	1
SEMICOLON	;	50	6
ID	n	51	0	0x55ff416f8248
ASSIGN	=	51	1
DECIMAL	5	51	2	5
SEMICOLON	;	51	3
WHILE	while	53	0
LPAREN	(	53	5
ID	i	53	6	0x55ff416f82c0
LEQUAL	<=	53	7
ID	n	53	9	0x55ff416f8248
RPAREN	)	53	10
LBRACE	{	54	0
ID	p	55	0	0x55ff416f8388
ASSIGN	=	55	1
ID	getint	55	2	0x55ff416f83b0
LPAREN	(	55	8
RPAREN	)	55	9
SEMICOLON	;	55	10
WHILE	while	56	0
LPAREN	(	56	5
ID	p	56	6	0x55ff416f8388
NEQUAL	!=	56	7
DECIMAL	0	56	9	0
RPAREN	)	56	10
LBRACE	{	57	0
ID	map	58	0	0x55ff416f81a8
LBRACKET	[	58	3
ID	i	58	4	0x55ff416f82c0
RBRACKET	]	58	5
LBRACKET	[	58	6
ID	p	58	7	0x55ff416f8388
RBRACKET	]	58	8
ASSIGN	=	58	9
DECIMAL	1	58	10	1
SEMICOLON	;	58	11
ID	indegree	59	0	0x55ff416f81d0
LBRACKET	[	59	8
ID	p	59	9	0x55ff416f8388
RBRACKET	]	59	10
ASSIGN	=	59	11
ID	indegree	59	12	0x55ff416f81d0
LBRACKET	[	59	20
ID	p	59	21	0x55ff416f8388
RBRACKET	]	59	22
ADD	+	59	23
DECIMAL	1	59	24	1
SEMICOLON	;	59	25
ID	p	60	0	0x55ff416f8388
ASSIGN	=	60	1
ID	getint	60	2	0x55ff416f83b0
LPAREN	(	60	8
RPAREN	)	60	9
SEMICOLON	;	60	10
RBRACE	}	62	0
ID	i	63	0	0x55ff416f82c0
ASSIGN	=	63	1
ID	i	63	2	0x55ff416f82c0
ADD	+	63	3
DECIMAL	1	63	4	1
SEMICOLON	;	63	5
RBRACE	}	64	0
ID	topo	65	0	0x55ff416f8220
LPAREN	(	65	4
ID	n	65	5	0x55ff416f8248
RPAREN	)	65	6
SEMICOLON	;	65	7
RETURN	return	66	0
DECIMAL	0	66	6	0
SEMICOLON	;	66	7
RBRACE	}	67	0
