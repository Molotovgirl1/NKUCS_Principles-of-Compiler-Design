INT	int	1	0
ID	MAX	1	3	0x55657cbf31a8
LPAREN	(	1	6
INT	int	1	7
ID	a	1	10	0x55657cbf31d0
COMMA	,	1	11
INT	int	1	12
ID	b	1	15	0x55657cbf31f8
RPAREN	)	1	16
LBRACE	{	2	0
IF	if	3	0
LPAREN	(	3	2
ID	a	3	3	0x55657cbf31d0
EQUAL	==	3	4
ID	b	3	6	0x55657cbf31f8
RPAREN	)	3	7
RETURN	return	4	0
ID	a	4	6	0x55657cbf31d0
SEMICOLON	;	4	7
ELSE	else	5	0
IF	if	5	4
LPAREN	(	5	6
ID	a	5	7	0x55657cbf31d0
GREATER	>	5	8
ID	b	5	9	0x55657cbf31f8
RPAREN	)	5	10
RETURN	return	6	0
ID	a	6	6	0x55657cbf31d0
SEMICOLON	;	6	7
ELSE	else	7	0
RETURN	return	8	0
ID	b	8	6	0x55657cbf31f8
SEMICOLON	;	8	7
RBRACE	}	9	0
INT	int	11	0
ID	max_sum_nonadjacent	11	3	0x55657cbf3220
LPAREN	(	11	22
INT	int	11	23
ID	arr	11	26	0x55657cbf3248
LBRACKET	[	11	29
RBRACKET	]	11	30
COMMA	,	11	31
INT	int	11	32
ID	n	11	35	0x55657cbf3270
RPAREN	)	11	36
LBRACE	{	12	0
INT	int	13	0
ID	temp	13	3	0x55657cbf3298
LBRACKET	[	13	7
DECIMAL	16	13	8	16
RBRACKET	]	13	10
ASSIGN	=	13	11
LBRACE	{	13	12
RBRACE	}	13	13
SEMICOLON	;	13	14
ID	temp	14	0	0x55657cbf3298
LBRACKET	[	14	4
DECIMAL	0	14	5	0
RBRACKET	]	14	6
ASSIGN	=	14	7
ID	arr	14	8	0x55657cbf3248
LBRACKET	[	14	11
DECIMAL	0	14	12	0
RBRACKET	]	14	13
SEMICOLON	;	14	14
ID	temp	15	0	0x55657cbf3298
LBRACKET	[	15	4
DECIMAL	1	15	5	1
RBRACKET	]	15	6
ASSIGN	=	15	7
ID	MAX	15	8	0x55657cbf31a8
LPAREN	(	15	11
ID	arr	15	12	0x55657cbf3248
LBRACKET	[	15	15
DECIMAL	0	15	16	0
RBRACKET	]	15	17
COMMA	,	15	18
ID	arr	15	19	0x55657cbf3248
LBRACKET	[	15	22
DECIMAL	1	15	23	1
RBRACKET	]	15	24
RPAREN	)	15	25
SEMICOLON	;	15	26
INT	int	16	0
ID	i	16	3	0x55657cbf32c0
ASSIGN	=	16	4
DECIMAL	2	16	5	2
SEMICOLON	;	16	6
WHILE	while	17	0
LPAREN	(	17	5
ID	i	17	6	0x55657cbf32c0
LESS	<	17	7
ID	n	17	8	0x55657cbf3270
RPAREN	)	17	9
LBRACE	{	17	10
ID	temp	18	0	0x55657cbf3298
LBRACKET	[	18	4
ID	i	18	5	0x55657cbf32c0
RBRACKET	]	18	6
ASSIGN	=	18	7
ID	MAX	18	8	0x55657cbf31a8
LPAREN	(	18	11
ID	temp	18	12	0x55657cbf3298
LBRACKET	[	18	16
ID	i	18	17	0x55657cbf32c0
SUB	-	18	18
DECIMAL	2	18	19	2
RBRACKET	]	18	20
ADD	+	18	21
ID	arr	18	22	0x55657cbf3248
LBRACKET	[	18	25
ID	i	18	26	0x55657cbf32c0
RBRACKET	]	18	27
COMMA	,	18	28
ID	temp	18	29	0x55657cbf3298
LBRACKET	[	18	33
ID	i	18	34	0x55657cbf32c0
SUB	-	18	35
DECIMAL	1	18	36	1
RBRACKET	]	18	37
RPAREN	)	18	38
SEMICOLON	;	18	39
ID	i	19	0	0x55657cbf32c0
ASSIGN	=	19	1
ID	i	19	2	0x55657cbf32c0
ADD	+	19	3
DECIMAL	1	19	4	1
SEMICOLON	;	19	5
RBRACE	}	20	0
RETURN	return	21	0
ID	temp	21	6	0x55657cbf3298
LBRACKET	[	21	10
ID	n	21	11	0x55657cbf3270
SUB	-	21	12
DECIMAL	1	21	13	1
RBRACKET	]	21	14
SEMICOLON	;	21	15
RBRACE	}	22	0
INT	int	24	0
ID	longest_common_subseq	24	3	0x55657cbf32e8
LPAREN	(	24	24
INT	int	24	25
ID	arr1	24	28	0x55657cbf3310
LBRACKET	[	24	32
RBRACKET	]	24	33
COMMA	,	24	34
INT	int	24	35
ID	len1	24	38	0x55657cbf3338
COMMA	,	24	42
INT	int	25	0
ID	arr2	25	3	0x55657cbf3360
LBRACKET	[	25	7
RBRACKET	]	25	8
COMMA	,	25	9
INT	int	25	10
ID	len2	25	13	0x55657cbf3388
RPAREN	)	25	17
LBRACE	{	26	0
INT	int	27	0
ID	p	27	3	0x55657cbf33b0
LBRACKET	[	27	4
DECIMAL	16	27	5	16
RBRACKET	]	27	7
LBRACKET	[	27	8
DECIMAL	16	27	9	16
RBRACKET	]	27	11
ASSIGN	=	27	12
LBRACE	{	27	13
RBRACE	}	27	14
SEMICOLON	;	27	15
INT	int	28	0
ID	i	28	3	0x55657cbf32c0
COMMA	,	28	4
ID	j	28	5	0x55657cbf33d8
SEMICOLON	;	28	6
ID	i	29	0	0x55657cbf32c0
ASSIGN	=	29	1
DECIMAL	1	29	2	1
SEMICOLON	;	29	3
WHILE	while	30	0
LPAREN	(	30	5
ID	i	30	6	0x55657cbf32c0
LEQUAL	<=	30	7
ID	len1	30	9	0x55657cbf3338
RPAREN	)	30	13
LBRACE	{	30	14
ID	j	31	0	0x55657cbf33d8
ASSIGN	=	31	1
DECIMAL	1	31	2	1
SEMICOLON	;	31	3
WHILE	while	32	0
LPAREN	(	32	5
ID	j	32	6	0x55657cbf33d8
LEQUAL	<=	32	7
ID	len2	32	9	0x55657cbf3388
RPAREN	)	32	13
LBRACE	{	32	14
IF	if	33	0
LPAREN	(	33	2
ID	arr1	33	3	0x55657cbf3310
LBRACKET	[	33	7
ID	i	33	8	0x55657cbf32c0
SUB	-	33	9
DECIMAL	1	33	10	1
RBRACKET	]	33	11
EQUAL	==	33	12
ID	arr2	33	14	0x55657cbf3360
LBRACKET	[	33	18
ID	j	33	19	0x55657cbf33d8
SUB	-	33	20
DECIMAL	1	33	21	1
RBRACKET	]	33	22
RPAREN	)	33	23
LBRACE	{	33	24
ID	p	34	0	0x55657cbf33b0
LBRACKET	[	34	1
ID	i	34	2	0x55657cbf32c0
RBRACKET	]	34	3
LBRACKET	[	34	4
ID	j	34	5	0x55657cbf33d8
RBRACKET	]	34	6
ASSIGN	=	34	7
ID	p	34	8	0x55657cbf33b0
LBRACKET	[	34	9
ID	i	34	10	0x55657cbf32c0
SUB	-	34	11
DECIMAL	1	34	12	1
RBRACKET	]	34	13
LBRACKET	[	34	14
ID	j	34	15	0x55657cbf33d8
SUB	-	34	16
DECIMAL	1	34	17	1
RBRACKET	]	34	18
ADD	+	34	19
DECIMAL	1	34	20	1
SEMICOLON	;	34	21
RBRACE	}	35	0
ELSE	else	35	1
LBRACE	{	35	5
ID	p	36	0	0x55657cbf33b0
LBRACKET	[	36	1
ID	i	36	2	0x55657cbf32c0
RBRACKET	]	36	3
LBRACKET	[	36	4
ID	j	36	5	0x55657cbf33d8
RBRACKET	]	36	6
ASSIGN	=	36	7
ID	MAX	36	8	0x55657cbf31a8
LPAREN	(	36	11
ID	p	36	12	0x55657cbf33b0
LBRACKET	[	36	13
ID	i	36	14	0x55657cbf32c0
SUB	-	36	15
DECIMAL	1	36	16	1
RBRACKET	]	36	17
LBRACKET	[	36	18
ID	j	36	19	0x55657cbf33d8
RBRACKET	]	36	20
COMMA	,	36	21
ID	p	36	22	0x55657cbf33b0
LBRACKET	[	36	23
ID	i	36	24	0x55657cbf32c0
RBRACKET	]	36	25
LBRACKET	[	36	26
ID	j	36	27	0x55657cbf33d8
SUB	-	36	28
DECIMAL	1	36	29	1
RBRACKET	]	36	30
RPAREN	)	36	31
SEMICOLON	;	36	32
RBRACE	}	37	0
ID	j	38	0	0x55657cbf33d8
ASSIGN	=	38	1
ID	j	38	2	0x55657cbf33d8
ADD	+	38	3
DECIMAL	1	38	4	1
SEMICOLON	;	38	5
RBRACE	}	39	0
ID	i	40	0	0x55657cbf32c0
ASSIGN	=	40	1
ID	i	40	2	0x55657cbf32c0
ADD	+	40	3
DECIMAL	1	40	4	1
SEMICOLON	;	40	5
RBRACE	}	41	0
RETURN	return	42	0
ID	p	42	6	0x55657cbf33b0
LBRACKET	[	42	7
ID	len1	42	8	0x55657cbf3338
RBRACKET	]	42	12
LBRACKET	[	42	13
ID	len2	42	14	0x55657cbf3388
RBRACKET	]	42	18
SEMICOLON	;	42	19
RBRACE	}	43	0
INT	int	45	0
ID	main	45	3	0x55657cbf3400
LPAREN	(	45	7
RPAREN	)	45	8
LBRACE	{	46	0
INT	int	47	0
ID	A	47	3	0x55657cbf3428
LBRACKET	[	47	4
DECIMAL	15	47	5	15
RBRACKET	]	47	7
ASSIGN	=	47	8
LBRACE	{	47	9
DECIMAL	8	47	10	8
COMMA	,	47	11
DECIMAL	7	47	12	7
COMMA	,	47	13
DECIMAL	4	47	14	4
COMMA	,	47	15
DECIMAL	1	47	16	1
COMMA	,	47	17
DECIMAL	2	47	18	2
COMMA	,	47	19
DECIMAL	7	47	20	7
COMMA	,	47	21
DECIMAL	0	47	22	0
COMMA	,	47	23
DECIMAL	1	47	24	1
COMMA	,	47	25
DECIMAL	9	47	26	9
COMMA	,	47	27
DECIMAL	3	47	28	3
COMMA	,	47	29
DECIMAL	4	47	30	4
COMMA	,	47	31
DECIMAL	8	47	32	8
COMMA	,	47	33
DECIMAL	3	47	34	3
COMMA	,	47	35
DECIMAL	7	47	36	7
COMMA	,	47	37
DECIMAL	0	47	38	0
RBRACE	}	47	39
SEMICOLON	;	47	40
INT	int	48	0
ID	B	48	3	0x55657cbf3450
LBRACKET	[	48	4
DECIMAL	13	48	5	13
RBRACKET	]	48	7
ASSIGN	=	48	8
LBRACE	{	48	9
DECIMAL	3	48	10	3
COMMA	,	48	11
DECIMAL	9	48	12	9
COMMA	,	48	13
DECIMAL	7	48	14	7
COMMA	,	48	15
DECIMAL	1	48	16	1
COMMA	,	48	17
DECIMAL	4	48	18	4
COMMA	,	48	19
DECIMAL	2	48	20	2
COMMA	,	48	21
DECIMAL	4	48	22	4
COMMA	,	48	23
DECIMAL	3	48	24	3
COMMA	,	48	25
DECIMAL	6	48	26	6
COMMA	,	48	27
DECIMAL	8	48	28	8
COMMA	,	48	29
DECIMAL	0	48	30	0
COMMA	,	48	31
DECIMAL	1	48	32	1
COMMA	,	48	33
DECIMAL	5	48	34	5
RBRACE	}	48	35
SEMICOLON	;	48	36
INT	int	49	0
ID	An	49	3	0x55657cbf3478
COMMA	,	49	5
ID	Bn	49	6	0x55657cbf34a0
SEMICOLON	;	49	8
ID	putint	51	0	0x55657cbf34c8
LPAREN	(	51	6
ID	max_sum_nonadjacent	51	7	0x55657cbf3220
LPAREN	(	51	26
ID	A	51	27	0x55657cbf3428
COMMA	,	51	28
DECIMAL	15	51	29	15
RPAREN	)	51	31
RPAREN	)	51	32
SEMICOLON	;	51	33
ID	putch	52	0	0x55657cbf34f0
LPAREN	(	52	5
DECIMAL	10	52	6	10
RPAREN	)	52	8
SEMICOLON	;	52	9
ID	putint	54	0	0x55657cbf34c8
LPAREN	(	54	6
ID	longest_common_subseq	54	7	0x55657cbf32e8
LPAREN	(	54	28
ID	A	54	29	0x55657cbf3428
COMMA	,	54	30
DECIMAL	15	54	31	15
COMMA	,	54	33
ID	B	54	34	0x55657cbf3450
COMMA	,	54	35
DECIMAL	13	54	36	13
RPAREN	)	54	38
RPAREN	)	54	39
SEMICOLON	;	54	40
ID	putch	55	0	0x55657cbf34f0
LPAREN	(	55	5
DECIMAL	10	55	6	10
RPAREN	)	55	8
SEMICOLON	;	55	9
RETURN	return	56	0
DECIMAL	0	56	6	0
SEMICOLON	;	56	7
RBRACE	}	57	0
