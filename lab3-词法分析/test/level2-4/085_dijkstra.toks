CONST	const	0	0
INT	int	0	5
ID	INF	0	8	0x55a9a9d831a8
ASSIGN	=	0	11
DECIMAL	65535	0	12	65535
SEMICOLON	;	0	17
INT	int	1	0
ID	e	1	3	0x55a9a9d831d0
LBRACKET	[	1	4
DECIMAL	16	1	5	16
RBRACKET	]	1	7
LBRACKET	[	1	8
DECIMAL	16	1	9	16
RBRACKET	]	1	11
SEMICOLON	;	1	12
INT	int	2	0
ID	book	2	3	0x55a9a9d831f8
LBRACKET	[	2	7
DECIMAL	16	2	8	16
RBRACKET	]	2	10
SEMICOLON	;	2	11
INT	int	3	0
ID	dis	3	3	0x55a9a9d83220
LBRACKET	[	3	6
DECIMAL	16	3	7	16
RBRACKET	]	3	9
SEMICOLON	;	3	10
INT	int	4	0
ID	n	4	3	0x55a9a9d83248
COMMA	,	4	4
ID	m	4	5	0x55a9a9d83270
SEMICOLON	;	4	6
INT	int	5	0
ID	v1	5	3	0x55a9a9d83298
COMMA	,	5	5
ID	v2	5	6	0x55a9a9d832c0
COMMA	,	5	8
ID	w	5	9	0x55a9a9d832e8
SEMICOLON	;	5	10
VOID	void	7	0
ID	Dijkstra	7	4	0x55a9a9d83310
LPAREN	(	7	12
RPAREN	)	7	13
LBRACE	{	8	0
INT	int	9	0
ID	i	9	3	0x55a9a9d83338
COMMA	,	9	4
ID	j	9	5	0x55a9a9d83360
SEMICOLON	;	9	6
ID	i	11	0	0x55a9a9d83338
ASSIGN	=	11	1
DECIMAL	1	11	2	1
SEMICOLON	;	11	3
WHILE	while	12	0
LPAREN	(	12	5
ID	i	12	6	0x55a9a9d83338
LEQUAL	<=	12	7
ID	n	12	9	0x55a9a9d83248
RPAREN	)	12	10
LBRACE	{	12	11
ID	dis	13	0	0x55a9a9d83220
LBRACKET	[	13	3
ID	i	13	4	0x55a9a9d83338
RBRACKET	]	13	5
ASSIGN	=	13	6
ID	e	13	7	0x55a9a9d831d0
LBRACKET	[	13	8
DECIMAL	1	13	9	1
RBRACKET	]	13	10
LBRACKET	[	13	11
ID	i	13	12	0x55a9a9d83338
RBRACKET	]	13	13
SEMICOLON	;	13	14
ID	book	14	0	0x55a9a9d831f8
LBRACKET	[	14	4
ID	i	14	5	0x55a9a9d83338
RBRACKET	]	14	6
ASSIGN	=	14	7
DECIMAL	0	14	8	0
SEMICOLON	;	14	9
ID	i	15	0	0x55a9a9d83338
ASSIGN	=	15	1
ID	i	15	2	0x55a9a9d83338
ADD	+	15	3
DECIMAL	1	15	4	1
SEMICOLON	;	15	5
RBRACE	}	16	0
ID	book	17	0	0x55a9a9d831f8
LBRACKET	[	17	4
DECIMAL	1	17	5	1
RBRACKET	]	17	6
ASSIGN	=	17	7
DECIMAL	1	17	8	1
SEMICOLON	;	17	9
ID	i	19	0	0x55a9a9d83338
ASSIGN	=	19	1
DECIMAL	1	19	2	1
SEMICOLON	;	19	3
WHILE	while	20	0
LPAREN	(	20	5
ID	i	20	6	0x55a9a9d83338
LEQUAL	<=	20	7
ID	n	20	9	0x55a9a9d83248
SUB	-	20	10
DECIMAL	1	20	11	1
RPAREN	)	20	12
LBRACE	{	20	13
INT	int	21	0
ID	min_num	21	3	0x55a9a9d83388
ASSIGN	=	21	10
ID	INF	21	11	0x55a9a9d831a8
SEMICOLON	;	21	14
INT	int	22	0
ID	min_index	22	3	0x55a9a9d833b0
ASSIGN	=	22	12
DECIMAL	0	22	13	0
SEMICOLON	;	22	14
INT	int	23	0
ID	k	23	3	0x55a9a9d833d8
ASSIGN	=	23	4
DECIMAL	1	23	5	1
SEMICOLON	;	23	6
WHILE	while	24	0
LPAREN	(	24	5
ID	k	24	6	0x55a9a9d833d8
LEQUAL	<=	24	7
ID	n	24	9	0x55a9a9d83248
RPAREN	)	24	10
LBRACE	{	24	11
IF	if	25	0
LPAREN	(	25	2
ID	min_num	25	3	0x55a9a9d83388
GREATER	>	25	10
ID	dis	25	11	0x55a9a9d83220
LBRACKET	[	25	14
ID	k	25	15	0x55a9a9d833d8
RBRACKET	]	25	16
AND	&&	25	17
ID	book	25	19	0x55a9a9d831f8
LBRACKET	[	25	23
ID	k	25	24	0x55a9a9d833d8
RBRACKET	]	25	25
EQUAL	==	25	26
DECIMAL	0	25	28	0
RPAREN	)	25	29
LBRACE	{	25	30
ID	min_num	26	0	0x55a9a9d83388
ASSIGN	=	26	7
ID	dis	26	8	0x55a9a9d83220
LBRACKET	[	26	11
ID	k	26	12	0x55a9a9d833d8
RBRACKET	]	26	13
SEMICOLON	;	26	14
ID	min_index	27	0	0x55a9a9d833b0
ASSIGN	=	27	9
ID	k	27	10	0x55a9a9d833d8
SEMICOLON	;	27	11
RBRACE	}	28	0
ID	k	29	0	0x55a9a9d833d8
ASSIGN	=	29	1
ID	k	29	2	0x55a9a9d833d8
ADD	+	29	3
DECIMAL	1	29	4	1
SEMICOLON	;	29	5
RBRACE	}	30	0
ID	book	31	0	0x55a9a9d831f8
LBRACKET	[	31	4
ID	min_index	31	5	0x55a9a9d833b0
RBRACKET	]	31	14
ASSIGN	=	31	15
DECIMAL	1	31	16	1
SEMICOLON	;	31	17
INT	int	32	0
ID	j	32	3	0x55a9a9d83360
ASSIGN	=	32	4
DECIMAL	1	32	5	1
SEMICOLON	;	32	6
WHILE	while	33	0
LPAREN	(	33	5
ID	j	33	6	0x55a9a9d83360
LEQUAL	<=	33	7
ID	n	33	9	0x55a9a9d83248
RPAREN	)	33	10
LBRACE	{	33	11
IF	if	34	0
LPAREN	(	34	2
ID	e	34	3	0x55a9a9d831d0
LBRACKET	[	34	4
ID	min_index	34	5	0x55a9a9d833b0
RBRACKET	]	34	14
LBRACKET	[	34	15
ID	j	34	16	0x55a9a9d83360
RBRACKET	]	34	17
LESS	<	34	18
ID	INF	34	19	0x55a9a9d831a8
RPAREN	)	34	22
LBRACE	{	34	23
IF	if	35	0
LPAREN	(	35	2
ID	dis	35	3	0x55a9a9d83220
LBRACKET	[	35	6
ID	j	35	7	0x55a9a9d83360
RBRACKET	]	35	8
GREATER	>	35	9
ID	dis	35	10	0x55a9a9d83220
LBRACKET	[	35	13
ID	min_index	35	14	0x55a9a9d833b0
RBRACKET	]	35	23
ADD	+	35	24
ID	e	35	25	0x55a9a9d831d0
LBRACKET	[	35	26
ID	min_index	35	27	0x55a9a9d833b0
RBRACKET	]	35	36
LBRACKET	[	35	37
ID	j	35	38	0x55a9a9d83360
RBRACKET	]	35	39
RPAREN	)	35	40
LBRACE	{	35	41
ID	dis	36	0	0x55a9a9d83220
LBRACKET	[	36	3
ID	j	36	4	0x55a9a9d83360
RBRACKET	]	36	5
ASSIGN	=	36	6
ID	dis	36	7	0x55a9a9d83220
LBRACKET	[	36	10
ID	min_index	36	11	0x55a9a9d833b0
RBRACKET	]	36	20
ADD	+	36	21
ID	e	36	22	0x55a9a9d831d0
LBRACKET	[	36	23
ID	min_index	36	24	0x55a9a9d833b0
RBRACKET	]	36	33
LBRACKET	[	36	34
ID	j	36	35	0x55a9a9d83360
RBRACKET	]	36	36
SEMICOLON	;	36	37
RBRACE	}	37	0
RBRACE	}	38	0
ID	j	39	0	0x55a9a9d83360
ASSIGN	=	39	1
ID	j	39	2	0x55a9a9d83360
ADD	+	39	3
DECIMAL	1	39	4	1
SEMICOLON	;	39	5
RBRACE	}	40	0
ID	i	41	0	0x55a9a9d83338
ASSIGN	=	41	1
ID	i	41	2	0x55a9a9d83338
ADD	+	41	3
DECIMAL	1	41	4	1
SEMICOLON	;	41	5
RBRACE	}	42	0
RBRACE	}	43	0
INT	int	45	0
ID	main	45	3	0x55a9a9d83400
LPAREN	(	45	7
RPAREN	)	45	8
LBRACE	{	46	0
INT	int	47	0
ID	i	47	3	0x55a9a9d83338
SEMICOLON	;	47	4
ID	n	48	0	0x55a9a9d83248
ASSIGN	=	48	1
ID	getint	48	2	0x55a9a9d83428
LPAREN	(	48	8
RPAREN	)	48	9
SEMICOLON	;	48	10
ID	m	49	0	0x55a9a9d83270
ASSIGN	=	49	1
ID	getint	49	2	0x55a9a9d83428
LPAREN	(	49	8
RPAREN	)	49	9
SEMICOLON	;	49	10
ID	i	51	0	0x55a9a9d83338
ASSIGN	=	51	1
DECIMAL	1	51	2	1
SEMICOLON	;	51	3
WHILE	while	52	0
LPAREN	(	52	5
ID	i	52	6	0x55a9a9d83338
LEQUAL	<=	52	7
ID	n	52	9	0x55a9a9d83248
RPAREN	)	52	10
LBRACE	{	52	11
INT	int	53	0
ID	j	53	3	0x55a9a9d83360
ASSIGN	=	53	4
DECIMAL	1	53	5	1
SEMICOLON	;	53	6
WHILE	while	54	0
LPAREN	(	54	5
ID	j	54	6	0x55a9a9d83360
LEQUAL	<=	54	7
ID	n	54	9	0x55a9a9d83248
RPAREN	)	54	10
LBRACE	{	54	11
IF	if	55	0
LPAREN	(	55	2
ID	i	55	3	0x55a9a9d83338
EQUAL	==	55	4
ID	j	55	6	0x55a9a9d83360
RPAREN	)	55	7
ID	e	56	0	0x55a9a9d831d0
LBRACKET	[	56	1
ID	i	56	2	0x55a9a9d83338
RBRACKET	]	56	3
LBRACKET	[	56	4
ID	j	56	5	0x55a9a9d83360
RBRACKET	]	56	6
ASSIGN	=	56	7
DECIMAL	0	56	8	0
SEMICOLON	;	56	9
ELSE	else	57	0
ID	e	58	0	0x55a9a9d831d0
LBRACKET	[	58	1
ID	i	58	2	0x55a9a9d83338
RBRACKET	]	58	3
LBRACKET	[	58	4
ID	j	58	5	0x55a9a9d83360
RBRACKET	]	58	6
ASSIGN	=	58	7
ID	INF	58	8	0x55a9a9d831a8
SEMICOLON	;	58	11
ID	j	59	0	0x55a9a9d83360
ASSIGN	=	59	1
ID	j	59	2	0x55a9a9d83360
ADD	+	59	3
DECIMAL	1	59	4	1
SEMICOLON	;	59	5
RBRACE	}	60	0
ID	i	61	0	0x55a9a9d83338
ASSIGN	=	61	1
ID	i	61	2	0x55a9a9d83338
ADD	+	61	3
DECIMAL	1	61	4	1
SEMICOLON	;	61	5
RBRACE	}	62	0
ID	i	64	0	0x55a9a9d83338
ASSIGN	=	64	1
DECIMAL	1	64	2	1
SEMICOLON	;	64	3
WHILE	while	65	0
LPAREN	(	65	5
ID	i	65	6	0x55a9a9d83338
LEQUAL	<=	65	7
ID	m	65	9	0x55a9a9d83270
RPAREN	)	65	10
LBRACE	{	65	11
INT	int	66	0
ID	u	66	3	0x55a9a9d83450
ASSIGN	=	66	4
ID	getint	66	5	0x55a9a9d83428
LPAREN	(	66	11
RPAREN	)	66	12
COMMA	,	66	13
ID	v	66	14	0x55a9a9d83478
ASSIGN	=	66	15
ID	getint	66	16	0x55a9a9d83428
LPAREN	(	66	22
RPAREN	)	66	23
SEMICOLON	;	66	24
ID	e	67	0	0x55a9a9d831d0
LBRACKET	[	67	1
ID	u	67	2	0x55a9a9d83450
RBRACKET	]	67	3
LBRACKET	[	67	4
ID	v	67	5	0x55a9a9d83478
RBRACKET	]	67	6
ASSIGN	=	67	7
ID	getint	67	8	0x55a9a9d83428
LPAREN	(	67	14
RPAREN	)	67	15
SEMICOLON	;	67	16
ID	i	68	0	0x55a9a9d83338
ASSIGN	=	68	1
ID	i	68	2	0x55a9a9d83338
ADD	+	68	3
DECIMAL	1	68	4	1
SEMICOLON	;	68	5
RBRACE	}	69	0
ID	Dijkstra	71	0	0x55a9a9d83310
LPAREN	(	71	8
RPAREN	)	71	9
SEMICOLON	;	71	10
ID	i	73	0	0x55a9a9d83338
ASSIGN	=	73	1
DECIMAL	1	73	2	1
SEMICOLON	;	73	3
WHILE	while	74	0
LPAREN	(	74	5
ID	i	74	6	0x55a9a9d83338
LEQUAL	<=	74	7
ID	n	74	9	0x55a9a9d83248
RPAREN	)	74	10
LBRACE	{	74	11
ID	putint	75	0	0x55a9a9d834a0
LPAREN	(	75	6
ID	dis	75	7	0x55a9a9d83220
LBRACKET	[	75	10
ID	i	75	11	0x55a9a9d83338
RBRACKET	]	75	12
RPAREN	)	75	13
SEMICOLON	;	75	14
ID	putch	76	0	0x55a9a9d834c8
LPAREN	(	76	5
DECIMAL	32	76	6	32
RPAREN	)	76	8
SEMICOLON	;	76	9
ID	i	77	0	0x55a9a9d83338
ASSIGN	=	77	1
ID	i	77	2	0x55a9a9d83338
ADD	+	77	3
DECIMAL	1	77	4	1
SEMICOLON	;	77	5
RBRACE	}	78	0
ID	putch	79	0	0x55a9a9d834c8
LPAREN	(	79	5
DECIMAL	10	79	6	10
RPAREN	)	79	8
SEMICOLON	;	79	9
RETURN	return	80	0
DECIMAL	0	80	6	0
SEMICOLON	;	80	7
RBRACE	}	81	0
