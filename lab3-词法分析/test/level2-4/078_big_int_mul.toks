CONST	const	0	0
INT	int	0	5
ID	len	0	8	0x5607625c21a8
ASSIGN	=	0	11
DECIMAL	20	0	12	20
SEMICOLON	;	0	14
INT	int	2	0
ID	main	2	3	0x5607625c21d0
LPAREN	(	2	7
RPAREN	)	2	8
LBRACE	{	3	0
INT	int	4	0
ID	i	4	3	0x5607625c21f8
COMMA	,	4	4
ID	j	4	5	0x5607625c2220
COMMA	,	4	6
ID	t	4	7	0x5607625c2248
COMMA	,	4	8
ID	n	4	9	0x5607625c2270
COMMA	,	4	10
ID	temp	4	11	0x5607625c2298
SEMICOLON	;	4	15
INT	int	5	0
ID	mult1	5	3	0x5607625c22c0
LBRACKET	[	5	8
ID	len	5	9	0x5607625c21a8
RBRACKET	]	5	12
ASSIGN	=	5	13
LBRACE	{	5	14
DECIMAL	1	5	15	1
COMMA	,	5	16
DECIMAL	2	5	17	2
COMMA	,	5	18
DECIMAL	3	5	19	3
COMMA	,	5	20
DECIMAL	4	5	21	4
COMMA	,	5	22
DECIMAL	5	5	23	5
COMMA	,	5	24
DECIMAL	6	5	25	6
COMMA	,	5	26
DECIMAL	7	5	27	7
COMMA	,	5	28
DECIMAL	8	5	29	8
COMMA	,	5	30
DECIMAL	9	5	31	9
COMMA	,	5	32
DECIMAL	0	5	33	0
COMMA	,	5	34
DECIMAL	1	5	35	1
COMMA	,	5	36
DECIMAL	2	5	37	2
COMMA	,	5	38
DECIMAL	3	5	39	3
COMMA	,	5	40
DECIMAL	4	5	41	4
COMMA	,	5	42
DECIMAL	5	5	43	5
COMMA	,	5	44
DECIMAL	6	5	45	6
COMMA	,	5	46
DECIMAL	7	5	47	7
COMMA	,	5	48
DECIMAL	8	5	49	8
COMMA	,	5	50
DECIMAL	9	5	51	9
COMMA	,	5	52
DECIMAL	0	5	53	0
RBRACE	}	5	54
SEMICOLON	;	5	55
INT	int	6	0
ID	mult2	6	3	0x5607625c22e8
LBRACKET	[	6	8
ID	len	6	9	0x5607625c21a8
RBRACKET	]	6	12
ASSIGN	=	6	13
LBRACE	{	6	14
DECIMAL	2	6	15	2
COMMA	,	6	16
DECIMAL	3	6	17	3
COMMA	,	6	18
DECIMAL	4	6	19	4
COMMA	,	6	20
DECIMAL	2	6	21	2
COMMA	,	6	22
DECIMAL	5	6	23	5
COMMA	,	6	24
DECIMAL	7	6	25	7
COMMA	,	6	26
DECIMAL	9	6	27	9
COMMA	,	6	28
DECIMAL	9	6	29	9
COMMA	,	6	30
DECIMAL	0	6	31	0
COMMA	,	6	32
DECIMAL	1	6	33	1
COMMA	,	6	34
DECIMAL	9	6	35	9
COMMA	,	6	36
DECIMAL	8	6	37	8
COMMA	,	6	38
DECIMAL	7	6	39	7
COMMA	,	6	40
DECIMAL	6	6	41	6
COMMA	,	6	42
DECIMAL	4	6	43	4
COMMA	,	6	44
DECIMAL	3	6	45	3
COMMA	,	6	46
DECIMAL	2	6	47	2
COMMA	,	6	48
DECIMAL	1	6	49	1
COMMA	,	6	50
DECIMAL	2	6	51	2
COMMA	,	6	52
DECIMAL	2	6	53	2
RBRACE	}	6	54
SEMICOLON	;	6	55
INT	int	7	0
ID	len1	7	3	0x5607625c2310
ASSIGN	=	7	7
ID	len	7	8	0x5607625c21a8
SEMICOLON	;	7	11
INT	int	8	0
ID	len2	8	3	0x5607625c2338
ASSIGN	=	8	7
ID	len	8	8	0x5607625c21a8
SEMICOLON	;	8	11
INT	int	9	0
ID	c1	9	3	0x5607625c2360
LBRACKET	[	9	5
ID	len	9	6	0x5607625c21a8
ADD	+	9	9
DECIMAL	5	9	10	5
RBRACKET	]	9	11
SEMICOLON	;	9	12
INT	int	10	0
ID	c2	10	3	0x5607625c2388
LBRACKET	[	10	5
ID	len	10	6	0x5607625c21a8
ADD	+	10	9
DECIMAL	5	10	10	5
RBRACKET	]	10	11
SEMICOLON	;	10	12
INT	int	11	0
ID	result	11	3	0x5607625c23b0
LBRACKET	[	11	9
ID	len	11	10	0x5607625c21a8
MUL	*	11	13
DECIMAL	2	11	14	2
RBRACKET	]	11	15
ASSIGN	=	11	16
LBRACE	{	11	17
RBRACE	}	11	18
SEMICOLON	;	11	19
ID	i	13	0	0x5607625c21f8
ASSIGN	=	13	1
DECIMAL	0	13	2	0
SEMICOLON	;	13	3
WHILE	while	14	0
LPAREN	(	14	5
ID	i	14	6	0x5607625c21f8
LESS	<	14	7
ID	len1	14	8	0x5607625c2310
RPAREN	)	14	12
LBRACE	{	14	13
ID	c1	15	0	0x5607625c2360
LBRACKET	[	15	2
ID	i	15	3	0x5607625c21f8
RBRACKET	]	15	4
ASSIGN	=	15	5
ID	mult1	15	6	0x5607625c22c0
LBRACKET	[	15	11
ID	i	15	12	0x5607625c21f8
RBRACKET	]	15	13
SEMICOLON	;	15	14
ID	i	16	0	0x5607625c21f8
ASSIGN	=	16	1
ID	i	16	2	0x5607625c21f8
ADD	+	16	3
DECIMAL	1	16	4	1
SEMICOLON	;	16	5
RBRACE	}	17	0
ID	i	19	0	0x5607625c21f8
ASSIGN	=	19	1
DECIMAL	0	19	2	0
SEMICOLON	;	19	3
WHILE	while	20	0
LPAREN	(	20	5
ID	i	20	6	0x5607625c21f8
LESS	<	20	7
ID	len2	20	8	0x5607625c2338
RPAREN	)	20	12
LBRACE	{	20	13
ID	c2	21	0	0x5607625c2388
LBRACKET	[	21	2
ID	i	21	3	0x5607625c21f8
RBRACKET	]	21	4
ASSIGN	=	21	5
ID	mult2	21	6	0x5607625c22e8
LBRACKET	[	21	11
ID	i	21	12	0x5607625c21f8
RBRACKET	]	21	13
SEMICOLON	;	21	14
ID	i	22	0	0x5607625c21f8
ASSIGN	=	22	1
ID	i	22	2	0x5607625c21f8
ADD	+	22	3
DECIMAL	1	22	4	1
SEMICOLON	;	22	5
RBRACE	}	23	0
ID	n	25	0	0x5607625c2270
ASSIGN	=	25	1
ID	len1	25	2	0x5607625c2310
ADD	+	25	6
ID	len2	25	7	0x5607625c2338
SUB	-	25	11
DECIMAL	1	25	12	1
SEMICOLON	;	25	13
ID	i	27	0	0x5607625c21f8
ASSIGN	=	27	1
DECIMAL	0	27	2	0
SEMICOLON	;	27	3
WHILE	while	28	0
LPAREN	(	28	5
ID	i	28	6	0x5607625c21f8
LEQUAL	<=	28	7
ID	n	28	9	0x5607625c2270
RPAREN	)	28	10
LBRACE	{	28	11
ID	result	29	0	0x5607625c23b0
LBRACKET	[	29	6
ID	i	29	7	0x5607625c21f8
RBRACKET	]	29	8
ASSIGN	=	29	9
DECIMAL	0	29	10	0
SEMICOLON	;	29	11
ID	i	30	0	0x5607625c21f8
ASSIGN	=	30	1
ID	i	30	2	0x5607625c21f8
ADD	+	30	3
DECIMAL	1	30	4	1
SEMICOLON	;	30	5
RBRACE	}	31	0
ID	temp	33	0	0x5607625c2298
ASSIGN	=	33	4
DECIMAL	0	33	5	0
SEMICOLON	;	33	6
ID	i	35	0	0x5607625c21f8
ASSIGN	=	35	1
ID	len2	35	2	0x5607625c2338
SUB	-	35	6
DECIMAL	1	35	7	1
SEMICOLON	;	35	8
WHILE	while	36	0
LPAREN	(	36	5
ID	i	36	6	0x5607625c21f8
GREATER	>	36	7
SUB	-	36	8
DECIMAL	1	36	9	1
RPAREN	)	36	10
LBRACE	{	36	11
ID	t	37	0	0x5607625c2248
ASSIGN	=	37	1
ID	c2	37	2	0x5607625c2388
LBRACKET	[	37	4
ID	i	37	5	0x5607625c21f8
RBRACKET	]	37	6
SEMICOLON	;	37	7
ID	j	38	0	0x5607625c2220
ASSIGN	=	38	1
ID	len1	38	2	0x5607625c2310
SUB	-	38	6
DECIMAL	1	38	7	1
SEMICOLON	;	38	8
WHILE	while	39	0
LPAREN	(	39	5
ID	j	39	6	0x5607625c2220
GREATER	>	39	7
SUB	-	39	8
DECIMAL	1	39	9	1
RPAREN	)	39	10
LBRACE	{	39	11
ID	temp	40	0	0x5607625c2298
ASSIGN	=	40	4
ID	result	40	5	0x5607625c23b0
LBRACKET	[	40	11
ID	n	40	12	0x5607625c2270
RBRACKET	]	40	13
ADD	+	40	14
ID	t	40	15	0x5607625c2248
MUL	*	40	16
ID	c1	40	17	0x5607625c2360
LBRACKET	[	40	19
ID	j	40	20	0x5607625c2220
RBRACKET	]	40	21
SEMICOLON	;	40	22
IF	if	41	0
LPAREN	(	41	2
ID	temp	41	3	0x5607625c2298
GEQUAL	>=	41	7
DECIMAL	10	41	9	10
RPAREN	)	41	11
LBRACE	{	41	12
ID	result	42	0	0x5607625c23b0
LBRACKET	[	42	6
ID	n	42	7	0x5607625c2270
RBRACKET	]	42	8
ASSIGN	=	42	9
LPAREN	(	42	10
ID	temp	42	11	0x5607625c2298
RPAREN	)	42	15
SEMICOLON	;	42	16
ID	result	43	0	0x5607625c23b0
LBRACKET	[	43	6
ID	n	43	7	0x5607625c2270
SUB	-	43	8
DECIMAL	1	43	9	1
RBRACKET	]	43	10
ASSIGN	=	43	11
ID	result	43	12	0x5607625c23b0
LBRACKET	[	43	18
ID	n	43	19	0x5607625c2270
SUB	-	43	20
DECIMAL	1	43	21	1
RBRACKET	]	43	22
ADD	+	43	23
ID	temp	43	24	0x5607625c2298
DIV	/	43	28
DECIMAL	10	43	29	10
SEMICOLON	;	43	31
RBRACE	}	44	0
ELSE	else	45	0
ID	result	46	0	0x5607625c23b0
LBRACKET	[	46	6
ID	n	46	7	0x5607625c2270
RBRACKET	]	46	8
ASSIGN	=	46	9
ID	temp	46	10	0x5607625c2298
SEMICOLON	;	46	14
ID	j	47	0	0x5607625c2220
ASSIGN	=	47	1
ID	j	47	2	0x5607625c2220
SUB	-	47	3
DECIMAL	1	47	4	1
SEMICOLON	;	47	5
ID	n	48	0	0x5607625c2270
ASSIGN	=	48	1
ID	n	48	2	0x5607625c2270
SUB	-	48	3
DECIMAL	1	48	4	1
SEMICOLON	;	48	5
RBRACE	}	49	0
ID	n	50	0	0x5607625c2270
ASSIGN	=	50	1
ID	n	50	2	0x5607625c2270
ADD	+	50	3
ID	len1	50	4	0x5607625c2310
SUB	-	50	8
DECIMAL	1	50	9	1
SEMICOLON	;	50	10
ID	i	51	0	0x5607625c21f8
ASSIGN	=	51	1
ID	i	51	2	0x5607625c21f8
SUB	-	51	3
DECIMAL	1	51	4	1
SEMICOLON	;	51	5
RBRACE	}	52	0
IF	if	54	0
LPAREN	(	54	2
ID	result	54	3	0x5607625c23b0
LBRACKET	[	54	9
DECIMAL	0	54	10	0
RBRACKET	]	54	11
NEQUAL	!=	54	12
DECIMAL	0	54	14	0
RPAREN	)	54	15
ID	putint	55	0	0x5607625c23d8
LPAREN	(	55	6
ID	result	55	7	0x5607625c23b0
LBRACKET	[	55	13
DECIMAL	0	55	14	0
RBRACKET	]	55	15
RPAREN	)	55	16
SEMICOLON	;	55	17
ID	i	57	0	0x5607625c21f8
ASSIGN	=	57	1
DECIMAL	1	57	2	1
SEMICOLON	;	57	3
WHILE	while	58	0
LPAREN	(	58	5
ID	i	58	6	0x5607625c21f8
LEQUAL	<=	58	7
ID	len1	58	9	0x5607625c2310
ADD	+	58	13
ID	len2	58	14	0x5607625c2338
SUB	-	58	18
DECIMAL	1	58	19	1
RPAREN	)	58	20
LBRACE	{	58	21
ID	putint	59	0	0x5607625c23d8
LPAREN	(	59	6
ID	result	59	7	0x5607625c23b0
LBRACKET	[	59	13
ID	i	59	14	0x5607625c21f8
RBRACKET	]	59	15
RPAREN	)	59	16
SEMICOLON	;	59	17
ID	i	60	0	0x5607625c21f8
ASSIGN	=	60	1
ID	i	60	2	0x5607625c21f8
ADD	+	60	3
DECIMAL	1	60	4	1
SEMICOLON	;	60	5
RBRACE	}	61	0
RETURN	return	63	0
DECIMAL	0	63	6	0
SEMICOLON	;	63	7
RBRACE	}	64	0
