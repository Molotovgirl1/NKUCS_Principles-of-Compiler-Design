INT	int	0	0
ID	canJump	0	3	0x557449c8c1a8
LPAREN	(	0	10
INT	int	0	11
ID	nums	0	14	0x557449c8c1d0
LBRACKET	[	0	18
RBRACKET	]	0	19
COMMA	,	0	20
INT	int	0	21
ID	n	0	24	0x557449c8c1f8
RPAREN	)	0	25
LBRACE	{	0	26
IF	if	1	0
LPAREN	(	1	2
ID	n	1	3	0x557449c8c1f8
EQUAL	==	1	4
DECIMAL	1	1	6	1
RPAREN	)	1	7
RETURN	return	2	0
DECIMAL	1	2	6	1
SEMICOLON	;	2	7
IF	if	3	0
LPAREN	(	3	2
ID	nums	3	3	0x557449c8c1d0
LBRACKET	[	3	7
DECIMAL	0	3	8	0
RBRACKET	]	3	9
GREATER	>	3	10
ID	n	3	11	0x557449c8c1f8
SUB	-	3	12
DECIMAL	2	3	13	2
RPAREN	)	3	14
RETURN	return	4	0
DECIMAL	1	4	6	1
SEMICOLON	;	4	7
INT	int	5	0
ID	dp	5	3	0x557449c8c220
LBRACKET	[	5	5
DECIMAL	10	5	6	10
RBRACKET	]	5	8
SEMICOLON	;	5	9
INT	int	6	0
ID	i	6	3	0x557449c8c248
SEMICOLON	;	6	4
ID	i	7	0	0x557449c8c248
ASSIGN	=	7	1
DECIMAL	0	7	2	0
SEMICOLON	;	7	3
WHILE	while	8	0
LPAREN	(	8	5
ID	i	8	6	0x557449c8c248
LESS	<	8	7
ID	n	8	8	0x557449c8c1f8
SUB	-	8	9
DECIMAL	1	8	10	1
RPAREN	)	8	11
LBRACE	{	8	12
ID	dp	9	0	0x557449c8c220
LBRACKET	[	9	2
ID	i	9	3	0x557449c8c248
RBRACKET	]	9	4
ASSIGN	=	9	5
DECIMAL	0	9	6	0
SEMICOLON	;	9	7
ID	i	10	0	0x557449c8c248
ASSIGN	=	10	1
ID	i	10	2	0x557449c8c248
ADD	+	10	3
DECIMAL	1	10	4	1
SEMICOLON	;	10	5
RBRACE	}	11	0
ID	dp	12	0	0x557449c8c220
LBRACKET	[	12	2
ID	n	12	3	0x557449c8c1f8
SUB	-	12	4
DECIMAL	1	12	5	1
RBRACKET	]	12	6
ASSIGN	=	12	7
DECIMAL	1	12	8	1
SEMICOLON	;	12	9
ID	i	13	0	0x557449c8c248
ASSIGN	=	13	1
ID	n	13	2	0x557449c8c1f8
SUB	-	13	3
DECIMAL	2	13	4	2
SEMICOLON	;	13	5
WHILE	while	14	0
LPAREN	(	14	5
ID	i	14	6	0x557449c8c248
GREATER	>	14	7
SUB	-	14	8
DECIMAL	1	14	9	1
RPAREN	)	14	10
LBRACE	{	14	11
INT	int	15	0
ID	j	15	3	0x557449c8c270
SEMICOLON	;	15	4
IF	if	16	0
LPAREN	(	16	2
ID	nums	16	3	0x557449c8c1d0
LBRACKET	[	16	7
ID	i	16	8	0x557449c8c248
RBRACKET	]	16	9
LESS	<	16	10
ID	n	16	11	0x557449c8c1f8
SUB	-	16	12
DECIMAL	1	16	13	1
SUB	-	16	14
ID	i	16	15	0x557449c8c248
RPAREN	)	16	16
LBRACE	{	16	17
ID	j	17	0	0x557449c8c270
ASSIGN	=	17	1
ID	nums	17	2	0x557449c8c1d0
LBRACKET	[	17	6
ID	i	17	7	0x557449c8c248
RBRACKET	]	17	8
SEMICOLON	;	17	9
RBRACE	}	18	0
ELSE	else	19	0
ID	j	20	0	0x557449c8c270
ASSIGN	=	20	1
ID	n	20	2	0x557449c8c1f8
SUB	-	20	3
DECIMAL	1	20	4	1
SUB	-	20	5
ID	i	20	6	0x557449c8c248
SEMICOLON	;	20	7
WHILE	while	21	0
LPAREN	(	21	5
ID	j	21	6	0x557449c8c270
GREATER	>	21	7
SUB	-	21	8
DECIMAL	1	21	9	1
RPAREN	)	21	10
LBRACE	{	21	11
IF	if	22	0
LPAREN	(	22	2
ID	dp	22	3	0x557449c8c220
LBRACKET	[	22	5
ID	i	22	6	0x557449c8c248
ADD	+	22	7
ID	j	22	8	0x557449c8c270
RBRACKET	]	22	9
NEQUAL	!=	22	10
DECIMAL	0	22	12	0
RPAREN	)	22	13
LBRACE	{	22	14
ID	dp	23	0	0x557449c8c220
LBRACKET	[	23	2
ID	i	23	3	0x557449c8c248
RBRACKET	]	23	4
ASSIGN	=	23	5
DECIMAL	1	23	6	1
SEMICOLON	;	23	7
RBRACE	}	24	0
ID	j	25	0	0x557449c8c270
ASSIGN	=	25	1
ID	j	25	2	0x557449c8c270
SUB	-	25	3
DECIMAL	1	25	4	1
SEMICOLON	;	25	5
RBRACE	}	26	0
ID	i	27	0	0x557449c8c248
ASSIGN	=	27	1
ID	i	27	2	0x557449c8c248
SUB	-	27	3
DECIMAL	1	27	4	1
SEMICOLON	;	27	5
RBRACE	}	28	0
RETURN	return	30	0
ID	dp	30	6	0x557449c8c220
LBRACKET	[	30	8
DECIMAL	0	30	9	0
RBRACKET	]	30	10
SEMICOLON	;	30	11
RBRACE	}	31	0
INT	int	32	0
ID	main	32	3	0x557449c8c298
LPAREN	(	32	7
RPAREN	)	32	8
LBRACE	{	32	9
INT	int	33	0
ID	res	33	3	0x557449c8c2c0
SEMICOLON	;	33	6
INT	int	34	0
ID	a	34	3	0x557449c8c2e8
LBRACKET	[	34	4
DECIMAL	10	34	5	10
RBRACKET	]	34	7
SEMICOLON	;	34	8
ID	a	35	0	0x557449c8c2e8
LBRACKET	[	35	1
DECIMAL	0	35	2	0
RBRACKET	]	35	3
ASSIGN	=	35	4
DECIMAL	3	35	5	3
SEMICOLON	;	35	6
ID	a	35	7	0x557449c8c2e8
LBRACKET	[	35	8
DECIMAL	1	35	9	1
RBRACKET	]	35	10
ASSIGN	=	35	11
DECIMAL	3	35	12	3
SEMICOLON	;	35	13
ID	a	35	14	0x557449c8c2e8
LBRACKET	[	35	15
DECIMAL	2	35	16	2
RBRACKET	]	35	17
ASSIGN	=	35	18
DECIMAL	9	35	19	9
SEMICOLON	;	35	20
ID	a	35	21	0x557449c8c2e8
LBRACKET	[	35	22
DECIMAL	3	35	23	3
RBRACKET	]	35	24
ASSIGN	=	35	25
DECIMAL	0	35	26	0
SEMICOLON	;	35	27
ID	a	35	28	0x557449c8c2e8
LBRACKET	[	35	29
DECIMAL	4	35	30	4
RBRACKET	]	35	31
ASSIGN	=	35	32
DECIMAL	0	35	33	0
SEMICOLON	;	35	34
ID	a	36	0	0x557449c8c2e8
LBRACKET	[	36	1
DECIMAL	5	36	2	5
RBRACKET	]	36	3
ASSIGN	=	36	4
DECIMAL	1	36	5	1
SEMICOLON	;	36	6
ID	a	36	7	0x557449c8c2e8
LBRACKET	[	36	8
DECIMAL	6	36	9	6
RBRACKET	]	36	10
ASSIGN	=	36	11
DECIMAL	1	36	12	1
SEMICOLON	;	36	13
ID	a	36	14	0x557449c8c2e8
LBRACKET	[	36	15
DECIMAL	7	36	16	7
RBRACKET	]	36	17
ASSIGN	=	36	18
DECIMAL	5	36	19	5
SEMICOLON	;	36	20
ID	a	36	21	0x557449c8c2e8
LBRACKET	[	36	22
DECIMAL	8	36	23	8
RBRACKET	]	36	24
ASSIGN	=	36	25
DECIMAL	7	36	26	7
SEMICOLON	;	36	27
ID	a	36	28	0x557449c8c2e8
LBRACKET	[	36	29
DECIMAL	9	36	30	9
RBRACKET	]	36	31
ASSIGN	=	36	32
DECIMAL	8	36	33	8
SEMICOLON	;	36	34
ID	res	37	0	0x557449c8c2c0
ASSIGN	=	37	3
DECIMAL	10	37	4	10
SEMICOLON	;	37	6
ID	res	38	0	0x557449c8c2c0
ASSIGN	=	38	3
ID	canJump	38	4	0x557449c8c1a8
LPAREN	(	38	11
ID	a	38	12	0x557449c8c2e8
COMMA	,	38	13
ID	res	38	14	0x557449c8c2c0
RPAREN	)	38	17
SEMICOLON	;	38	18
RETURN	return	39	0
ID	res	39	6	0x557449c8c2c0
SEMICOLON	;	39	9
RBRACE	}	40	0
