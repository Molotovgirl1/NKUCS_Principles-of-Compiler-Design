CONST	const	0	0
INT	int	0	5
ID	N	0	8	0x5600d7bd71a8
ASSIGN	=	0	9
SUB	-	0	10
DECIMAL	1	0	11	1
SEMICOLON	;	0	12
INT	int	1	0
ID	arr	1	3	0x5600d7bd71d0
LBRACKET	[	1	6
ID	N	1	7	0x5600d7bd71a8
ADD	+	1	8
DECIMAL	2	1	9	2
MUL	*	1	10
DECIMAL	4	1	11	4
SUB	-	1	12
DECIMAL	99	1	13	99
DIV	/	1	15
DECIMAL	99	1	16	99
RBRACKET	]	1	18
ASSIGN	=	1	19
LBRACE	{	1	20
DECIMAL	1	1	21	1
COMMA	,	1	22
DECIMAL	2	1	23	2
COMMA	,	1	24
DECIMAL	33	1	25	33
COMMA	,	1	27
DECIMAL	4	1	28	4
COMMA	,	1	29
DECIMAL	5	1	30	5
COMMA	,	1	31
DECIMAL	6	1	32	6
RBRACE	}	1	33
SEMICOLON	;	1	34
INT	int	3	0
ID	main	3	3	0x5600d7bd71f8
LPAREN	(	3	7
RPAREN	)	3	8
LBRACE	{	3	9
INT	int	4	0
ID	i	4	3	0x5600d7bd7220
ASSIGN	=	4	4
DECIMAL	0	4	5	0
COMMA	,	4	6
ID	sum	4	7	0x5600d7bd7248
ASSIGN	=	4	10
DECIMAL	0	4	11	0
SEMICOLON	;	4	12
WHILE	while	5	0
LPAREN	(	5	5
ID	i	5	6	0x5600d7bd7220
LESS	<	5	7
DECIMAL	6	5	8	6
RPAREN	)	5	9
LBRACE	{	5	10
ID	sum	6	0	0x5600d7bd7248
ASSIGN	=	6	3
ID	sum	6	4	0x5600d7bd7248
ADD	+	6	7
ID	arr	6	8	0x5600d7bd71d0
LBRACKET	[	6	11
ID	i	6	12	0x5600d7bd7220
RBRACKET	]	6	13
SEMICOLON	;	6	14
ID	i	7	0	0x5600d7bd7220
ASSIGN	=	7	1
ID	i	7	2	0x5600d7bd7220
ADD	+	7	3
DECIMAL	1	7	4	1
SEMICOLON	;	7	5
RBRACE	}	8	0
RETURN	return	9	0
ID	sum	9	6	0x5600d7bd7248
SEMICOLON	;	9	9
RBRACE	}	10	0
