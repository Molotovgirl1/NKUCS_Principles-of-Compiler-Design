

CONST	const	1	0
INT	int	1	5
ID	INF	1	8	0x55ac640da1a8
ASSIGN	=	1	11
HEXADECIMAL	0x70000000	1	12	1879048192
SEMICOLON	;	1	22
INT	int	3	0
ID	size	3	3	0x55ac640da1d0
LBRACKET	[	3	7
DECIMAL	10	3	8	10
RBRACKET	]	3	10
SEMICOLON	;	3	11
INT	int	4	0
ID	to	4	3	0x55ac640da1f8
LBRACKET	[	4	5
DECIMAL	10	4	6	10
RBRACKET	]	4	8
LBRACKET	[	4	9
DECIMAL	10	4	10	10
RBRACKET	]	4	12
SEMICOLON	;	4	13
INT	int	5	0
ID	cap	5	3	0x55ac640da220
LBRACKET	[	5	6
DECIMAL	10	5	7	10
RBRACKET	]	5	9
LBRACKET	[	5	10
DECIMAL	10	5	11	10
RBRACKET	]	5	13
SEMICOLON	;	5	14
INT	int	6	0
ID	rev	6	3	0x55ac640da248
LBRACKET	[	6	6
DECIMAL	10	6	7	10
RBRACKET	]	6	9
LBRACKET	[	6	10
DECIMAL	10	6	11	10
RBRACKET	]	6	13
SEMICOLON	;	6	14
INT	int	7	0
ID	used	7	3	0x55ac640da270
LBRACKET	[	7	7
DECIMAL	10	7	8	10
RBRACKET	]	7	10
SEMICOLON	;	7	11
VOID	void	9	0
ID	my_memset	9	4	0x55ac640da298
LPAREN	(	9	13
INT	int	9	14
ID	arr	9	17	0x55ac640da2c0
LBRACKET	[	9	20
RBRACKET	]	9	21
COMMA	,	9	22
INT	int	9	23
ID	val	9	26	0x55ac640da2e8
COMMA	,	9	29
INT	int	9	30
ID	n	9	33	0x55ac640da310
RPAREN	)	9	34
LBRACE	{	10	0
INT	int	11	0
ID	i	11	3	0x55ac640da338
ASSIGN	=	11	4
DECIMAL	0	11	5	0
SEMICOLON	;	11	6
WHILE	while	12	0
LPAREN	(	12	5
ID	i	12	6	0x55ac640da338
LESS	<	12	7
ID	n	12	8	0x55ac640da310
RPAREN	)	12	9
LBRACE	{	12	10
ID	arr	13	0	0x55ac640da2c0
LBRACKET	[	13	3
ID	i	13	4	0x55ac640da338
RBRACKET	]	13	5
ASSIGN	=	13	6
ID	val	13	7	0x55ac640da2e8
SEMICOLON	;	13	10
ID	i	14	0	0x55ac640da338
ASSIGN	=	14	1
ID	i	14	2	0x55ac640da338
ADD	+	14	3
DECIMAL	1	14	4	1
SEMICOLON	;	14	5
RBRACE	}	15	0
RBRACE	}	16	0
VOID	void	18	0
ID	add_node	18	4	0x55ac640da360
LPAREN	(	18	12
INT	int	18	13
ID	u	18	16	0x55ac640da388
COMMA	,	18	17
INT	int	18	18
ID	v	18	21	0x55ac640da3b0
COMMA	,	18	22
INT	int	18	23
ID	c	18	26	0x55ac640da3d8
RPAREN	)	18	27
LBRACE	{	19	0
ID	to	20	0	0x55ac640da1f8
LBRACKET	[	20	2
ID	u	20	3	0x55ac640da388
RBRACKET	]	20	4
LBRACKET	[	20	5
ID	size	20	6	0x55ac640da1d0
LBRACKET	[	20	10
ID	u	20	11	0x55ac640da388
RBRACKET	]	20	12
RBRACKET	]	20	13
ASSIGN	=	20	14
ID	v	20	15	0x55ac640da3b0
SEMICOLON	;	20	16
ID	cap	21	0	0x55ac640da220
LBRACKET	[	21	3
ID	u	21	4	0x55ac640da388
RBRACKET	]	21	5
LBRACKET	[	21	6
ID	size	21	7	0x55ac640da1d0
LBRACKET	[	21	11
ID	u	21	12	0x55ac640da388
RBRACKET	]	21	13
RBRACKET	]	21	14
ASSIGN	=	21	15
ID	c	21	16	0x55ac640da3d8
SEMICOLON	;	21	17
ID	rev	22	0	0x55ac640da248
LBRACKET	[	22	3
ID	u	22	4	0x55ac640da388
RBRACKET	]	22	5
LBRACKET	[	22	6
ID	size	22	7	0x55ac640da1d0
LBRACKET	[	22	11
ID	u	22	12	0x55ac640da388
RBRACKET	]	22	13
RBRACKET	]	22	14
ASSIGN	=	22	15
ID	size	22	16	0x55ac640da1d0
LBRACKET	[	22	20
ID	v	22	21	0x55ac640da3b0
RBRACKET	]	22	22
SEMICOLON	;	22	23
ID	to	24	0	0x55ac640da1f8
LBRACKET	[	24	2
ID	v	24	3	0x55ac640da3b0
RBRACKET	]	24	4
LBRACKET	[	24	5
ID	size	24	6	0x55ac640da1d0
LBRACKET	[	24	10
ID	v	24	11	0x55ac640da3b0
RBRACKET	]	24	12
RBRACKET	]	24	13
ASSIGN	=	24	14
ID	u	24	15	0x55ac640da388
SEMICOLON	;	24	16
ID	cap	25	0	0x55ac640da220
LBRACKET	[	25	3
ID	v	25	4	0x55ac640da3b0
RBRACKET	]	25	5
LBRACKET	[	25	6
ID	size	25	7	0x55ac640da1d0
LBRACKET	[	25	11
ID	v	25	12	0x55ac640da3b0
RBRACKET	]	25	13
RBRACKET	]	25	14
ASSIGN	=	25	15
DECIMAL	0	25	16	0
SEMICOLON	;	25	17
ID	rev	26	0	0x55ac640da248
LBRACKET	[	26	3
ID	v	26	4	0x55ac640da3b0
RBRACKET	]	26	5
LBRACKET	[	26	6
ID	size	26	7	0x55ac640da1d0
LBRACKET	[	26	11
ID	v	26	12	0x55ac640da3b0
RBRACKET	]	26	13
RBRACKET	]	26	14
ASSIGN	=	26	15
ID	size	26	16	0x55ac640da1d0
LBRACKET	[	26	20
ID	u	26	21	0x55ac640da388
RBRACKET	]	26	22
SEMICOLON	;	26	23
ID	size	28	0	0x55ac640da1d0
LBRACKET	[	28	4
ID	u	28	5	0x55ac640da388
RBRACKET	]	28	6
ASSIGN	=	28	7
ID	size	28	8	0x55ac640da1d0
LBRACKET	[	28	12
ID	u	28	13	0x55ac640da388
RBRACKET	]	28	14
ADD	+	28	15
DECIMAL	1	28	16	1
SEMICOLON	;	28	17
ID	size	29	0	0x55ac640da1d0
LBRACKET	[	29	4
ID	v	29	5	0x55ac640da3b0
RBRACKET	]	29	6
ASSIGN	=	29	7
ID	size	29	8	0x55ac640da1d0
LBRACKET	[	29	12
ID	v	29	13	0x55ac640da3b0
RBRACKET	]	29	14
ADD	+	29	15
DECIMAL	1	29	16	1
SEMICOLON	;	29	17
RBRACE	}	30	0
INT	int	32	0
ID	dfs	32	3	0x55ac640da400
LPAREN	(	32	6
INT	int	32	7
ID	s	32	10	0x55ac640da428
COMMA	,	32	11
INT	int	32	12
ID	t	32	15	0x55ac640da450
COMMA	,	32	16
INT	int	32	17
ID	f	32	20	0x55ac640da478
RPAREN	)	32	21
LBRACE	{	33	0
IF	if	34	0
LPAREN	(	34	2
ID	s	34	3	0x55ac640da428
EQUAL	==	34	4
ID	t	34	6	0x55ac640da450
RPAREN	)	34	7
RETURN	return	35	0
ID	f	35	6	0x55ac640da478
SEMICOLON	;	35	7
ID	used	36	0	0x55ac640da270
LBRACKET	[	36	4
ID	s	36	5	0x55ac640da428
RBRACKET	]	36	6
ASSIGN	=	36	7
DECIMAL	1	36	8	1
SEMICOLON	;	36	9
INT	int	38	0
ID	i	38	3	0x55ac640da338
ASSIGN	=	38	4
DECIMAL	0	38	5	0
SEMICOLON	;	38	6
WHILE	while	39	0
LPAREN	(	39	5
ID	i	39	6	0x55ac640da338
LESS	<	39	7
ID	size	39	8	0x55ac640da1d0
LBRACKET	[	39	12
ID	s	39	13	0x55ac640da428
RBRACKET	]	39	14
RPAREN	)	39	15
LBRACE	{	39	16
IF	if	40	0
LPAREN	(	40	2
ID	used	40	3	0x55ac640da270
LBRACKET	[	40	7
ID	to	40	8	0x55ac640da1f8
LBRACKET	[	40	10
ID	s	40	11	0x55ac640da428
RBRACKET	]	40	12
LBRACKET	[	40	13
ID	i	40	14	0x55ac640da338
RBRACKET	]	40	15
RBRACKET	]	40	16
RPAREN	)	40	17
LBRACE	{	40	18
ID	i	40	19	0x55ac640da338
ASSIGN	=	40	20
ID	i	40	21	0x55ac640da338
ADD	+	40	22
DECIMAL	1	40	23	1
SEMICOLON	;	40	24
CONTINUE	continue	40	25
SEMICOLON	;	40	33
RBRACE	}	40	34
IF	if	41	0
LPAREN	(	41	2
ID	cap	41	3	0x55ac640da220
LBRACKET	[	41	6
ID	s	41	7	0x55ac640da428
RBRACKET	]	41	8
LBRACKET	[	41	9
ID	i	41	10	0x55ac640da338
RBRACKET	]	41	11
LEQUAL	<=	41	12
DECIMAL	0	41	14	0
RPAREN	)	41	15
LBRACE	{	41	16
ID	i	41	17	0x55ac640da338
ASSIGN	=	41	18
ID	i	41	19	0x55ac640da338
ADD	+	41	20
DECIMAL	1	41	21	1
SEMICOLON	;	41	22
CONTINUE	continue	41	23
SEMICOLON	;	41	31
RBRACE	}	41	32
INT	int	43	0
ID	min_f	43	3	0x55ac640da4a0
SEMICOLON	;	43	8
IF	if	44	0
LPAREN	(	44	2
ID	f	44	3	0x55ac640da478
LESS	<	44	4
ID	cap	44	5	0x55ac640da220
LBRACKET	[	44	8
ID	s	44	9	0x55ac640da428
RBRACKET	]	44	10
LBRACKET	[	44	11
ID	i	44	12	0x55ac640da338
RBRACKET	]	44	13
RPAREN	)	44	14
ID	min_f	45	0	0x55ac640da4a0
ASSIGN	=	45	5
ID	f	45	6	0x55ac640da478
SEMICOLON	;	45	7
ELSE	else	46	0
ID	min_f	47	0	0x55ac640da4a0
ASSIGN	=	47	5
ID	cap	47	6	0x55ac640da220
LBRACKET	[	47	9
ID	s	47	10	0x55ac640da428
RBRACKET	]	47	11
LBRACKET	[	47	12
ID	i	47	13	0x55ac640da338
RBRACKET	]	47	14
SEMICOLON	;	47	15
INT	int	48	0
ID	d	48	3	0x55ac640da4c8
ASSIGN	=	48	4
ID	dfs	48	5	0x55ac640da400
LPAREN	(	48	8
ID	to	48	9	0x55ac640da1f8
LBRACKET	[	48	11
ID	s	48	12	0x55ac640da428
RBRACKET	]	48	13
LBRACKET	[	48	14
ID	i	48	15	0x55ac640da338
RBRACKET	]	48	16
COMMA	,	48	17
ID	t	48	18	0x55ac640da450
COMMA	,	48	19
ID	min_f	48	20	0x55ac640da4a0
RPAREN	)	48	25
SEMICOLON	;	48	26
IF	if	50	0
LPAREN	(	50	2
ID	d	50	3	0x55ac640da4c8
GREATER	>	50	4
DECIMAL	0	50	5	0
RPAREN	)	50	6
LBRACE	{	50	7
ID	cap	51	0	0x55ac640da220
LBRACKET	[	51	3
ID	s	51	4	0x55ac640da428
RBRACKET	]	51	5
LBRACKET	[	51	6
ID	i	51	7	0x55ac640da338
RBRACKET	]	51	8
ASSIGN	=	51	9
ID	cap	51	10	0x55ac640da220
LBRACKET	[	51	13
ID	s	51	14	0x55ac640da428
RBRACKET	]	51	15
LBRACKET	[	51	16
ID	i	51	17	0x55ac640da338
RBRACKET	]	51	18
SUB	-	51	19
ID	d	51	20	0x55ac640da4c8
SEMICOLON	;	51	21
ID	cap	52	0	0x55ac640da220
LBRACKET	[	52	3
ID	to	52	4	0x55ac640da1f8
LBRACKET	[	52	6
ID	s	52	7	0x55ac640da428
RBRACKET	]	52	8
LBRACKET	[	52	9
ID	i	52	10	0x55ac640da338
RBRACKET	]	52	11
RBRACKET	]	52	12
LBRACKET	[	52	13
ID	rev	52	14	0x55ac640da248
LBRACKET	[	52	17
ID	s	52	18	0x55ac640da428
RBRACKET	]	52	19
LBRACKET	[	52	20
ID	i	52	21	0x55ac640da338
RBRACKET	]	52	22
RBRACKET	]	52	23
ASSIGN	=	52	24
ID	cap	52	25	0x55ac640da220
LBRACKET	[	52	28
ID	to	52	29	0x55ac640da1f8
LBRACKET	[	52	31
ID	s	52	32	0x55ac640da428
RBRACKET	]	52	33
LBRACKET	[	52	34
ID	i	52	35	0x55ac640da338
RBRACKET	]	52	36
RBRACKET	]	52	37
LBRACKET	[	52	38
ID	rev	52	39	0x55ac640da248
LBRACKET	[	52	42
ID	s	52	43	0x55ac640da428
RBRACKET	]	52	44
LBRACKET	[	52	45
ID	i	52	46	0x55ac640da338
RBRACKET	]	52	47
RBRACKET	]	52	48
ADD	+	52	49
ID	d	52	50	0x55ac640da4c8
SEMICOLON	;	52	51
RETURN	return	53	0
ID	d	53	6	0x55ac640da4c8
SEMICOLON	;	53	7
RBRACE	}	54	0
ID	i	55	0	0x55ac640da338
ASSIGN	=	55	1
ID	i	55	2	0x55ac640da338
ADD	+	55	3
DECIMAL	1	55	4	1
SEMICOLON	;	55	5
RBRACE	}	56	0
RETURN	return	57	0
DECIMAL	0	57	6	0
SEMICOLON	;	57	7
RBRACE	}	58	0
INT	int	60	0
ID	max_flow	60	3	0x55ac640da4f0
LPAREN	(	60	11
INT	int	60	12
ID	s	60	15	0x55ac640da428
COMMA	,	60	16
INT	int	60	17
ID	t	60	20	0x55ac640da450
RPAREN	)	60	21
LBRACE	{	61	0
INT	int	62	0
ID	flow	62	3	0x55ac640da518
ASSIGN	=	62	7
DECIMAL	0	62	8	0
SEMICOLON	;	62	9
WHILE	while	64	0
LPAREN	(	64	5
DECIMAL	1	64	6	1
RPAREN	)	64	7
LBRACE	{	64	8
ID	my_memset	65	0	0x55ac640da298
LPAREN	(	65	9
ID	used	65	10	0x55ac640da270
COMMA	,	65	14
DECIMAL	0	65	15	0
COMMA	,	65	16
DECIMAL	10	65	17	10
RPAREN	)	65	19
SEMICOLON	;	65	20
INT	int	67	0
ID	f	67	3	0x55ac640da478
ASSIGN	=	67	4
ID	dfs	67	5	0x55ac640da400
LPAREN	(	67	8
ID	s	67	9	0x55ac640da428
COMMA	,	67	10
ID	t	67	11	0x55ac640da450
COMMA	,	67	12
ID	INF	67	13	0x55ac640da1a8
RPAREN	)	67	16
SEMICOLON	;	67	17
IF	if	68	0
LPAREN	(	68	2
ID	f	68	3	0x55ac640da478
EQUAL	==	68	4
DECIMAL	0	68	6	0
RPAREN	)	68	7
RETURN	return	69	0
ID	flow	69	6	0x55ac640da518
SEMICOLON	;	69	10
ID	flow	70	0	0x55ac640da518
ASSIGN	=	70	4
ID	flow	70	5	0x55ac640da518
ADD	+	70	9
ID	f	70	10	0x55ac640da478
SEMICOLON	;	70	11
RBRACE	}	71	0
RBRACE	}	72	0
INT	int	74	0
ID	main	74	3	0x55ac640da540
LPAREN	(	74	7
RPAREN	)	74	8
LBRACE	{	75	0
INT	int	76	0
ID	V	76	3	0x55ac640da568
COMMA	,	76	4
ID	E	76	5	0x55ac640da590
SEMICOLON	;	76	6
ID	V	77	0	0x55ac640da568
ASSIGN	=	77	1
ID	getint	77	2	0x55ac640da5b8
LPAREN	(	77	8
RPAREN	)	77	9
SEMICOLON	;	77	10
ID	E	78	0	0x55ac640da590
ASSIGN	=	78	1
ID	getint	78	2	0x55ac640da5b8
LPAREN	(	78	8
RPAREN	)	78	9
SEMICOLON	;	78	10
ID	my_memset	79	0	0x55ac640da298
LPAREN	(	79	9
ID	size	79	10	0x55ac640da1d0
COMMA	,	79	14
DECIMAL	0	79	15	0
COMMA	,	79	16
DECIMAL	10	79	17	10
RPAREN	)	79	19
SEMICOLON	;	79	20
WHILE	while	81	0
LPAREN	(	81	5
ID	E	81	6	0x55ac640da590
GREATER	>	81	7
DECIMAL	0	81	8	0
RPAREN	)	81	9
LBRACE	{	81	10
INT	int	82	0
ID	u	82	3	0x55ac640da388
COMMA	,	82	4
ID	v	82	5	0x55ac640da3b0
SEMICOLON	;	82	6
ID	u	83	0	0x55ac640da388
ASSIGN	=	83	1
ID	getint	83	2	0x55ac640da5b8
LPAREN	(	83	8
RPAREN	)	83	9
SEMICOLON	;	83	10
ID	v	84	0	0x55ac640da3b0
ASSIGN	=	84	1
ID	getint	84	2	0x55ac640da5b8
LPAREN	(	84	8
RPAREN	)	84	9
SEMICOLON	;	84	10
INT	int	85	0
ID	c	85	3	0x55ac640da3d8
ASSIGN	=	85	4
ID	getint	85	5	0x55ac640da5b8
LPAREN	(	85	11
RPAREN	)	85	12
SEMICOLON	;	85	13
ID	add_node	86	0	0x55ac640da360
LPAREN	(	86	8
ID	u	86	9	0x55ac640da388
COMMA	,	86	10
ID	v	86	11	0x55ac640da3b0
COMMA	,	86	12
ID	c	86	13	0x55ac640da3d8
RPAREN	)	86	14
SEMICOLON	;	86	15
ID	E	87	0	0x55ac640da590
ASSIGN	=	87	1
ID	E	87	2	0x55ac640da590
SUB	-	87	3
DECIMAL	1	87	4	1
SEMICOLON	;	87	5
RBRACE	}	88	0
ID	putint	90	0	0x55ac640da5e0
LPAREN	(	90	6
ID	max_flow	90	7	0x55ac640da4f0
LPAREN	(	90	15
DECIMAL	1	90	16	1
COMMA	,	90	17
ID	V	90	18	0x55ac640da568
RPAREN	)	90	19
RPAREN	)	90	20
SEMICOLON	;	90	21
ID	putch	91	0	0x55ac640da608
LPAREN	(	91	5
DECIMAL	10	91	6	10
RPAREN	)	91	8
SEMICOLON	;	91	9
RETURN	return	92	0
DECIMAL	0	92	6	0
SEMICOLON	;	92	7
RBRACE	}	93	0
