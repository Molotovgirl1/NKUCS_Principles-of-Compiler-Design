INT	int	0	0
ID	n	0	3	0x55ce1f5701a8
SEMICOLON	;	0	4
INT	int	2	0
ID	counting_sort	2	3	0x55ce1f5701d0
LPAREN	(	2	16
INT	int	2	17
ID	ini_arr	2	20	0x55ce1f5701f8
LBRACKET	[	2	27
RBRACKET	]	2	28
COMMA	,	2	29
INT	int	2	30
ID	sorted_arr	2	33	0x55ce1f570220
LBRACKET	[	2	43
RBRACKET	]	2	44
COMMA	,	2	45
INT	int	2	46
ID	n	2	49	0x55ce1f5701a8
RPAREN	)	2	50
LBRACE	{	2	51
INT	int	3	0
ID	count_arr	3	3	0x55ce1f570248
LBRACKET	[	3	12
DECIMAL	10	3	13	10
RBRACKET	]	3	15
SEMICOLON	;	3	16
INT	int	4	0
ID	i	4	3	0x55ce1f570270
SEMICOLON	;	4	4
INT	int	5	0
ID	j	5	3	0x55ce1f570298
SEMICOLON	;	5	4
INT	int	6	0
ID	k	6	3	0x55ce1f5702c0
SEMICOLON	;	6	4
ID	k	7	0	0x55ce1f5702c0
ASSIGN	=	7	1
DECIMAL	0	7	2	0
SEMICOLON	;	7	3
ID	i	8	0	0x55ce1f570270
ASSIGN	=	8	1
DECIMAL	0	8	2	0
SEMICOLON	;	8	3
ID	j	9	0	0x55ce1f570298
ASSIGN	=	9	1
DECIMAL	0	9	2	0
SEMICOLON	;	9	3
WHILE	while	10	0
LPAREN	(	10	5
ID	k	10	6	0x55ce1f5702c0
LESS	<	10	7
DECIMAL	10	10	8	10
RPAREN	)	10	10
LBRACE	{	10	11
ID	count_arr	11	0	0x55ce1f570248
LBRACKET	[	11	9
ID	k	11	10	0x55ce1f5702c0
RBRACKET	]	11	11
ASSIGN	=	11	12
DECIMAL	0	11	13	0
SEMICOLON	;	11	14
ID	k	12	0	0x55ce1f5702c0
ASSIGN	=	12	1
ID	k	12	2	0x55ce1f5702c0
ADD	+	12	3
DECIMAL	1	12	4	1
SEMICOLON	;	12	5
RBRACE	}	13	0
WHILE	while	14	0
LPAREN	(	14	5
ID	i	14	6	0x55ce1f570270
LESS	<	14	7
ID	n	14	8	0x55ce1f5701a8
RPAREN	)	14	9
LBRACE	{	15	0
ID	count_arr	16	0	0x55ce1f570248
LBRACKET	[	16	9
ID	ini_arr	16	10	0x55ce1f5701f8
LBRACKET	[	16	17
ID	i	16	18	0x55ce1f570270
RBRACKET	]	16	19
RBRACKET	]	16	20
ASSIGN	=	16	21
ID	count_arr	16	22	0x55ce1f570248
LBRACKET	[	16	31
ID	ini_arr	16	32	0x55ce1f5701f8
LBRACKET	[	16	39
ID	i	16	40	0x55ce1f570270
RBRACKET	]	16	41
RBRACKET	]	16	42
ADD	+	16	43
DECIMAL	1	16	44	1
SEMICOLON	;	16	45
ID	i	17	0	0x55ce1f570270
ASSIGN	=	17	1
ID	i	17	2	0x55ce1f570270
ADD	+	17	3
DECIMAL	1	17	4	1
SEMICOLON	;	17	5
RBRACE	}	18	0
ID	k	19	0	0x55ce1f5702c0
ASSIGN	=	19	1
DECIMAL	1	19	2	1
SEMICOLON	;	19	3
WHILE	while	20	0
LPAREN	(	20	5
ID	k	20	6	0x55ce1f5702c0
LESS	<	20	7
DECIMAL	10	20	8	10
RPAREN	)	20	10
LBRACE	{	20	11
ID	count_arr	21	0	0x55ce1f570248
LBRACKET	[	21	9
ID	k	21	10	0x55ce1f5702c0
RBRACKET	]	21	11
ASSIGN	=	21	12
ID	count_arr	21	13	0x55ce1f570248
LBRACKET	[	21	22
ID	k	21	23	0x55ce1f5702c0
RBRACKET	]	21	24
ADD	+	21	25
ID	count_arr	21	26	0x55ce1f570248
LBRACKET	[	21	35
ID	k	21	36	0x55ce1f5702c0
SUB	-	21	37
DECIMAL	1	21	38	1
RBRACKET	]	21	39
SEMICOLON	;	21	40
ID	k	22	0	0x55ce1f5702c0
ASSIGN	=	22	1
ID	k	22	2	0x55ce1f5702c0
ADD	+	22	3
DECIMAL	1	22	4	1
SEMICOLON	;	22	5
RBRACE	}	23	0
ID	j	24	0	0x55ce1f570298
ASSIGN	=	24	1
ID	n	24	2	0x55ce1f5701a8
SEMICOLON	;	24	3
WHILE	while	25	0
LPAREN	(	25	5
ID	j	25	6	0x55ce1f570298
GREATER	>	25	7
DECIMAL	0	25	8	0
RPAREN	)	25	9
LBRACE	{	25	10
ID	count_arr	26	0	0x55ce1f570248
LBRACKET	[	26	9
ID	ini_arr	26	10	0x55ce1f5701f8
LBRACKET	[	26	17
ID	j	26	18	0x55ce1f570298
SUB	-	26	19
DECIMAL	1	26	20	1
RBRACKET	]	26	21
RBRACKET	]	26	22
ASSIGN	=	26	23
ID	count_arr	26	24	0x55ce1f570248
LBRACKET	[	26	33
ID	ini_arr	26	34	0x55ce1f5701f8
LBRACKET	[	26	41
ID	j	26	42	0x55ce1f570298
SUB	-	26	43
DECIMAL	1	26	44	1
RBRACKET	]	26	45
RBRACKET	]	26	46
SUB	-	26	47
DECIMAL	1	26	48	1
SEMICOLON	;	26	49
ID	sorted_arr	27	0	0x55ce1f570220
LBRACKET	[	27	10
ID	count_arr	27	11	0x55ce1f570248
LBRACKET	[	27	20
ID	ini_arr	27	21	0x55ce1f5701f8
LBRACKET	[	27	28
ID	j	27	29	0x55ce1f570298
SUB	-	27	30
DECIMAL	1	27	31	1
RBRACKET	]	27	32
RBRACKET	]	27	33
RBRACKET	]	27	34
ASSIGN	=	27	35
ID	ini_arr	27	36	0x55ce1f5701f8
LBRACKET	[	27	43
ID	j	27	44	0x55ce1f570298
SUB	-	27	45
DECIMAL	1	27	46	1
RBRACKET	]	27	47
SEMICOLON	;	27	48
ID	j	28	0	0x55ce1f570298
ASSIGN	=	28	1
ID	j	28	2	0x55ce1f570298
SUB	-	28	3
DECIMAL	1	28	4	1
SEMICOLON	;	28	5
RBRACE	}	29	0
RETURN	return	30	0
DECIMAL	0	30	6	0
SEMICOLON	;	30	7
RBRACE	}	31	0
INT	int	34	0
ID	main	34	3	0x55ce1f5702e8
LPAREN	(	34	7
RPAREN	)	34	8
LBRACE	{	34	9
ID	n	35	0	0x55ce1f5701a8
ASSIGN	=	35	1
DECIMAL	10	35	2	10
SEMICOLON	;	35	4
INT	int	36	0
ID	a	36	3	0x55ce1f570310
LBRACKET	[	36	4
DECIMAL	10	36	5	10
RBRACKET	]	36	7
SEMICOLON	;	36	8
ID	a	37	0	0x55ce1f570310
LBRACKET	[	37	1
DECIMAL	0	37	2	0
RBRACKET	]	37	3
ASSIGN	=	37	4
DECIMAL	4	37	5	4
SEMICOLON	;	37	6
ID	a	37	7	0x55ce1f570310
LBRACKET	[	37	8
DECIMAL	1	37	9	1
RBRACKET	]	37	10
ASSIGN	=	37	11
DECIMAL	3	37	12	3
SEMICOLON	;	37	13
ID	a	37	14	0x55ce1f570310
LBRACKET	[	37	15
DECIMAL	2	37	16	2
RBRACKET	]	37	17
ASSIGN	=	37	18
DECIMAL	9	37	19	9
SEMICOLON	;	37	20
ID	a	37	21	0x55ce1f570310
LBRACKET	[	37	22
DECIMAL	3	37	23	3
RBRACKET	]	37	24
ASSIGN	=	37	25
DECIMAL	2	37	26	2
SEMICOLON	;	37	27
ID	a	37	28	0x55ce1f570310
LBRACKET	[	37	29
DECIMAL	4	37	30	4
RBRACKET	]	37	31
ASSIGN	=	37	32
DECIMAL	0	37	33	0
SEMICOLON	;	37	34
ID	a	38	0	0x55ce1f570310
LBRACKET	[	38	1
DECIMAL	5	38	2	5
RBRACKET	]	38	3
ASSIGN	=	38	4
DECIMAL	1	38	5	1
SEMICOLON	;	38	6
ID	a	38	7	0x55ce1f570310
LBRACKET	[	38	8
DECIMAL	6	38	9	6
RBRACKET	]	38	10
ASSIGN	=	38	11
DECIMAL	6	38	12	6
SEMICOLON	;	38	13
ID	a	38	14	0x55ce1f570310
LBRACKET	[	38	15
DECIMAL	7	38	16	7
RBRACKET	]	38	17
ASSIGN	=	38	18
DECIMAL	5	38	19	5
SEMICOLON	;	38	20
ID	a	38	21	0x55ce1f570310
LBRACKET	[	38	22
DECIMAL	8	38	23	8
RBRACKET	]	38	24
ASSIGN	=	38	25
DECIMAL	7	38	26	7
SEMICOLON	;	38	27
ID	a	38	28	0x55ce1f570310
LBRACKET	[	38	29
DECIMAL	9	38	30	9
RBRACKET	]	38	31
ASSIGN	=	38	32
DECIMAL	8	38	33	8
SEMICOLON	;	38	34
INT	int	39	0
ID	i	39	3	0x55ce1f570270
SEMICOLON	;	39	4
ID	i	40	0	0x55ce1f570270
ASSIGN	=	40	1
DECIMAL	0	40	2	0
SEMICOLON	;	40	3
INT	int	41	0
ID	b	41	3	0x55ce1f570338
LBRACKET	[	41	4
DECIMAL	10	41	5	10
RBRACKET	]	41	7
SEMICOLON	;	41	8
ID	i	42	0	0x55ce1f570270
ASSIGN	=	42	1
ID	counting_sort	42	2	0x55ce1f5701d0
LPAREN	(	42	15
ID	a	42	16	0x55ce1f570310
COMMA	,	42	17
ID	b	42	18	0x55ce1f570338
COMMA	,	42	19
ID	n	42	20	0x55ce1f5701a8
RPAREN	)	42	21
SEMICOLON	;	42	22
WHILE	while	43	0
LPAREN	(	43	5
ID	i	43	6	0x55ce1f570270
LESS	<	43	7
ID	n	43	8	0x55ce1f5701a8
RPAREN	)	43	9
LBRACE	{	43	10
INT	int	44	0
ID	tmp	44	3	0x55ce1f570360
SEMICOLON	;	44	6
ID	tmp	45	0	0x55ce1f570360
ASSIGN	=	45	3
ID	b	45	4	0x55ce1f570338
LBRACKET	[	45	5
ID	i	45	6	0x55ce1f570270
RBRACKET	]	45	7
SEMICOLON	;	45	8
ID	putint	46	0	0x55ce1f570388
LPAREN	(	46	6
ID	tmp	46	7	0x55ce1f570360
RPAREN	)	46	10
SEMICOLON	;	46	11
ID	tmp	47	0	0x55ce1f570360
ASSIGN	=	47	3
DECIMAL	10	47	4	10
SEMICOLON	;	47	6
ID	putch	48	0	0x55ce1f5703b0
LPAREN	(	48	5
ID	tmp	48	6	0x55ce1f570360
RPAREN	)	48	9
SEMICOLON	;	48	10
ID	i	49	0	0x55ce1f570270
ASSIGN	=	49	1
ID	i	49	2	0x55ce1f570270
ADD	+	49	3
DECIMAL	1	49	4	1
SEMICOLON	;	49	5
RBRACE	}	50	0
RETURN	return	51	0
DECIMAL	0	51	6	0
SEMICOLON	;	51	7
RBRACE	}	52	0
