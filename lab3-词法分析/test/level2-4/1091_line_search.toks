INT	int	1	0
ID	main	1	3	0x55b9268ee1a8
LPAREN	(	1	7
RPAREN	)	1	8
LBRACE	{	2	0
INT	int	4	0
ID	i	4	3	0x55b9268ee1d0
SEMICOLON	;	4	4
INT	int	5	0
ID	sum	5	3	0x55b9268ee1f8
SEMICOLON	;	5	6
INT	int	6	0
ID	a	6	3	0x55b9268ee220
LBRACKET	[	6	4
DECIMAL	10	6	5	10
RBRACKET	]	6	7
SEMICOLON	;	6	8
ID	sum	7	0	0x55b9268ee1f8
ASSIGN	=	7	3
DECIMAL	0	7	4	0
SEMICOLON	;	7	5
ID	i	10	0	0x55b9268ee1d0
ASSIGN	=	10	1
DECIMAL	0	10	2	0
SEMICOLON	;	10	3
WHILE	while	11	0
LPAREN	(	11	5
ID	i	11	6	0x55b9268ee1d0
LESS	<	11	7
DECIMAL	10	11	8	10
RPAREN	)	11	10
LBRACE	{	12	0
ID	a	13	0	0x55b9268ee220
LBRACKET	[	13	1
ID	i	13	2	0x55b9268ee1d0
RBRACKET	]	13	3
ASSIGN	=	13	4
ID	i	13	5	0x55b9268ee1d0
ADD	+	13	6
DECIMAL	1	13	7	1
SEMICOLON	;	13	8
ID	i	14	0	0x55b9268ee1d0
ASSIGN	=	14	1
ID	i	14	2	0x55b9268ee1d0
ADD	+	14	3
DECIMAL	1	14	4	1
SEMICOLON	;	14	5
RBRACE	}	15	0
INT	int	16	0
ID	x	16	3	0x55b9268ee248
SEMICOLON	;	16	4
INT	int	17	0
ID	high	17	3	0x55b9268ee270
SEMICOLON	;	17	7
INT	int	18	0
ID	low	18	3	0x55b9268ee298
SEMICOLON	;	18	6
INT	int	19	0
ID	mid	19	3	0x55b9268ee2c0
SEMICOLON	;	19	6
INT	int	20	0
ID	n	20	3	0x55b9268ee2e8
SEMICOLON	;	20	4
ID	n	21	0	0x55b9268ee2e8
ASSIGN	=	21	1
DECIMAL	10	21	2	10
SEMICOLON	;	21	4
ID	x	22	0	0x55b9268ee248
ASSIGN	=	22	1
ID	getint	22	2	0x55b9268ee310
LPAREN	(	22	8
RPAREN	)	22	9
SEMICOLON	;	22	10
ID	high	23	0	0x55b9268ee270
ASSIGN	=	23	4
ID	n	23	5	0x55b9268ee2e8
SUB	-	23	6
DECIMAL	1	23	7	1
SEMICOLON	;	23	8
ID	low	24	0	0x55b9268ee298
ASSIGN	=	24	3
DECIMAL	0	24	4	0
SEMICOLON	;	24	5
ID	mid	25	0	0x55b9268ee2c0
ASSIGN	=	25	3
LPAREN	(	25	4
ID	high	25	5	0x55b9268ee270
ADD	+	25	9
ID	low	25	10	0x55b9268ee298
RPAREN	)	25	13
DIV	/	25	14
DECIMAL	2	25	15	2
SEMICOLON	;	25	16
INT	int	26	0
ID	flag	26	3	0x55b9268ee338
SEMICOLON	;	26	7
ID	flag	27	0	0x55b9268ee338
ASSIGN	=	27	4
DECIMAL	0	27	5	0
SEMICOLON	;	27	6
ID	i	29	0	0x55b9268ee1d0
ASSIGN	=	29	1
DECIMAL	0	29	2	0
SEMICOLON	;	29	3
INT	int	30	0
ID	j	30	3	0x55b9268ee360
SEMICOLON	;	30	4
ID	j	31	0	0x55b9268ee360
ASSIGN	=	31	1
DECIMAL	0	31	2	0
SEMICOLON	;	31	3
WHILE	while	32	0
LPAREN	(	32	5
ID	i	32	6	0x55b9268ee1d0
LESS	<	32	7
DECIMAL	10	32	8	10
AND	&&	32	10
ID	flag	32	12	0x55b9268ee338
EQUAL	==	32	16
DECIMAL	0	32	18	0
RPAREN	)	32	19
LBRACE	{	33	0
IF	if	34	0
LPAREN	(	34	2
ID	a	34	3	0x55b9268ee220
LBRACKET	[	34	4
ID	i	34	5	0x55b9268ee1d0
RBRACKET	]	34	6
EQUAL	==	34	7
ID	x	34	9	0x55b9268ee248
RPAREN	)	34	10
LBRACE	{	35	0
ID	flag	36	0	0x55b9268ee338
ASSIGN	=	36	4
DECIMAL	1	36	5	1
SEMICOLON	;	36	6
ID	j	37	0	0x55b9268ee360
ASSIGN	=	37	1
ID	i	37	2	0x55b9268ee1d0
SEMICOLON	;	37	3
RBRACE	}	38	0
ID	i	40	0	0x55b9268ee1d0
ASSIGN	=	40	1
ID	i	40	2	0x55b9268ee1d0
ADD	+	40	3
DECIMAL	1	40	4	1
SEMICOLON	;	40	5
RBRACE	}	42	0
IF	if	44	0
LPAREN	(	44	2
ID	flag	44	3	0x55b9268ee338
EQUAL	==	44	7
DECIMAL	1	44	9	1
RPAREN	)	44	10
ID	putint	45	0	0x55b9268ee388
LPAREN	(	45	6
ID	j	45	7	0x55b9268ee360
RPAREN	)	45	8
SEMICOLON	;	45	9
ELSE	else	46	0
LBRACE	{	47	0
ID	x	48	0	0x55b9268ee248
ASSIGN	=	48	1
DECIMAL	0	48	2	0
SEMICOLON	;	48	3
ID	putint	49	0	0x55b9268ee388
LPAREN	(	49	6
ID	x	49	7	0x55b9268ee248
RPAREN	)	49	8
SEMICOLON	;	49	9
RBRACE	}	50	0
ID	x	54	0	0x55b9268ee248
ASSIGN	=	54	1
DECIMAL	10	54	2	10
SEMICOLON	;	54	4
ID	putch	55	0	0x55b9268ee3b0
LPAREN	(	55	5
ID	x	55	6	0x55b9268ee248
RPAREN	)	55	7
SEMICOLON	;	55	8
RETURN	return	57	0
DECIMAL	0	57	6	0
SEMICOLON	;	57	7
RBRACE	}	58	0
